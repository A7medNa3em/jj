
NTI_atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c88  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000036  00800060  00000c88  00000d1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000f0  00800096  00800096  00000d52  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d52  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d84  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004d0  00000000  00000000  00000dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003887  00000000  00000000  00001290  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000168d  00000000  00000000  00004b17  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001ffe  00000000  00000000  000061a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e0c  00000000  00000000  000081a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001569  00000000  00000000  00008fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000295f  00000000  00000000  0000a519  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003f8  00000000  00000000  0000ce78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 d7 03 	jmp	0x7ae	; 0x7ae <__vector_1>
   8:	0c 94 fe 03 	jmp	0x7fc	; 0x7fc <__vector_2>
   c:	0c 94 25 04 	jmp	0x84a	; 0x84a <__vector_3>
  10:	0c 94 40 05 	jmp	0xa80	; 0xa80 <__vector_4>
  14:	0c 94 69 05 	jmp	0xad2	; 0xad2 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 17 05 	jmp	0xa2e	; 0xa2e <__vector_7>
  20:	0c 94 ee 04 	jmp	0x9dc	; 0x9dc <__vector_8>
  24:	0c 94 c5 04 	jmp	0x98a	; 0x98a <__vector_9>
  28:	0c 94 73 04 	jmp	0x8e6	; 0x8e6 <__vector_10>
  2c:	0c 94 9c 04 	jmp	0x938	; 0x938 <__vector_11>
  30:	0c 94 4c 04 	jmp	0x898	; 0x898 <__vector_12>
  34:	0c 94 92 05 	jmp	0xb24	; 0xb24 <__vector_13>
  38:	0c 94 bb 05 	jmp	0xb76	; 0xb76 <__vector_14>
  3c:	0c 94 e4 05 	jmp	0xbc8	; 0xbc8 <__vector_15>
  40:	0c 94 a5 02 	jmp	0x54a	; 0x54a <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e8       	ldi	r30, 0x88	; 136
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 39       	cpi	r26, 0x96	; 150
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a6 e9       	ldi	r26, 0x96	; 150
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 38       	cpi	r26, 0x86	; 134
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 02 	call	0x492	; 0x492 <main>
  8a:	0c 94 42 06 	jmp	0xc84	; 0xc84 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DHT_voidRequest>:
#endif

void DHT_voidRequest(void)
{
    /* Init pin as output */
    dio_vidConfigChannel(DHT_CONTROL_PORT, DHT_CONTROL_PIN, OUTPUT);
  92:	41 e0       	ldi	r20, 0x01	; 1
  94:	61 e0       	ldi	r22, 0x01	; 1
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	0e 94 ce 02 	call	0x59c	; 0x59c <dio_vidConfigChannel>
    /*
    the programme of MCU will set Data Single-bus voltage level from high to low
    and this process must take at least 18ms to ensure DHT’s detection of MCU's signal,
    then MCUwill pull up voltage and wait 20-40us for DHT’s response.
    */
    dio_vidWriteChannel(DHT_CONTROL_PORT, DHT_CONTROL_PIN, STD_LOW);
  9c:	40 e0       	ldi	r20, 0x00	; 0
  9e:	61 e0       	ldi	r22, 0x01	; 1
  a0:	80 e0       	ldi	r24, 0x00	; 0
  a2:	0e 94 3b 03 	call	0x676	; 0x676 <dio_vidWriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	2f ef       	ldi	r18, 0xFF	; 255
  a8:	89 ef       	ldi	r24, 0xF9	; 249
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	21 50       	subi	r18, 0x01	; 1
  ae:	80 40       	sbci	r24, 0x00	; 0
  b0:	90 40       	sbci	r25, 0x00	; 0
  b2:	e1 f7       	brne	.-8      	; 0xac <DHT_voidRequest+0x1a>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <DHT_voidRequest+0x24>
  b6:	00 00       	nop
    _delay_ms(20);
    dio_vidWriteChannel(DHT_CONTROL_PORT, DHT_CONTROL_PIN, STD_HIGH);
  b8:	41 e0       	ldi	r20, 0x01	; 1
  ba:	61 e0       	ldi	r22, 0x01	; 1
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	0e 94 3b 03 	call	0x676	; 0x676 <dio_vidWriteChannel>
  c2:	08 95       	ret

000000c4 <DHT_voidResponse>:
}

void DHT_voidResponse(void)
{
    /* Init pin as input */
    dio_vidConfigChannel(DHT_CONTROL_PORT, DHT_CONTROL_PIN, INPUT);
  c4:	40 e0       	ldi	r20, 0x00	; 0
  c6:	61 e0       	ldi	r22, 0x01	; 1
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	0e 94 ce 02 	call	0x59c	; 0x59c <dio_vidConfigChannel>
    /*
    Once DHT detects the start signal, it will send out a low-voltage-level response signal,
     which lasts 80us*/
    while (dio_dioLevelReadChannel(DHT_CONTROL_PORT, DHT_CONTROL_PIN) == STD_HIGH)
  ce:	61 e0       	ldi	r22, 0x01	; 1
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	0e 94 a8 03 	call	0x750	; 0x750 <dio_dioLevelReadChannel>
  d6:	81 30       	cpi	r24, 0x01	; 1
  d8:	d1 f3       	breq	.-12     	; 0xce <DHT_voidResponse+0xa>
        ;

    /*
    Then the programme of DHT sets Data Single-bus voltage level from low to high and
    keeps it for 80us for DHT’s preparation for sending data.*/
    while (dio_dioLevelReadChannel(DHT_CONTROL_PORT, DHT_CONTROL_PIN) == STD_LOW)
  da:	61 e0       	ldi	r22, 0x01	; 1
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	0e 94 a8 03 	call	0x750	; 0x750 <dio_dioLevelReadChannel>
  e2:	88 23       	and	r24, r24
  e4:	d1 f3       	breq	.-12     	; 0xda <DHT_voidResponse+0x16>
        ;
    while (dio_dioLevelReadChannel(DHT_CONTROL_PORT, DHT_CONTROL_PIN) == STD_HIGH)
  e6:	61 e0       	ldi	r22, 0x01	; 1
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	0e 94 a8 03 	call	0x750	; 0x750 <dio_dioLevelReadChannel>
  ee:	81 30       	cpi	r24, 0x01	; 1
  f0:	d1 f3       	breq	.-12     	; 0xe6 <DHT_voidResponse+0x22>
        ;
}
  f2:	08 95       	ret

000000f4 <DHT_u8Recive>:

u8 DHT_u8Recive(void)
{
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
    u8 data = 0;
    for (u8 i = 0; i < 8; i++)
  f8:	d0 e0       	ldi	r29, 0x00	; 0
        ;
}

u8 DHT_u8Recive(void)
{
    u8 data = 0;
  fa:	c0 e0       	ldi	r28, 0x00	; 0
    for (u8 i = 0; i < 8; i++)
  fc:	1e c0       	rjmp	.+60     	; 0x13a <DHT_u8Recive+0x46>
    {
        /* check received bit 0 or 1 */
        while (dio_dioLevelReadChannel(DHT_CONTROL_PORT, DHT_CONTROL_PIN) == STD_LOW)
  fe:	61 e0       	ldi	r22, 0x01	; 1
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	0e 94 a8 03 	call	0x750	; 0x750 <dio_dioLevelReadChannel>
 106:	88 23       	and	r24, r24
 108:	d1 f3       	breq	.-12     	; 0xfe <DHT_u8Recive+0xa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10a:	80 ea       	ldi	r24, 0xA0	; 160
 10c:	8a 95       	dec	r24
 10e:	f1 f7       	brne	.-4      	; 0x10c <DHT_u8Recive+0x18>
            ;

        _delay_us(30);
        /* if high pulse is greater than 30ms */
        if (dio_dioLevelReadChannel(DHT_CONTROL_PORT, DHT_CONTROL_PIN) == STD_HIGH)
 110:	61 e0       	ldi	r22, 0x01	; 1
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	0e 94 a8 03 	call	0x750	; 0x750 <dio_dioLevelReadChannel>
 118:	81 30       	cpi	r24, 0x01	; 1
 11a:	39 f4       	brne	.+14     	; 0x12a <DHT_u8Recive+0x36>
        {
            /* then its logic HIGH */
            data = (data << 1) | (0x01);
 11c:	8c 2f       	mov	r24, r28
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	88 0f       	add	r24, r24
 122:	99 1f       	adc	r25, r25
 124:	c8 2f       	mov	r28, r24
 126:	c1 60       	ori	r28, 0x01	; 1
 128:	01 c0       	rjmp	.+2      	; 0x12c <DHT_u8Recive+0x38>
        }
        else
        { /* otherwise its logic LOW */
            data = (data << 1);
 12a:	cc 0f       	add	r28, r28
        }
        while (dio_dioLevelReadChannel(DHT_CONTROL_PORT, DHT_CONTROL_PIN) == STD_HIGH)
 12c:	61 e0       	ldi	r22, 0x01	; 1
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	0e 94 a8 03 	call	0x750	; 0x750 <dio_dioLevelReadChannel>
 134:	81 30       	cpi	r24, 0x01	; 1
 136:	d1 f3       	breq	.-12     	; 0x12c <DHT_u8Recive+0x38>
}

u8 DHT_u8Recive(void)
{
    u8 data = 0;
    for (u8 i = 0; i < 8; i++)
 138:	df 5f       	subi	r29, 0xFF	; 255
 13a:	d8 30       	cpi	r29, 0x08	; 8
 13c:	00 f3       	brcs	.-64     	; 0xfe <DHT_u8Recive+0xa>
        }
        while (dio_dioLevelReadChannel(DHT_CONTROL_PORT, DHT_CONTROL_PIN) == STD_HIGH)
            ;
    }
    return data;
}
 13e:	8c 2f       	mov	r24, r28
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	08 95       	ret

00000146 <DHT_enuReadData>:

DHT_Read_t DHT_enuReadData(u16 *RH_Value, u16 *Temp_Value)
{
 146:	2f 92       	push	r2
 148:	3f 92       	push	r3
 14a:	4f 92       	push	r4
 14c:	5f 92       	push	r5
 14e:	6f 92       	push	r6
 150:	7f 92       	push	r7
 152:	8f 92       	push	r8
 154:	9f 92       	push	r9
 156:	af 92       	push	r10
 158:	bf 92       	push	r11
 15a:	cf 92       	push	r12
 15c:	df 92       	push	r13
 15e:	ef 92       	push	r14
 160:	ff 92       	push	r15
 162:	0f 93       	push	r16
 164:	1f 93       	push	r17
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	00 d0       	rcall	.+0      	; 0x16c <DHT_enuReadData+0x26>
 16c:	00 d0       	rcall	.+0      	; 0x16e <DHT_enuReadData+0x28>
 16e:	1f 92       	push	r1
 170:	cd b7       	in	r28, 0x3d	; 61
 172:	de b7       	in	r29, 0x3e	; 62
 174:	2c 01       	movw	r4, r24
 176:	1b 01       	movw	r2, r22
    DHT_Read_t DHT_State = ERROR_READ;
    u8 I_RH = 0, D_RH = 0, I_Temp = 0, D_Temp = 0, CheckSum = 0;
    char data[5];
    DHT_voidRequest();  /* send start pulse */
 178:	0e 94 49 00 	call	0x92	; 0x92 <DHT_voidRequest>
    DHT_voidResponse(); /* receive response */
 17c:	0e 94 62 00 	call	0xc4	; 0xc4 <DHT_voidResponse>

    I_RH = DHT_u8Recive(); /* store first eight bit in I_RH */
 180:	0e 94 7a 00 	call	0xf4	; 0xf4 <DHT_u8Recive>
 184:	e8 2e       	mov	r14, r24

    D_RH = DHT_u8Recive(); /* store next eight bit in D_RH */
 186:	0e 94 7a 00 	call	0xf4	; 0xf4 <DHT_u8Recive>
 18a:	88 2e       	mov	r8, r24

    I_Temp = DHT_u8Recive(); /* store next eight bit in I_Temp */
 18c:	0e 94 7a 00 	call	0xf4	; 0xf4 <DHT_u8Recive>
 190:	08 2f       	mov	r16, r24

    D_Temp = DHT_u8Recive(); /* store next eight bit in D_Temp */
 192:	0e 94 7a 00 	call	0xf4	; 0xf4 <DHT_u8Recive>
 196:	a8 2e       	mov	r10, r24

    CheckSum = DHT_u8Recive(); /* store next eight bit in CheckSum */
 198:	0e 94 7a 00 	call	0xf4	; 0xf4 <DHT_u8Recive>
 19c:	c8 2e       	mov	r12, r24

#ifdef DEBUG

    itoa((I_RH + D_RH + I_Temp + D_Temp), data, 10);
 19e:	f1 2c       	mov	r15, r1
 1a0:	91 2c       	mov	r9, r1
 1a2:	37 01       	movw	r6, r14
 1a4:	68 0c       	add	r6, r8
 1a6:	79 1c       	adc	r7, r9
 1a8:	10 e0       	ldi	r17, 0x00	; 0
 1aa:	60 0e       	add	r6, r16
 1ac:	71 1e       	adc	r7, r17
 1ae:	b1 2c       	mov	r11, r1
 1b0:	6a 0c       	add	r6, r10
 1b2:	7b 1c       	adc	r7, r11
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 1b4:	4a e0       	ldi	r20, 0x0A	; 10
 1b6:	be 01       	movw	r22, r28
 1b8:	6f 5f       	subi	r22, 0xFF	; 255
 1ba:	7f 4f       	sbci	r23, 0xFF	; 255
 1bc:	c3 01       	movw	r24, r6
 1be:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__itoa_ncheck>
    LCD_GoToXY(3, 0);
 1c2:	60 e0       	ldi	r22, 0x00	; 0
 1c4:	83 e0       	ldi	r24, 0x03	; 3
 1c6:	0e 94 03 02 	call	0x406	; 0x406 <LCD_GoToXY>
    LCD_WriteString(data);
 1ca:	ce 01       	movw	r24, r28
 1cc:	01 96       	adiw	r24, 0x01	; 1
 1ce:	0e 94 1f 02 	call	0x43e	; 0x43e <LCD_WriteString>
    LCD_WriteString(" == ");
 1d2:	81 e7       	ldi	r24, 0x71	; 113
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	0e 94 1f 02 	call	0x43e	; 0x43e <LCD_WriteString>
    itoa(CheckSum, data, 10);
 1da:	d1 2c       	mov	r13, r1
 1dc:	4a e0       	ldi	r20, 0x0A	; 10
 1de:	be 01       	movw	r22, r28
 1e0:	6f 5f       	subi	r22, 0xFF	; 255
 1e2:	7f 4f       	sbci	r23, 0xFF	; 255
 1e4:	c6 01       	movw	r24, r12
 1e6:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__itoa_ncheck>
    LCD_WriteString(data);
 1ea:	ce 01       	movw	r24, r28
 1ec:	01 96       	adiw	r24, 0x01	; 1
 1ee:	0e 94 1f 02 	call	0x43e	; 0x43e <LCD_WriteString>

#endif

    if ((I_RH + D_RH + I_Temp + D_Temp) == CheckSum)
 1f2:	6c 14       	cp	r6, r12
 1f4:	7d 04       	cpc	r7, r13
 1f6:	81 f4       	brne	.+32     	; 0x218 <DHT_enuReadData+0xd2>
    {
        *RH_Value = (I_RH << 8) + D_RH;
 1f8:	fe 2c       	mov	r15, r14
 1fa:	ee 24       	eor	r14, r14
 1fc:	8e 0c       	add	r8, r14
 1fe:	9f 1c       	adc	r9, r15
 200:	f2 01       	movw	r30, r4
 202:	91 82       	std	Z+1, r9	; 0x01
 204:	80 82       	st	Z, r8
        *Temp_Value = (I_Temp << 8) + D_Temp;
 206:	10 2f       	mov	r17, r16
 208:	00 27       	eor	r16, r16
 20a:	a0 0e       	add	r10, r16
 20c:	b1 1e       	adc	r11, r17
 20e:	f1 01       	movw	r30, r2
 210:	b1 82       	std	Z+1, r11	; 0x01
 212:	a0 82       	st	Z, r10
        DHT_State = SUCCESS_READ;
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	01 c0       	rjmp	.+2      	; 0x21a <DHT_enuReadData+0xd4>
    }
    else
    {
        DHT_State = ERROR_READ;
 218:	80 e0       	ldi	r24, 0x00	; 0
    }

    return DHT_State;
}
 21a:	0f 90       	pop	r0
 21c:	0f 90       	pop	r0
 21e:	0f 90       	pop	r0
 220:	0f 90       	pop	r0
 222:	0f 90       	pop	r0
 224:	df 91       	pop	r29
 226:	cf 91       	pop	r28
 228:	1f 91       	pop	r17
 22a:	0f 91       	pop	r16
 22c:	ff 90       	pop	r15
 22e:	ef 90       	pop	r14
 230:	df 90       	pop	r13
 232:	cf 90       	pop	r12
 234:	bf 90       	pop	r11
 236:	af 90       	pop	r10
 238:	9f 90       	pop	r9
 23a:	8f 90       	pop	r8
 23c:	7f 90       	pop	r7
 23e:	6f 90       	pop	r6
 240:	5f 90       	pop	r5
 242:	4f 90       	pop	r4
 244:	3f 90       	pop	r3
 246:	2f 90       	pop	r2
 248:	08 95       	ret

0000024a <LCD_lcd_kick>:
void LCD_WriteChar(u8 ch, u8 row, u8 col)
{
	LCD_GoToXY(row,col);
	LCD_WriteData(ch);
	
}
 24a:	41 e0       	ldi	r20, 0x01	; 1
 24c:	62 e0       	ldi	r22, 0x02	; 2
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	0e 94 3b 03 	call	0x676	; 0x676 <dio_vidWriteChannel>
 254:	8f e9       	ldi	r24, 0x9F	; 159
 256:	9f e0       	ldi	r25, 0x0F	; 15
 258:	01 97       	sbiw	r24, 0x01	; 1
 25a:	f1 f7       	brne	.-4      	; 0x258 <LCD_lcd_kick+0xe>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <LCD_lcd_kick+0x14>
 25e:	00 00       	nop
 260:	40 e0       	ldi	r20, 0x00	; 0
 262:	62 e0       	ldi	r22, 0x02	; 2
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	0e 94 3b 03 	call	0x676	; 0x676 <dio_vidWriteChannel>
 26a:	8f e9       	ldi	r24, 0x9F	; 159
 26c:	9f e0       	ldi	r25, 0x0F	; 15
 26e:	01 97       	sbiw	r24, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <LCD_lcd_kick+0x24>
 272:	00 c0       	rjmp	.+0      	; 0x274 <LCD_lcd_kick+0x2a>
 274:	00 00       	nop
 276:	08 95       	ret

00000278 <LCD_SendCommand>:
 278:	cf 93       	push	r28
 27a:	c8 2f       	mov	r28, r24
 27c:	40 e0       	ldi	r20, 0x00	; 0
 27e:	63 e0       	ldi	r22, 0x03	; 3
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	0e 94 3b 03 	call	0x676	; 0x676 <dio_vidWriteChannel>
 286:	40 e0       	ldi	r20, 0x00	; 0
 288:	69 e0       	ldi	r22, 0x09	; 9
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	0e 94 3b 03 	call	0x676	; 0x676 <dio_vidWriteChannel>
 290:	c4 fb       	bst	r28, 4
 292:	44 27       	eor	r20, r20
 294:	40 f9       	bld	r20, 0
 296:	60 e0       	ldi	r22, 0x00	; 0
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	0e 94 3b 03 	call	0x676	; 0x676 <dio_vidWriteChannel>
 29e:	c5 fb       	bst	r28, 5
 2a0:	44 27       	eor	r20, r20
 2a2:	40 f9       	bld	r20, 0
 2a4:	61 e0       	ldi	r22, 0x01	; 1
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	0e 94 3b 03 	call	0x676	; 0x676 <dio_vidWriteChannel>
 2ac:	c6 fb       	bst	r28, 6
 2ae:	44 27       	eor	r20, r20
 2b0:	40 f9       	bld	r20, 0
 2b2:	62 e0       	ldi	r22, 0x02	; 2
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	0e 94 3b 03 	call	0x676	; 0x676 <dio_vidWriteChannel>
 2ba:	4c 2f       	mov	r20, r28
 2bc:	44 1f       	adc	r20, r20
 2be:	44 27       	eor	r20, r20
 2c0:	44 1f       	adc	r20, r20
 2c2:	64 e0       	ldi	r22, 0x04	; 4
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	0e 94 3b 03 	call	0x676	; 0x676 <dio_vidWriteChannel>
 2ca:	0e 94 25 01 	call	0x24a	; 0x24a <LCD_lcd_kick>
 2ce:	4c 2f       	mov	r20, r28
 2d0:	41 70       	andi	r20, 0x01	; 1
 2d2:	60 e0       	ldi	r22, 0x00	; 0
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	0e 94 3b 03 	call	0x676	; 0x676 <dio_vidWriteChannel>
 2da:	c1 fb       	bst	r28, 1
 2dc:	44 27       	eor	r20, r20
 2de:	40 f9       	bld	r20, 0
 2e0:	61 e0       	ldi	r22, 0x01	; 1
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	0e 94 3b 03 	call	0x676	; 0x676 <dio_vidWriteChannel>
 2e8:	c2 fb       	bst	r28, 2
 2ea:	44 27       	eor	r20, r20
 2ec:	40 f9       	bld	r20, 0
 2ee:	62 e0       	ldi	r22, 0x02	; 2
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	0e 94 3b 03 	call	0x676	; 0x676 <dio_vidWriteChannel>
 2f6:	c3 fb       	bst	r28, 3
 2f8:	44 27       	eor	r20, r20
 2fa:	40 f9       	bld	r20, 0
 2fc:	64 e0       	ldi	r22, 0x04	; 4
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	0e 94 3b 03 	call	0x676	; 0x676 <dio_vidWriteChannel>
 304:	0e 94 25 01 	call	0x24a	; 0x24a <LCD_lcd_kick>
 308:	cf 91       	pop	r28
 30a:	08 95       	ret

0000030c <LCD_WriteData>:
 30c:	cf 93       	push	r28
 30e:	c8 2f       	mov	r28, r24
 310:	41 e0       	ldi	r20, 0x01	; 1
 312:	63 e0       	ldi	r22, 0x03	; 3
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	0e 94 3b 03 	call	0x676	; 0x676 <dio_vidWriteChannel>
 31a:	40 e0       	ldi	r20, 0x00	; 0
 31c:	69 e0       	ldi	r22, 0x09	; 9
 31e:	80 e0       	ldi	r24, 0x00	; 0
 320:	0e 94 3b 03 	call	0x676	; 0x676 <dio_vidWriteChannel>
 324:	c4 fb       	bst	r28, 4
 326:	44 27       	eor	r20, r20
 328:	40 f9       	bld	r20, 0
 32a:	60 e0       	ldi	r22, 0x00	; 0
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	0e 94 3b 03 	call	0x676	; 0x676 <dio_vidWriteChannel>
 332:	c5 fb       	bst	r28, 5
 334:	44 27       	eor	r20, r20
 336:	40 f9       	bld	r20, 0
 338:	61 e0       	ldi	r22, 0x01	; 1
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	0e 94 3b 03 	call	0x676	; 0x676 <dio_vidWriteChannel>
 340:	c6 fb       	bst	r28, 6
 342:	44 27       	eor	r20, r20
 344:	40 f9       	bld	r20, 0
 346:	62 e0       	ldi	r22, 0x02	; 2
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	0e 94 3b 03 	call	0x676	; 0x676 <dio_vidWriteChannel>
 34e:	4c 2f       	mov	r20, r28
 350:	44 1f       	adc	r20, r20
 352:	44 27       	eor	r20, r20
 354:	44 1f       	adc	r20, r20
 356:	64 e0       	ldi	r22, 0x04	; 4
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	0e 94 3b 03 	call	0x676	; 0x676 <dio_vidWriteChannel>
 35e:	0e 94 25 01 	call	0x24a	; 0x24a <LCD_lcd_kick>
 362:	4c 2f       	mov	r20, r28
 364:	41 70       	andi	r20, 0x01	; 1
 366:	60 e0       	ldi	r22, 0x00	; 0
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	0e 94 3b 03 	call	0x676	; 0x676 <dio_vidWriteChannel>
 36e:	c1 fb       	bst	r28, 1
 370:	44 27       	eor	r20, r20
 372:	40 f9       	bld	r20, 0
 374:	61 e0       	ldi	r22, 0x01	; 1
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	0e 94 3b 03 	call	0x676	; 0x676 <dio_vidWriteChannel>
 37c:	c2 fb       	bst	r28, 2
 37e:	44 27       	eor	r20, r20
 380:	40 f9       	bld	r20, 0
 382:	62 e0       	ldi	r22, 0x02	; 2
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	0e 94 3b 03 	call	0x676	; 0x676 <dio_vidWriteChannel>
 38a:	c3 fb       	bst	r28, 3
 38c:	44 27       	eor	r20, r20
 38e:	40 f9       	bld	r20, 0
 390:	64 e0       	ldi	r22, 0x04	; 4
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	0e 94 3b 03 	call	0x676	; 0x676 <dio_vidWriteChannel>
 398:	0e 94 25 01 	call	0x24a	; 0x24a <LCD_lcd_kick>
 39c:	cf 91       	pop	r28
 39e:	08 95       	ret

000003a0 <LCD_Init>:
 3a0:	41 e0       	ldi	r20, 0x01	; 1
 3a2:	63 e0       	ldi	r22, 0x03	; 3
 3a4:	80 e0       	ldi	r24, 0x00	; 0
 3a6:	0e 94 ce 02 	call	0x59c	; 0x59c <dio_vidConfigChannel>
 3aa:	41 e0       	ldi	r20, 0x01	; 1
 3ac:	62 e0       	ldi	r22, 0x02	; 2
 3ae:	80 e0       	ldi	r24, 0x00	; 0
 3b0:	0e 94 ce 02 	call	0x59c	; 0x59c <dio_vidConfigChannel>
 3b4:	41 e0       	ldi	r20, 0x01	; 1
 3b6:	69 e0       	ldi	r22, 0x09	; 9
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	0e 94 ce 02 	call	0x59c	; 0x59c <dio_vidConfigChannel>
 3be:	41 e0       	ldi	r20, 0x01	; 1
 3c0:	60 e0       	ldi	r22, 0x00	; 0
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	0e 94 ce 02 	call	0x59c	; 0x59c <dio_vidConfigChannel>
 3c8:	41 e0       	ldi	r20, 0x01	; 1
 3ca:	61 e0       	ldi	r22, 0x01	; 1
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	0e 94 ce 02 	call	0x59c	; 0x59c <dio_vidConfigChannel>
 3d2:	41 e0       	ldi	r20, 0x01	; 1
 3d4:	62 e0       	ldi	r22, 0x02	; 2
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	0e 94 ce 02 	call	0x59c	; 0x59c <dio_vidConfigChannel>
 3dc:	41 e0       	ldi	r20, 0x01	; 1
 3de:	64 e0       	ldi	r22, 0x04	; 4
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	0e 94 ce 02 	call	0x59c	; 0x59c <dio_vidConfigChannel>
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SendCommand>
 3ec:	82 e0       	ldi	r24, 0x02	; 2
 3ee:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SendCommand>
 3f2:	88 e2       	ldi	r24, 0x28	; 40
 3f4:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SendCommand>
 3f8:	86 e0       	ldi	r24, 0x06	; 6
 3fa:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SendCommand>
 3fe:	8f e0       	ldi	r24, 0x0F	; 15
 400:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SendCommand>
 404:	08 95       	ret

00000406 <LCD_GoToXY>:
 406:	81 11       	cpse	r24, r1
 408:	05 c0       	rjmp	.+10     	; 0x414 <LCD_GoToXY+0xe>
 40a:	80 e8       	ldi	r24, 0x80	; 128
 40c:	86 0f       	add	r24, r22
 40e:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SendCommand>
 412:	08 95       	ret
 414:	81 30       	cpi	r24, 0x01	; 1
 416:	29 f4       	brne	.+10     	; 0x422 <LCD_GoToXY+0x1c>
 418:	80 ec       	ldi	r24, 0xC0	; 192
 41a:	86 0f       	add	r24, r22
 41c:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SendCommand>
 420:	08 95       	ret
 422:	82 30       	cpi	r24, 0x02	; 2
 424:	29 f4       	brne	.+10     	; 0x430 <LCD_GoToXY+0x2a>
 426:	84 e9       	ldi	r24, 0x94	; 148
 428:	86 0f       	add	r24, r22
 42a:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SendCommand>
 42e:	08 95       	ret
 430:	83 30       	cpi	r24, 0x03	; 3
 432:	21 f4       	brne	.+8      	; 0x43c <LCD_GoToXY+0x36>
 434:	84 ed       	ldi	r24, 0xD4	; 212
 436:	86 0f       	add	r24, r22
 438:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SendCommand>
 43c:	08 95       	ret

0000043e <LCD_WriteString>:

}


void LCD_WriteString(char *str)
{
 43e:	0f 93       	push	r16
 440:	1f 93       	push	r17
 442:	cf 93       	push	r28
 444:	8c 01       	movw	r16, r24

	for (u8 index = 0; str[index] ; index++)
 446:	c0 e0       	ldi	r28, 0x00	; 0
 448:	03 c0       	rjmp	.+6      	; 0x450 <LCD_WriteString+0x12>
	{
		LCD_WriteData(str[index]);
 44a:	0e 94 86 01 	call	0x30c	; 0x30c <LCD_WriteData>


void LCD_WriteString(char *str)
{

	for (u8 index = 0; str[index] ; index++)
 44e:	cf 5f       	subi	r28, 0xFF	; 255
 450:	f8 01       	movw	r30, r16
 452:	ec 0f       	add	r30, r28
 454:	f1 1d       	adc	r31, r1
 456:	80 81       	ld	r24, Z
 458:	81 11       	cpse	r24, r1
 45a:	f7 cf       	rjmp	.-18     	; 0x44a <LCD_WriteString+0xc>
	{
		LCD_WriteData(str[index]);
		
	}
}
 45c:	cf 91       	pop	r28
 45e:	1f 91       	pop	r17
 460:	0f 91       	pop	r16
 462:	08 95       	ret

00000464 <led_viInit>:

#include "led.h"
#include "led_cfg.h"

void led_viInit(void)
{
 464:	cf 93       	push	r28
	u8 ledIndex=0;
	for(ledIndex=0 ; ledIndex < ledsCount ; ledIndex++)
 466:	c0 e0       	ldi	r28, 0x00	; 0
 468:	0e c0       	rjmp	.+28     	; 0x486 <led_viInit+0x22>
	{
		dio_vidConfigChannel(ledsConfigurations[ledIndex].portn,ledsConfigurations[ledIndex].ledchannel,OUTPUT);
 46a:	ec 2f       	mov	r30, r28
 46c:	f0 e0       	ldi	r31, 0x00	; 0
 46e:	ee 0f       	add	r30, r30
 470:	ff 1f       	adc	r31, r31
 472:	ee 0f       	add	r30, r30
 474:	ff 1f       	adc	r31, r31
 476:	ef 59       	subi	r30, 0x9F	; 159
 478:	ff 4f       	sbci	r31, 0xFF	; 255
 47a:	41 e0       	ldi	r20, 0x01	; 1
 47c:	62 81       	ldd	r22, Z+2	; 0x02
 47e:	81 81       	ldd	r24, Z+1	; 0x01
 480:	0e 94 ce 02 	call	0x59c	; 0x59c <dio_vidConfigChannel>
#include "led_cfg.h"

void led_viInit(void)
{
	u8 ledIndex=0;
	for(ledIndex=0 ; ledIndex < ledsCount ; ledIndex++)
 484:	cf 5f       	subi	r28, 0xFF	; 255
 486:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 48a:	c8 17       	cp	r28, r24
 48c:	70 f3       	brcs	.-36     	; 0x46a <led_viInit+0x6>
	{
		dio_vidConfigChannel(ledsConfigurations[ledIndex].portn,ledsConfigurations[ledIndex].ledchannel,OUTPUT);
	}
}
 48e:	cf 91       	pop	r28
 490:	08 95       	ret

00000492 <main>:
#include "util/delay.h"

#if 1
char data[5];
int main()
{
 492:	cf 93       	push	r28
 494:	df 93       	push	r29
 496:	00 d0       	rcall	.+0      	; 0x498 <main+0x6>
 498:	00 d0       	rcall	.+0      	; 0x49a <main+0x8>
 49a:	cd b7       	in	r28, 0x3d	; 61
 49c:	de b7       	in	r29, 0x3e	; 62
	u16 RH = 0, T = 0;
 49e:	1a 82       	std	Y+2, r1	; 0x02
 4a0:	19 82       	std	Y+1, r1	; 0x01
 4a2:	1c 82       	std	Y+4, r1	; 0x04
 4a4:	1b 82       	std	Y+3, r1	; 0x03
	LCD_Init();
 4a6:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <LCD_Init>
	led_viInit();
 4aa:	0e 94 32 02 	call	0x464	; 0x464 <led_viInit>
	while (1)
	{
		if (DHT_enuReadData(&RH, &T) == ERROR_READ)
 4ae:	be 01       	movw	r22, r28
 4b0:	6d 5f       	subi	r22, 0xFD	; 253
 4b2:	7f 4f       	sbci	r23, 0xFF	; 255
 4b4:	ce 01       	movw	r24, r28
 4b6:	01 96       	adiw	r24, 0x01	; 1
 4b8:	0e 94 a3 00 	call	0x146	; 0x146 <DHT_enuReadData>
 4bc:	81 11       	cpse	r24, r1
 4be:	05 c0       	rjmp	.+10     	; 0x4ca <main+0x38>
		{
			LCD_WriteString("ERROR ");
 4c0:	86 e7       	ldi	r24, 0x76	; 118
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	0e 94 1f 02 	call	0x43e	; 0x43e <LCD_WriteString>
 4c8:	36 c0       	rjmp	.+108    	; 0x536 <main+0xa4>
		}
		else
		{
#if 1

			LCD_GoToXY(0, 0); /* Enter column and row position */
 4ca:	60 e0       	ldi	r22, 0x00	; 0
 4cc:	80 e0       	ldi	r24, 0x00	; 0
 4ce:	0e 94 03 02 	call	0x406	; 0x406 <LCD_GoToXY>
			LCD_WriteString("Humidity =");
 4d2:	8d e7       	ldi	r24, 0x7D	; 125
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	0e 94 1f 02 	call	0x43e	; 0x43e <LCD_WriteString>
			LCD_GoToXY(1, 0);
 4da:	60 e0       	ldi	r22, 0x00	; 0
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	0e 94 03 02 	call	0x406	; 0x406 <LCD_GoToXY>
			LCD_WriteString("Temp = ");
 4e2:	88 e8       	ldi	r24, 0x88	; 136
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	0e 94 1f 02 	call	0x43e	; 0x43e <LCD_WriteString>
 4ea:	4a e0       	ldi	r20, 0x0A	; 10
 4ec:	68 e9       	ldi	r22, 0x98	; 152
 4ee:	70 e0       	ldi	r23, 0x00	; 0
 4f0:	89 81       	ldd	r24, Y+1	; 0x01
 4f2:	9a 81       	ldd	r25, Y+2	; 0x02
 4f4:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__itoa_ncheck>
			itoa(RH, data, 10);
			LCD_GoToXY(0, 11);
 4f8:	6b e0       	ldi	r22, 0x0B	; 11
 4fa:	80 e0       	ldi	r24, 0x00	; 0
 4fc:	0e 94 03 02 	call	0x406	; 0x406 <LCD_GoToXY>
			LCD_WriteString(data);
 500:	88 e9       	ldi	r24, 0x98	; 152
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	0e 94 1f 02 	call	0x43e	; 0x43e <LCD_WriteString>
			LCD_WriteString(".");
 508:	80 e9       	ldi	r24, 0x90	; 144
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	0e 94 1f 02 	call	0x43e	; 0x43e <LCD_WriteString>
 510:	4a e0       	ldi	r20, 0x0A	; 10
 512:	68 e9       	ldi	r22, 0x98	; 152
 514:	70 e0       	ldi	r23, 0x00	; 0
 516:	8b 81       	ldd	r24, Y+3	; 0x03
 518:	9c 81       	ldd	r25, Y+4	; 0x04
 51a:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__itoa_ncheck>

			itoa(T, data, 10);
			LCD_GoToXY(1, 6);
 51e:	66 e0       	ldi	r22, 0x06	; 6
 520:	81 e0       	ldi	r24, 0x01	; 1
 522:	0e 94 03 02 	call	0x406	; 0x406 <LCD_GoToXY>
			LCD_WriteString(data);
 526:	88 e9       	ldi	r24, 0x98	; 152
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	0e 94 1f 02 	call	0x43e	; 0x43e <LCD_WriteString>
			LCD_WriteString("C ");
 52e:	82 e9       	ldi	r24, 0x92	; 146
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	0e 94 1f 02 	call	0x43e	; 0x43e <LCD_WriteString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 536:	2f ef       	ldi	r18, 0xFF	; 255
 538:	83 ed       	ldi	r24, 0xD3	; 211
 53a:	90 e3       	ldi	r25, 0x30	; 48
 53c:	21 50       	subi	r18, 0x01	; 1
 53e:	80 40       	sbci	r24, 0x00	; 0
 540:	90 40       	sbci	r25, 0x00	; 0
 542:	e1 f7       	brne	.-8      	; 0x53c <main+0xaa>
 544:	00 c0       	rjmp	.+0      	; 0x546 <main+0xb4>
 546:	00 00       	nop
 548:	b2 cf       	rjmp	.-156    	; 0x4ae <main+0x1c>

0000054a <__vector_16>:
}

/* vector of ADC interrupt */
void __vector_16(void) __attribute__((signal, used));
void __vector_16(void)
{
 54a:	1f 92       	push	r1
 54c:	0f 92       	push	r0
 54e:	0f b6       	in	r0, 0x3f	; 63
 550:	0f 92       	push	r0
 552:	11 24       	eor	r1, r1
 554:	2f 93       	push	r18
 556:	3f 93       	push	r19
 558:	4f 93       	push	r20
 55a:	5f 93       	push	r21
 55c:	6f 93       	push	r22
 55e:	7f 93       	push	r23
 560:	8f 93       	push	r24
 562:	9f 93       	push	r25
 564:	af 93       	push	r26
 566:	bf 93       	push	r27
 568:	ef 93       	push	r30
 56a:	ff 93       	push	r31
	if (GP_ADC_Callback != NULL)
 56c:	e0 91 9d 00 	lds	r30, 0x009D	; 0x80009d <GP_ADC_Callback>
 570:	f0 91 9e 00 	lds	r31, 0x009E	; 0x80009e <GP_ADC_Callback+0x1>
 574:	30 97       	sbiw	r30, 0x00	; 0
 576:	09 f0       	breq	.+2      	; 0x57a <__vector_16+0x30>
	{
		GP_ADC_Callback();
 578:	09 95       	icall
	}
}
 57a:	ff 91       	pop	r31
 57c:	ef 91       	pop	r30
 57e:	bf 91       	pop	r27
 580:	af 91       	pop	r26
 582:	9f 91       	pop	r25
 584:	8f 91       	pop	r24
 586:	7f 91       	pop	r23
 588:	6f 91       	pop	r22
 58a:	5f 91       	pop	r21
 58c:	4f 91       	pop	r20
 58e:	3f 91       	pop	r19
 590:	2f 91       	pop	r18
 592:	0f 90       	pop	r0
 594:	0f be       	out	0x3f, r0	; 63
 596:	0f 90       	pop	r0
 598:	1f 90       	pop	r1
 59a:	18 95       	reti

0000059c <dio_vidConfigChannel>:
	case DIO_PORTC:
		FLIP_BIT(PORTC,channel);
		break;

	case DIO_PORTD:
		FLIP_BIT(PORTD,channel);
 59c:	81 30       	cpi	r24, 0x01	; 1
 59e:	01 f1       	breq	.+64     	; 0x5e0 <dio_vidConfigChannel+0x44>
 5a0:	30 f0       	brcs	.+12     	; 0x5ae <dio_vidConfigChannel+0x12>
 5a2:	82 30       	cpi	r24, 0x02	; 2
 5a4:	b1 f1       	breq	.+108    	; 0x612 <dio_vidConfigChannel+0x76>
 5a6:	83 30       	cpi	r24, 0x03	; 3
 5a8:	09 f4       	brne	.+2      	; 0x5ac <dio_vidConfigChannel+0x10>
 5aa:	4c c0       	rjmp	.+152    	; 0x644 <dio_vidConfigChannel+0xa8>
 5ac:	08 95       	ret
 5ae:	41 30       	cpi	r20, 0x01	; 1
 5b0:	59 f4       	brne	.+22     	; 0x5c8 <dio_vidConfigChannel+0x2c>
 5b2:	2a b3       	in	r18, 0x1a	; 26
 5b4:	81 e0       	ldi	r24, 0x01	; 1
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	02 c0       	rjmp	.+4      	; 0x5be <dio_vidConfigChannel+0x22>
 5ba:	88 0f       	add	r24, r24
 5bc:	99 1f       	adc	r25, r25
 5be:	6a 95       	dec	r22
 5c0:	e2 f7       	brpl	.-8      	; 0x5ba <dio_vidConfigChannel+0x1e>
 5c2:	82 2b       	or	r24, r18
 5c4:	8a bb       	out	0x1a, r24	; 26
 5c6:	08 95       	ret
 5c8:	2a b3       	in	r18, 0x1a	; 26
 5ca:	81 e0       	ldi	r24, 0x01	; 1
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <dio_vidConfigChannel+0x38>
 5d0:	88 0f       	add	r24, r24
 5d2:	99 1f       	adc	r25, r25
 5d4:	6a 95       	dec	r22
 5d6:	e2 f7       	brpl	.-8      	; 0x5d0 <dio_vidConfigChannel+0x34>
 5d8:	80 95       	com	r24
 5da:	82 23       	and	r24, r18
 5dc:	8a bb       	out	0x1a, r24	; 26
 5de:	08 95       	ret
 5e0:	41 30       	cpi	r20, 0x01	; 1
 5e2:	59 f4       	brne	.+22     	; 0x5fa <dio_vidConfigChannel+0x5e>
 5e4:	27 b3       	in	r18, 0x17	; 23
 5e6:	81 e0       	ldi	r24, 0x01	; 1
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	02 c0       	rjmp	.+4      	; 0x5f0 <dio_vidConfigChannel+0x54>
 5ec:	88 0f       	add	r24, r24
 5ee:	99 1f       	adc	r25, r25
 5f0:	6a 95       	dec	r22
 5f2:	e2 f7       	brpl	.-8      	; 0x5ec <dio_vidConfigChannel+0x50>
 5f4:	82 2b       	or	r24, r18
 5f6:	87 bb       	out	0x17, r24	; 23
 5f8:	08 95       	ret
 5fa:	27 b3       	in	r18, 0x17	; 23
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	02 c0       	rjmp	.+4      	; 0x606 <dio_vidConfigChannel+0x6a>
 602:	88 0f       	add	r24, r24
 604:	99 1f       	adc	r25, r25
 606:	6a 95       	dec	r22
 608:	e2 f7       	brpl	.-8      	; 0x602 <dio_vidConfigChannel+0x66>
 60a:	80 95       	com	r24
 60c:	82 23       	and	r24, r18
 60e:	87 bb       	out	0x17, r24	; 23
 610:	08 95       	ret
 612:	41 30       	cpi	r20, 0x01	; 1
 614:	59 f4       	brne	.+22     	; 0x62c <dio_vidConfigChannel+0x90>
 616:	24 b3       	in	r18, 0x14	; 20
 618:	81 e0       	ldi	r24, 0x01	; 1
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	02 c0       	rjmp	.+4      	; 0x622 <dio_vidConfigChannel+0x86>
 61e:	88 0f       	add	r24, r24
 620:	99 1f       	adc	r25, r25
 622:	6a 95       	dec	r22
 624:	e2 f7       	brpl	.-8      	; 0x61e <dio_vidConfigChannel+0x82>
 626:	82 2b       	or	r24, r18
 628:	84 bb       	out	0x14, r24	; 20
 62a:	08 95       	ret
 62c:	24 b3       	in	r18, 0x14	; 20
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	02 c0       	rjmp	.+4      	; 0x638 <dio_vidConfigChannel+0x9c>
 634:	88 0f       	add	r24, r24
 636:	99 1f       	adc	r25, r25
 638:	6a 95       	dec	r22
 63a:	e2 f7       	brpl	.-8      	; 0x634 <dio_vidConfigChannel+0x98>
 63c:	80 95       	com	r24
 63e:	82 23       	and	r24, r18
 640:	84 bb       	out	0x14, r24	; 20
 642:	08 95       	ret
 644:	41 30       	cpi	r20, 0x01	; 1
 646:	59 f4       	brne	.+22     	; 0x65e <dio_vidConfigChannel+0xc2>
 648:	21 b3       	in	r18, 0x11	; 17
 64a:	81 e0       	ldi	r24, 0x01	; 1
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	02 c0       	rjmp	.+4      	; 0x654 <dio_vidConfigChannel+0xb8>
 650:	88 0f       	add	r24, r24
 652:	99 1f       	adc	r25, r25
 654:	6a 95       	dec	r22
 656:	e2 f7       	brpl	.-8      	; 0x650 <dio_vidConfigChannel+0xb4>
 658:	82 2b       	or	r24, r18
 65a:	81 bb       	out	0x11, r24	; 17
 65c:	08 95       	ret
 65e:	21 b3       	in	r18, 0x11	; 17
 660:	81 e0       	ldi	r24, 0x01	; 1
 662:	90 e0       	ldi	r25, 0x00	; 0
 664:	02 c0       	rjmp	.+4      	; 0x66a <dio_vidConfigChannel+0xce>
 666:	88 0f       	add	r24, r24
 668:	99 1f       	adc	r25, r25
 66a:	6a 95       	dec	r22
 66c:	e2 f7       	brpl	.-8      	; 0x666 <dio_vidConfigChannel+0xca>
 66e:	80 95       	com	r24
 670:	82 23       	and	r24, r18
 672:	81 bb       	out	0x11, r24	; 17
 674:	08 95       	ret

00000676 <dio_vidWriteChannel>:
 676:	81 30       	cpi	r24, 0x01	; 1
 678:	01 f1       	breq	.+64     	; 0x6ba <dio_vidWriteChannel+0x44>
 67a:	30 f0       	brcs	.+12     	; 0x688 <dio_vidWriteChannel+0x12>
 67c:	82 30       	cpi	r24, 0x02	; 2
 67e:	b1 f1       	breq	.+108    	; 0x6ec <dio_vidWriteChannel+0x76>
 680:	83 30       	cpi	r24, 0x03	; 3
 682:	09 f4       	brne	.+2      	; 0x686 <dio_vidWriteChannel+0x10>
 684:	4c c0       	rjmp	.+152    	; 0x71e <dio_vidWriteChannel+0xa8>
 686:	08 95       	ret
 688:	41 11       	cpse	r20, r1
 68a:	0c c0       	rjmp	.+24     	; 0x6a4 <dio_vidWriteChannel+0x2e>
 68c:	2b b3       	in	r18, 0x1b	; 27
 68e:	81 e0       	ldi	r24, 0x01	; 1
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	02 c0       	rjmp	.+4      	; 0x698 <dio_vidWriteChannel+0x22>
 694:	88 0f       	add	r24, r24
 696:	99 1f       	adc	r25, r25
 698:	6a 95       	dec	r22
 69a:	e2 f7       	brpl	.-8      	; 0x694 <dio_vidWriteChannel+0x1e>
 69c:	80 95       	com	r24
 69e:	82 23       	and	r24, r18
 6a0:	8b bb       	out	0x1b, r24	; 27
 6a2:	08 95       	ret
 6a4:	2b b3       	in	r18, 0x1b	; 27
 6a6:	81 e0       	ldi	r24, 0x01	; 1
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	02 c0       	rjmp	.+4      	; 0x6b0 <dio_vidWriteChannel+0x3a>
 6ac:	88 0f       	add	r24, r24
 6ae:	99 1f       	adc	r25, r25
 6b0:	6a 95       	dec	r22
 6b2:	e2 f7       	brpl	.-8      	; 0x6ac <dio_vidWriteChannel+0x36>
 6b4:	82 2b       	or	r24, r18
 6b6:	8b bb       	out	0x1b, r24	; 27
 6b8:	08 95       	ret
 6ba:	41 11       	cpse	r20, r1
 6bc:	0c c0       	rjmp	.+24     	; 0x6d6 <dio_vidWriteChannel+0x60>
 6be:	28 b3       	in	r18, 0x18	; 24
 6c0:	81 e0       	ldi	r24, 0x01	; 1
 6c2:	90 e0       	ldi	r25, 0x00	; 0
 6c4:	02 c0       	rjmp	.+4      	; 0x6ca <dio_vidWriteChannel+0x54>
 6c6:	88 0f       	add	r24, r24
 6c8:	99 1f       	adc	r25, r25
 6ca:	6a 95       	dec	r22
 6cc:	e2 f7       	brpl	.-8      	; 0x6c6 <dio_vidWriteChannel+0x50>
 6ce:	80 95       	com	r24
 6d0:	82 23       	and	r24, r18
 6d2:	88 bb       	out	0x18, r24	; 24
 6d4:	08 95       	ret
 6d6:	28 b3       	in	r18, 0x18	; 24
 6d8:	81 e0       	ldi	r24, 0x01	; 1
 6da:	90 e0       	ldi	r25, 0x00	; 0
 6dc:	02 c0       	rjmp	.+4      	; 0x6e2 <dio_vidWriteChannel+0x6c>
 6de:	88 0f       	add	r24, r24
 6e0:	99 1f       	adc	r25, r25
 6e2:	6a 95       	dec	r22
 6e4:	e2 f7       	brpl	.-8      	; 0x6de <dio_vidWriteChannel+0x68>
 6e6:	82 2b       	or	r24, r18
 6e8:	88 bb       	out	0x18, r24	; 24
 6ea:	08 95       	ret
 6ec:	41 11       	cpse	r20, r1
 6ee:	0c c0       	rjmp	.+24     	; 0x708 <dio_vidWriteChannel+0x92>
 6f0:	25 b3       	in	r18, 0x15	; 21
 6f2:	81 e0       	ldi	r24, 0x01	; 1
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	02 c0       	rjmp	.+4      	; 0x6fc <dio_vidWriteChannel+0x86>
 6f8:	88 0f       	add	r24, r24
 6fa:	99 1f       	adc	r25, r25
 6fc:	6a 95       	dec	r22
 6fe:	e2 f7       	brpl	.-8      	; 0x6f8 <dio_vidWriteChannel+0x82>
 700:	80 95       	com	r24
 702:	82 23       	and	r24, r18
 704:	85 bb       	out	0x15, r24	; 21
 706:	08 95       	ret
 708:	25 b3       	in	r18, 0x15	; 21
 70a:	81 e0       	ldi	r24, 0x01	; 1
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	02 c0       	rjmp	.+4      	; 0x714 <dio_vidWriteChannel+0x9e>
 710:	88 0f       	add	r24, r24
 712:	99 1f       	adc	r25, r25
 714:	6a 95       	dec	r22
 716:	e2 f7       	brpl	.-8      	; 0x710 <dio_vidWriteChannel+0x9a>
 718:	82 2b       	or	r24, r18
 71a:	85 bb       	out	0x15, r24	; 21
 71c:	08 95       	ret
 71e:	41 11       	cpse	r20, r1
 720:	0c c0       	rjmp	.+24     	; 0x73a <dio_vidWriteChannel+0xc4>
 722:	22 b3       	in	r18, 0x12	; 18
 724:	81 e0       	ldi	r24, 0x01	; 1
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	02 c0       	rjmp	.+4      	; 0x72e <dio_vidWriteChannel+0xb8>
 72a:	88 0f       	add	r24, r24
 72c:	99 1f       	adc	r25, r25
 72e:	6a 95       	dec	r22
 730:	e2 f7       	brpl	.-8      	; 0x72a <dio_vidWriteChannel+0xb4>
 732:	80 95       	com	r24
 734:	82 23       	and	r24, r18
 736:	82 bb       	out	0x12, r24	; 18
 738:	08 95       	ret
 73a:	22 b3       	in	r18, 0x12	; 18
 73c:	81 e0       	ldi	r24, 0x01	; 1
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	02 c0       	rjmp	.+4      	; 0x746 <dio_vidWriteChannel+0xd0>
 742:	88 0f       	add	r24, r24
 744:	99 1f       	adc	r25, r25
 746:	6a 95       	dec	r22
 748:	e2 f7       	brpl	.-8      	; 0x742 <dio_vidWriteChannel+0xcc>
 74a:	82 2b       	or	r24, r18
 74c:	82 bb       	out	0x12, r24	; 18
 74e:	08 95       	ret

00000750 <dio_dioLevelReadChannel>:
* \Return value:   : loc_pinRead   -> IO channel level                           
*******************************************************************************/
dio_level_t dio_dioLevelReadChannel(dio_portId_t port, dio_channelId_t channel)
{
	dio_level_t loc_pinRead = STD_LOW;
	switch (port)
 750:	81 30       	cpi	r24, 0x01	; 1
 752:	79 f0       	breq	.+30     	; 0x772 <dio_dioLevelReadChannel+0x22>
 754:	28 f0       	brcs	.+10     	; 0x760 <dio_dioLevelReadChannel+0x10>
 756:	82 30       	cpi	r24, 0x02	; 2
 758:	a9 f0       	breq	.+42     	; 0x784 <dio_dioLevelReadChannel+0x34>
 75a:	83 30       	cpi	r24, 0x03	; 3
 75c:	e9 f0       	breq	.+58     	; 0x798 <dio_dioLevelReadChannel+0x48>
 75e:	25 c0       	rjmp	.+74     	; 0x7aa <dio_dioLevelReadChannel+0x5a>
	{
	 case DIO_PORTA:
		loc_pinRead = CHECK_BIT(PINA, channel);
 760:	89 b3       	in	r24, 0x19	; 25
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	02 c0       	rjmp	.+4      	; 0x76a <dio_dioLevelReadChannel+0x1a>
 766:	95 95       	asr	r25
 768:	87 95       	ror	r24
 76a:	6a 95       	dec	r22
 76c:	e2 f7       	brpl	.-8      	; 0x766 <dio_dioLevelReadChannel+0x16>
 76e:	81 70       	andi	r24, 0x01	; 1
		break;
 770:	08 95       	ret

	 case DIO_PORTB:
		loc_pinRead = CHECK_BIT(PINB, channel);
 772:	86 b3       	in	r24, 0x16	; 22
 774:	90 e0       	ldi	r25, 0x00	; 0
 776:	02 c0       	rjmp	.+4      	; 0x77c <dio_dioLevelReadChannel+0x2c>
 778:	95 95       	asr	r25
 77a:	87 95       	ror	r24
 77c:	6a 95       	dec	r22
 77e:	e2 f7       	brpl	.-8      	; 0x778 <dio_dioLevelReadChannel+0x28>
 780:	81 70       	andi	r24, 0x01	; 1
		break;
 782:	08 95       	ret

	 case DIO_PORTC:
		loc_pinRead = CHECK_BIT(PINC, channel);
 784:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <__bss_end+0x20d>
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	02 c0       	rjmp	.+4      	; 0x790 <dio_dioLevelReadChannel+0x40>
 78c:	95 95       	asr	r25
 78e:	87 95       	ror	r24
 790:	6a 95       	dec	r22
 792:	e2 f7       	brpl	.-8      	; 0x78c <dio_dioLevelReadChannel+0x3c>
 794:	81 70       	andi	r24, 0x01	; 1
		break;
 796:	08 95       	ret

	 case DIO_PORTD:
		loc_pinRead = CHECK_BIT(PIND, channel);
 798:	80 b3       	in	r24, 0x10	; 16
 79a:	90 e0       	ldi	r25, 0x00	; 0
 79c:	02 c0       	rjmp	.+4      	; 0x7a2 <dio_dioLevelReadChannel+0x52>
 79e:	95 95       	asr	r25
 7a0:	87 95       	ror	r24
 7a2:	6a 95       	dec	r22
 7a4:	e2 f7       	brpl	.-8      	; 0x79e <dio_dioLevelReadChannel+0x4e>
 7a6:	81 70       	andi	r24, 0x01	; 1
		break;
 7a8:	08 95       	ret
					 channel  -> MC channel ID
* \Return value:   : loc_pinRead   -> IO channel level                           
*******************************************************************************/
dio_level_t dio_dioLevelReadChannel(dio_portId_t port, dio_channelId_t channel)
{
	dio_level_t loc_pinRead = STD_LOW;
 7aa:	80 e0       	ldi	r24, 0x00	; 0
	 case DIO_PORTD:
		loc_pinRead = CHECK_BIT(PIND, channel);
		break;
    }
	return loc_pinRead;
}
 7ac:	08 95       	ret

000007ae <__vector_1>:
void __vector_1(void) __attribute__((signal, used));
void __vector_2(void) __attribute__((signal, used));
void __vector_3(void) __attribute__((signal, used));

void __vector_1(void)
{
 7ae:	1f 92       	push	r1
 7b0:	0f 92       	push	r0
 7b2:	0f b6       	in	r0, 0x3f	; 63
 7b4:	0f 92       	push	r0
 7b6:	11 24       	eor	r1, r1
 7b8:	2f 93       	push	r18
 7ba:	3f 93       	push	r19
 7bc:	4f 93       	push	r20
 7be:	5f 93       	push	r21
 7c0:	6f 93       	push	r22
 7c2:	7f 93       	push	r23
 7c4:	8f 93       	push	r24
 7c6:	9f 93       	push	r25
 7c8:	af 93       	push	r26
 7ca:	bf 93       	push	r27
 7cc:	ef 93       	push	r30
 7ce:	ff 93       	push	r31
	EXTI0_callback();
 7d0:	e0 91 a3 00 	lds	r30, 0x00A3	; 0x8000a3 <EXTI0_callback>
 7d4:	f0 91 a4 00 	lds	r31, 0x00A4	; 0x8000a4 <EXTI0_callback+0x1>
 7d8:	09 95       	icall
}
 7da:	ff 91       	pop	r31
 7dc:	ef 91       	pop	r30
 7de:	bf 91       	pop	r27
 7e0:	af 91       	pop	r26
 7e2:	9f 91       	pop	r25
 7e4:	8f 91       	pop	r24
 7e6:	7f 91       	pop	r23
 7e8:	6f 91       	pop	r22
 7ea:	5f 91       	pop	r21
 7ec:	4f 91       	pop	r20
 7ee:	3f 91       	pop	r19
 7f0:	2f 91       	pop	r18
 7f2:	0f 90       	pop	r0
 7f4:	0f be       	out	0x3f, r0	; 63
 7f6:	0f 90       	pop	r0
 7f8:	1f 90       	pop	r1
 7fa:	18 95       	reti

000007fc <__vector_2>:

void __vector_2(void)
{
 7fc:	1f 92       	push	r1
 7fe:	0f 92       	push	r0
 800:	0f b6       	in	r0, 0x3f	; 63
 802:	0f 92       	push	r0
 804:	11 24       	eor	r1, r1
 806:	2f 93       	push	r18
 808:	3f 93       	push	r19
 80a:	4f 93       	push	r20
 80c:	5f 93       	push	r21
 80e:	6f 93       	push	r22
 810:	7f 93       	push	r23
 812:	8f 93       	push	r24
 814:	9f 93       	push	r25
 816:	af 93       	push	r26
 818:	bf 93       	push	r27
 81a:	ef 93       	push	r30
 81c:	ff 93       	push	r31
	EXTI1_callback();
 81e:	e0 91 9f 00 	lds	r30, 0x009F	; 0x80009f <EXTI1_callback>
 822:	f0 91 a0 00 	lds	r31, 0x00A0	; 0x8000a0 <EXTI1_callback+0x1>
 826:	09 95       	icall
}
 828:	ff 91       	pop	r31
 82a:	ef 91       	pop	r30
 82c:	bf 91       	pop	r27
 82e:	af 91       	pop	r26
 830:	9f 91       	pop	r25
 832:	8f 91       	pop	r24
 834:	7f 91       	pop	r23
 836:	6f 91       	pop	r22
 838:	5f 91       	pop	r21
 83a:	4f 91       	pop	r20
 83c:	3f 91       	pop	r19
 83e:	2f 91       	pop	r18
 840:	0f 90       	pop	r0
 842:	0f be       	out	0x3f, r0	; 63
 844:	0f 90       	pop	r0
 846:	1f 90       	pop	r1
 848:	18 95       	reti

0000084a <__vector_3>:

void __vector_3(void)
{
 84a:	1f 92       	push	r1
 84c:	0f 92       	push	r0
 84e:	0f b6       	in	r0, 0x3f	; 63
 850:	0f 92       	push	r0
 852:	11 24       	eor	r1, r1
 854:	2f 93       	push	r18
 856:	3f 93       	push	r19
 858:	4f 93       	push	r20
 85a:	5f 93       	push	r21
 85c:	6f 93       	push	r22
 85e:	7f 93       	push	r23
 860:	8f 93       	push	r24
 862:	9f 93       	push	r25
 864:	af 93       	push	r26
 866:	bf 93       	push	r27
 868:	ef 93       	push	r30
 86a:	ff 93       	push	r31
	EXTI2_callback();
 86c:	e0 91 a1 00 	lds	r30, 0x00A1	; 0x8000a1 <EXTI2_callback>
 870:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <EXTI2_callback+0x1>
 874:	09 95       	icall
 876:	ff 91       	pop	r31
 878:	ef 91       	pop	r30
 87a:	bf 91       	pop	r27
 87c:	af 91       	pop	r26
 87e:	9f 91       	pop	r25
 880:	8f 91       	pop	r24
 882:	7f 91       	pop	r23
 884:	6f 91       	pop	r22
 886:	5f 91       	pop	r21
 888:	4f 91       	pop	r20
 88a:	3f 91       	pop	r19
 88c:	2f 91       	pop	r18
 88e:	0f 90       	pop	r0
 890:	0f be       	out	0x3f, r0	; 63
 892:	0f 90       	pop	r0
 894:	1f 90       	pop	r1
 896:	18 95       	reti

00000898 <__vector_12>:


/* SPI Transmission/reception complete ISR */
void __vector_12 (void) __attribute__((signal));
void __vector_12 (void)
{
 898:	1f 92       	push	r1
 89a:	0f 92       	push	r0
 89c:	0f b6       	in	r0, 0x3f	; 63
 89e:	0f 92       	push	r0
 8a0:	11 24       	eor	r1, r1
 8a2:	2f 93       	push	r18
 8a4:	3f 93       	push	r19
 8a6:	4f 93       	push	r20
 8a8:	5f 93       	push	r21
 8aa:	6f 93       	push	r22
 8ac:	7f 93       	push	r23
 8ae:	8f 93       	push	r24
 8b0:	9f 93       	push	r25
 8b2:	af 93       	push	r26
 8b4:	bf 93       	push	r27
 8b6:	ef 93       	push	r30
 8b8:	ff 93       	push	r31
	

	/* call back function */
	GP_SPI_CallBack();
 8ba:	e0 91 96 00 	lds	r30, 0x0096	; 0x800096 <__data_end>
 8be:	f0 91 97 00 	lds	r31, 0x0097	; 0x800097 <__data_end+0x1>
 8c2:	09 95       	icall
}
 8c4:	ff 91       	pop	r31
 8c6:	ef 91       	pop	r30
 8c8:	bf 91       	pop	r27
 8ca:	af 91       	pop	r26
 8cc:	9f 91       	pop	r25
 8ce:	8f 91       	pop	r24
 8d0:	7f 91       	pop	r23
 8d2:	6f 91       	pop	r22
 8d4:	5f 91       	pop	r21
 8d6:	4f 91       	pop	r20
 8d8:	3f 91       	pop	r19
 8da:	2f 91       	pop	r18
 8dc:	0f 90       	pop	r0
 8de:	0f be       	out	0x3f, r0	; 63
 8e0:	0f 90       	pop	r0
 8e2:	1f 90       	pop	r1
 8e4:	18 95       	reti

000008e6 <__vector_10>:

    /* Set mode of OC0 pin mode
       COM01 bit5   COM00 bit4  in RCCR0
     */
    TCCR0 &= ~(0x30);
    TCCR0 |= ((MODE << 4) & 0x30);
 8e6:	1f 92       	push	r1
 8e8:	0f 92       	push	r0
 8ea:	0f b6       	in	r0, 0x3f	; 63
 8ec:	0f 92       	push	r0
 8ee:	11 24       	eor	r1, r1
 8f0:	2f 93       	push	r18
 8f2:	3f 93       	push	r19
 8f4:	4f 93       	push	r20
 8f6:	5f 93       	push	r21
 8f8:	6f 93       	push	r22
 8fa:	7f 93       	push	r23
 8fc:	8f 93       	push	r24
 8fe:	9f 93       	push	r25
 900:	af 93       	push	r26
 902:	bf 93       	push	r27
 904:	ef 93       	push	r30
 906:	ff 93       	push	r31
 908:	e0 91 a5 00 	lds	r30, 0x00A5	; 0x8000a5 <T0_OC_CallBackFun>
 90c:	f0 91 a6 00 	lds	r31, 0x00A6	; 0x8000a6 <T0_OC_CallBackFun+0x1>
 910:	30 97       	sbiw	r30, 0x00	; 0
 912:	09 f0       	breq	.+2      	; 0x916 <__vector_10+0x30>
 914:	09 95       	icall
 916:	ff 91       	pop	r31
 918:	ef 91       	pop	r30
 91a:	bf 91       	pop	r27
 91c:	af 91       	pop	r26
 91e:	9f 91       	pop	r25
 920:	8f 91       	pop	r24
 922:	7f 91       	pop	r23
 924:	6f 91       	pop	r22
 926:	5f 91       	pop	r21
 928:	4f 91       	pop	r20
 92a:	3f 91       	pop	r19
 92c:	2f 91       	pop	r18
 92e:	0f 90       	pop	r0
 930:	0f be       	out	0x3f, r0	; 63
 932:	0f 90       	pop	r0
 934:	1f 90       	pop	r1
 936:	18 95       	reti

00000938 <__vector_11>:
}
void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
 938:	1f 92       	push	r1
 93a:	0f 92       	push	r0
 93c:	0f b6       	in	r0, 0x3f	; 63
 93e:	0f 92       	push	r0
 940:	11 24       	eor	r1, r1
 942:	2f 93       	push	r18
 944:	3f 93       	push	r19
 946:	4f 93       	push	r20
 948:	5f 93       	push	r21
 94a:	6f 93       	push	r22
 94c:	7f 93       	push	r23
 94e:	8f 93       	push	r24
 950:	9f 93       	push	r25
 952:	af 93       	push	r26
 954:	bf 93       	push	r27
 956:	ef 93       	push	r30
 958:	ff 93       	push	r31
    if (T0_OVF_CallBackFun != NULL)
 95a:	e0 91 a7 00 	lds	r30, 0x00A7	; 0x8000a7 <T0_OVF_CallBackFun>
 95e:	f0 91 a8 00 	lds	r31, 0x00A8	; 0x8000a8 <T0_OVF_CallBackFun+0x1>
 962:	30 97       	sbiw	r30, 0x00	; 0
 964:	09 f0       	breq	.+2      	; 0x968 <__vector_11+0x30>
    {
        T0_OVF_CallBackFun();
 966:	09 95       	icall
    }
}
 968:	ff 91       	pop	r31
 96a:	ef 91       	pop	r30
 96c:	bf 91       	pop	r27
 96e:	af 91       	pop	r26
 970:	9f 91       	pop	r25
 972:	8f 91       	pop	r24
 974:	7f 91       	pop	r23
 976:	6f 91       	pop	r22
 978:	5f 91       	pop	r21
 97a:	4f 91       	pop	r20
 97c:	3f 91       	pop	r19
 97e:	2f 91       	pop	r18
 980:	0f 90       	pop	r0
 982:	0f be       	out	0x3f, r0	; 63
 984:	0f 90       	pop	r0
 986:	1f 90       	pop	r1
 988:	18 95       	reti

0000098a <__vector_9>:
    T1_IC_CallBackFun = copyofFun;
}

void __vector_9(void) __attribute__((signal));
void __vector_9(void)
{
 98a:	1f 92       	push	r1
 98c:	0f 92       	push	r0
 98e:	0f b6       	in	r0, 0x3f	; 63
 990:	0f 92       	push	r0
 992:	11 24       	eor	r1, r1
 994:	2f 93       	push	r18
 996:	3f 93       	push	r19
 998:	4f 93       	push	r20
 99a:	5f 93       	push	r21
 99c:	6f 93       	push	r22
 99e:	7f 93       	push	r23
 9a0:	8f 93       	push	r24
 9a2:	9f 93       	push	r25
 9a4:	af 93       	push	r26
 9a6:	bf 93       	push	r27
 9a8:	ef 93       	push	r30
 9aa:	ff 93       	push	r31
    if (T1_OVF_CallBackFun != NULL)
 9ac:	e0 91 ab 00 	lds	r30, 0x00AB	; 0x8000ab <T1_OVF_CallBackFun>
 9b0:	f0 91 ac 00 	lds	r31, 0x00AC	; 0x8000ac <T1_OVF_CallBackFun+0x1>
 9b4:	30 97       	sbiw	r30, 0x00	; 0
 9b6:	09 f0       	breq	.+2      	; 0x9ba <__vector_9+0x30>
    {
        T1_OVF_CallBackFun();
 9b8:	09 95       	icall
    }
}
 9ba:	ff 91       	pop	r31
 9bc:	ef 91       	pop	r30
 9be:	bf 91       	pop	r27
 9c0:	af 91       	pop	r26
 9c2:	9f 91       	pop	r25
 9c4:	8f 91       	pop	r24
 9c6:	7f 91       	pop	r23
 9c8:	6f 91       	pop	r22
 9ca:	5f 91       	pop	r21
 9cc:	4f 91       	pop	r20
 9ce:	3f 91       	pop	r19
 9d0:	2f 91       	pop	r18
 9d2:	0f 90       	pop	r0
 9d4:	0f be       	out	0x3f, r0	; 63
 9d6:	0f 90       	pop	r0
 9d8:	1f 90       	pop	r1
 9da:	18 95       	reti

000009dc <__vector_8>:

void __vector_8(void) __attribute__((signal));
void __vector_8(void)
{
 9dc:	1f 92       	push	r1
 9de:	0f 92       	push	r0
 9e0:	0f b6       	in	r0, 0x3f	; 63
 9e2:	0f 92       	push	r0
 9e4:	11 24       	eor	r1, r1
 9e6:	2f 93       	push	r18
 9e8:	3f 93       	push	r19
 9ea:	4f 93       	push	r20
 9ec:	5f 93       	push	r21
 9ee:	6f 93       	push	r22
 9f0:	7f 93       	push	r23
 9f2:	8f 93       	push	r24
 9f4:	9f 93       	push	r25
 9f6:	af 93       	push	r26
 9f8:	bf 93       	push	r27
 9fa:	ef 93       	push	r30
 9fc:	ff 93       	push	r31
    if (T1_OCB_CallBackFun != NULL)
 9fe:	e0 91 a9 00 	lds	r30, 0x00A9	; 0x8000a9 <T1_OCB_CallBackFun>
 a02:	f0 91 aa 00 	lds	r31, 0x00AA	; 0x8000aa <T1_OCB_CallBackFun+0x1>
 a06:	30 97       	sbiw	r30, 0x00	; 0
 a08:	09 f0       	breq	.+2      	; 0xa0c <__vector_8+0x30>
    {
        T1_OCB_CallBackFun();
 a0a:	09 95       	icall
    }
}
 a0c:	ff 91       	pop	r31
 a0e:	ef 91       	pop	r30
 a10:	bf 91       	pop	r27
 a12:	af 91       	pop	r26
 a14:	9f 91       	pop	r25
 a16:	8f 91       	pop	r24
 a18:	7f 91       	pop	r23
 a1a:	6f 91       	pop	r22
 a1c:	5f 91       	pop	r21
 a1e:	4f 91       	pop	r20
 a20:	3f 91       	pop	r19
 a22:	2f 91       	pop	r18
 a24:	0f 90       	pop	r0
 a26:	0f be       	out	0x3f, r0	; 63
 a28:	0f 90       	pop	r0
 a2a:	1f 90       	pop	r1
 a2c:	18 95       	reti

00000a2e <__vector_7>:

void __vector_7(void) __attribute__((signal));
void __vector_7(void)
{
 a2e:	1f 92       	push	r1
 a30:	0f 92       	push	r0
 a32:	0f b6       	in	r0, 0x3f	; 63
 a34:	0f 92       	push	r0
 a36:	11 24       	eor	r1, r1
 a38:	2f 93       	push	r18
 a3a:	3f 93       	push	r19
 a3c:	4f 93       	push	r20
 a3e:	5f 93       	push	r21
 a40:	6f 93       	push	r22
 a42:	7f 93       	push	r23
 a44:	8f 93       	push	r24
 a46:	9f 93       	push	r25
 a48:	af 93       	push	r26
 a4a:	bf 93       	push	r27
 a4c:	ef 93       	push	r30
 a4e:	ff 93       	push	r31
    if (T1_OCA_CallBackFun != NULL)
 a50:	e0 91 ad 00 	lds	r30, 0x00AD	; 0x8000ad <T1_OCA_CallBackFun>
 a54:	f0 91 ae 00 	lds	r31, 0x00AE	; 0x8000ae <T1_OCA_CallBackFun+0x1>
 a58:	30 97       	sbiw	r30, 0x00	; 0
 a5a:	09 f0       	breq	.+2      	; 0xa5e <__vector_7+0x30>
    {
        T1_OCA_CallBackFun();
 a5c:	09 95       	icall
    }
}
 a5e:	ff 91       	pop	r31
 a60:	ef 91       	pop	r30
 a62:	bf 91       	pop	r27
 a64:	af 91       	pop	r26
 a66:	9f 91       	pop	r25
 a68:	8f 91       	pop	r24
 a6a:	7f 91       	pop	r23
 a6c:	6f 91       	pop	r22
 a6e:	5f 91       	pop	r21
 a70:	4f 91       	pop	r20
 a72:	3f 91       	pop	r19
 a74:	2f 91       	pop	r18
 a76:	0f 90       	pop	r0
 a78:	0f be       	out	0x3f, r0	; 63
 a7a:	0f 90       	pop	r0
 a7c:	1f 90       	pop	r1
 a7e:	18 95       	reti

00000a80 <__vector_4>:
{
    T2_OC_CallBackFun = copyofCB;
}
void __vector_4(void) __attribute__((signal));
void __vector_4(void)
{
 a80:	1f 92       	push	r1
 a82:	0f 92       	push	r0
 a84:	0f b6       	in	r0, 0x3f	; 63
 a86:	0f 92       	push	r0
 a88:	11 24       	eor	r1, r1
 a8a:	2f 93       	push	r18
 a8c:	3f 93       	push	r19
 a8e:	4f 93       	push	r20
 a90:	5f 93       	push	r21
 a92:	6f 93       	push	r22
 a94:	7f 93       	push	r23
 a96:	8f 93       	push	r24
 a98:	9f 93       	push	r25
 a9a:	af 93       	push	r26
 a9c:	bf 93       	push	r27
 a9e:	ef 93       	push	r30
 aa0:	ff 93       	push	r31
    if (T2_OC_CallBackFun != NULL)
 aa2:	e0 91 b3 00 	lds	r30, 0x00B3	; 0x8000b3 <T2_OC_CallBackFun>
 aa6:	f0 91 b4 00 	lds	r31, 0x00B4	; 0x8000b4 <T2_OC_CallBackFun+0x1>
 aaa:	30 97       	sbiw	r30, 0x00	; 0
 aac:	09 f0       	breq	.+2      	; 0xab0 <__vector_4+0x30>
    {
        T2_OC_CallBackFun();
 aae:	09 95       	icall
    }
}
 ab0:	ff 91       	pop	r31
 ab2:	ef 91       	pop	r30
 ab4:	bf 91       	pop	r27
 ab6:	af 91       	pop	r26
 ab8:	9f 91       	pop	r25
 aba:	8f 91       	pop	r24
 abc:	7f 91       	pop	r23
 abe:	6f 91       	pop	r22
 ac0:	5f 91       	pop	r21
 ac2:	4f 91       	pop	r20
 ac4:	3f 91       	pop	r19
 ac6:	2f 91       	pop	r18
 ac8:	0f 90       	pop	r0
 aca:	0f be       	out	0x3f, r0	; 63
 acc:	0f 90       	pop	r0
 ace:	1f 90       	pop	r1
 ad0:	18 95       	reti

00000ad2 <__vector_5>:

void __vector_5(void) __attribute__((signal));
void __vector_5(void)
{
 ad2:	1f 92       	push	r1
 ad4:	0f 92       	push	r0
 ad6:	0f b6       	in	r0, 0x3f	; 63
 ad8:	0f 92       	push	r0
 ada:	11 24       	eor	r1, r1
 adc:	2f 93       	push	r18
 ade:	3f 93       	push	r19
 ae0:	4f 93       	push	r20
 ae2:	5f 93       	push	r21
 ae4:	6f 93       	push	r22
 ae6:	7f 93       	push	r23
 ae8:	8f 93       	push	r24
 aea:	9f 93       	push	r25
 aec:	af 93       	push	r26
 aee:	bf 93       	push	r27
 af0:	ef 93       	push	r30
 af2:	ff 93       	push	r31
    if (T2_OVF_CallBackFun != NULL)
 af4:	e0 91 b1 00 	lds	r30, 0x00B1	; 0x8000b1 <T2_OVF_CallBackFun>
 af8:	f0 91 b2 00 	lds	r31, 0x00B2	; 0x8000b2 <T2_OVF_CallBackFun+0x1>
 afc:	30 97       	sbiw	r30, 0x00	; 0
 afe:	09 f0       	breq	.+2      	; 0xb02 <__vector_5+0x30>
    {
        T2_OVF_CallBackFun();
 b00:	09 95       	icall
    }
}
 b02:	ff 91       	pop	r31
 b04:	ef 91       	pop	r30
 b06:	bf 91       	pop	r27
 b08:	af 91       	pop	r26
 b0a:	9f 91       	pop	r25
 b0c:	8f 91       	pop	r24
 b0e:	7f 91       	pop	r23
 b10:	6f 91       	pop	r22
 b12:	5f 91       	pop	r21
 b14:	4f 91       	pop	r20
 b16:	3f 91       	pop	r19
 b18:	2f 91       	pop	r18
 b1a:	0f 90       	pop	r0
 b1c:	0f be       	out	0x3f, r0	; 63
 b1e:	0f 90       	pop	r0
 b20:	1f 90       	pop	r1
 b22:	18 95       	reti

00000b24 <__vector_13>:
14	USART Data Register Empty	USART_UDRE_vect
15	USART Tx Complete			USART_TX_vect */

void __vector_13(void) __attribute__((signal));
void __vector_13(void)
{
 b24:	1f 92       	push	r1
 b26:	0f 92       	push	r0
 b28:	0f b6       	in	r0, 0x3f	; 63
 b2a:	0f 92       	push	r0
 b2c:	11 24       	eor	r1, r1
 b2e:	2f 93       	push	r18
 b30:	3f 93       	push	r19
 b32:	4f 93       	push	r20
 b34:	5f 93       	push	r21
 b36:	6f 93       	push	r22
 b38:	7f 93       	push	r23
 b3a:	8f 93       	push	r24
 b3c:	9f 93       	push	r25
 b3e:	af 93       	push	r26
 b40:	bf 93       	push	r27
 b42:	ef 93       	push	r30
 b44:	ff 93       	push	r31
    if (UART_RXC_CallBack != NULL)
 b46:	e0 91 83 01 	lds	r30, 0x0183	; 0x800183 <UART_RXC_CallBack>
 b4a:	f0 91 84 01 	lds	r31, 0x0184	; 0x800184 <UART_RXC_CallBack+0x1>
 b4e:	30 97       	sbiw	r30, 0x00	; 0
 b50:	09 f0       	breq	.+2      	; 0xb54 <__vector_13+0x30>
    {
        UART_RXC_CallBack();
 b52:	09 95       	icall
    }
}
 b54:	ff 91       	pop	r31
 b56:	ef 91       	pop	r30
 b58:	bf 91       	pop	r27
 b5a:	af 91       	pop	r26
 b5c:	9f 91       	pop	r25
 b5e:	8f 91       	pop	r24
 b60:	7f 91       	pop	r23
 b62:	6f 91       	pop	r22
 b64:	5f 91       	pop	r21
 b66:	4f 91       	pop	r20
 b68:	3f 91       	pop	r19
 b6a:	2f 91       	pop	r18
 b6c:	0f 90       	pop	r0
 b6e:	0f be       	out	0x3f, r0	; 63
 b70:	0f 90       	pop	r0
 b72:	1f 90       	pop	r1
 b74:	18 95       	reti

00000b76 <__vector_14>:

void __vector_14(void) __attribute__((signal));
void __vector_14(void)
{
 b76:	1f 92       	push	r1
 b78:	0f 92       	push	r0
 b7a:	0f b6       	in	r0, 0x3f	; 63
 b7c:	0f 92       	push	r0
 b7e:	11 24       	eor	r1, r1
 b80:	2f 93       	push	r18
 b82:	3f 93       	push	r19
 b84:	4f 93       	push	r20
 b86:	5f 93       	push	r21
 b88:	6f 93       	push	r22
 b8a:	7f 93       	push	r23
 b8c:	8f 93       	push	r24
 b8e:	9f 93       	push	r25
 b90:	af 93       	push	r26
 b92:	bf 93       	push	r27
 b94:	ef 93       	push	r30
 b96:	ff 93       	push	r31
    if (UART_UDRE_CallBack != NULL)
 b98:	e0 91 81 01 	lds	r30, 0x0181	; 0x800181 <UART_UDRE_CallBack>
 b9c:	f0 91 82 01 	lds	r31, 0x0182	; 0x800182 <UART_UDRE_CallBack+0x1>
 ba0:	30 97       	sbiw	r30, 0x00	; 0
 ba2:	09 f0       	breq	.+2      	; 0xba6 <__vector_14+0x30>
    {
        UART_UDRE_CallBack();
 ba4:	09 95       	icall
    }
}
 ba6:	ff 91       	pop	r31
 ba8:	ef 91       	pop	r30
 baa:	bf 91       	pop	r27
 bac:	af 91       	pop	r26
 bae:	9f 91       	pop	r25
 bb0:	8f 91       	pop	r24
 bb2:	7f 91       	pop	r23
 bb4:	6f 91       	pop	r22
 bb6:	5f 91       	pop	r21
 bb8:	4f 91       	pop	r20
 bba:	3f 91       	pop	r19
 bbc:	2f 91       	pop	r18
 bbe:	0f 90       	pop	r0
 bc0:	0f be       	out	0x3f, r0	; 63
 bc2:	0f 90       	pop	r0
 bc4:	1f 90       	pop	r1
 bc6:	18 95       	reti

00000bc8 <__vector_15>:

void __vector_15(void) __attribute__((signal));
void __vector_15(void)
{
 bc8:	1f 92       	push	r1
 bca:	0f 92       	push	r0
 bcc:	0f b6       	in	r0, 0x3f	; 63
 bce:	0f 92       	push	r0
 bd0:	11 24       	eor	r1, r1
 bd2:	2f 93       	push	r18
 bd4:	3f 93       	push	r19
 bd6:	4f 93       	push	r20
 bd8:	5f 93       	push	r21
 bda:	6f 93       	push	r22
 bdc:	7f 93       	push	r23
 bde:	8f 93       	push	r24
 be0:	9f 93       	push	r25
 be2:	af 93       	push	r26
 be4:	bf 93       	push	r27
 be6:	ef 93       	push	r30
 be8:	ff 93       	push	r31
    if (UART_TXC_CallBack != NULL)
 bea:	e0 91 b5 00 	lds	r30, 0x00B5	; 0x8000b5 <UART_TXC_CallBack>
 bee:	f0 91 b6 00 	lds	r31, 0x00B6	; 0x8000b6 <UART_TXC_CallBack+0x1>
 bf2:	30 97       	sbiw	r30, 0x00	; 0
 bf4:	09 f0       	breq	.+2      	; 0xbf8 <__vector_15+0x30>
    {
        UART_TXC_CallBack();
 bf6:	09 95       	icall
    }
 bf8:	ff 91       	pop	r31
 bfa:	ef 91       	pop	r30
 bfc:	bf 91       	pop	r27
 bfe:	af 91       	pop	r26
 c00:	9f 91       	pop	r25
 c02:	8f 91       	pop	r24
 c04:	7f 91       	pop	r23
 c06:	6f 91       	pop	r22
 c08:	5f 91       	pop	r21
 c0a:	4f 91       	pop	r20
 c0c:	3f 91       	pop	r19
 c0e:	2f 91       	pop	r18
 c10:	0f 90       	pop	r0
 c12:	0f be       	out	0x3f, r0	; 63
 c14:	0f 90       	pop	r0
 c16:	1f 90       	pop	r1
 c18:	18 95       	reti

00000c1a <__itoa_ncheck>:
 c1a:	bb 27       	eor	r27, r27
 c1c:	4a 30       	cpi	r20, 0x0A	; 10
 c1e:	31 f4       	brne	.+12     	; 0xc2c <__itoa_ncheck+0x12>
 c20:	99 23       	and	r25, r25
 c22:	22 f4       	brpl	.+8      	; 0xc2c <__itoa_ncheck+0x12>
 c24:	bd e2       	ldi	r27, 0x2D	; 45
 c26:	90 95       	com	r25
 c28:	81 95       	neg	r24
 c2a:	9f 4f       	sbci	r25, 0xFF	; 255
 c2c:	0c 94 19 06 	jmp	0xc32	; 0xc32 <__utoa_common>

00000c30 <__utoa_ncheck>:
 c30:	bb 27       	eor	r27, r27

00000c32 <__utoa_common>:
 c32:	fb 01       	movw	r30, r22
 c34:	55 27       	eor	r21, r21
 c36:	aa 27       	eor	r26, r26
 c38:	88 0f       	add	r24, r24
 c3a:	99 1f       	adc	r25, r25
 c3c:	aa 1f       	adc	r26, r26
 c3e:	a4 17       	cp	r26, r20
 c40:	10 f0       	brcs	.+4      	; 0xc46 <__utoa_common+0x14>
 c42:	a4 1b       	sub	r26, r20
 c44:	83 95       	inc	r24
 c46:	50 51       	subi	r21, 0x10	; 16
 c48:	b9 f7       	brne	.-18     	; 0xc38 <__utoa_common+0x6>
 c4a:	a0 5d       	subi	r26, 0xD0	; 208
 c4c:	aa 33       	cpi	r26, 0x3A	; 58
 c4e:	08 f0       	brcs	.+2      	; 0xc52 <__utoa_common+0x20>
 c50:	a9 5d       	subi	r26, 0xD9	; 217
 c52:	a1 93       	st	Z+, r26
 c54:	00 97       	sbiw	r24, 0x00	; 0
 c56:	79 f7       	brne	.-34     	; 0xc36 <__utoa_common+0x4>
 c58:	b1 11       	cpse	r27, r1
 c5a:	b1 93       	st	Z+, r27
 c5c:	11 92       	st	Z+, r1
 c5e:	cb 01       	movw	r24, r22
 c60:	0c 94 32 06 	jmp	0xc64	; 0xc64 <strrev>

00000c64 <strrev>:
 c64:	dc 01       	movw	r26, r24
 c66:	fc 01       	movw	r30, r24
 c68:	67 2f       	mov	r22, r23
 c6a:	71 91       	ld	r23, Z+
 c6c:	77 23       	and	r23, r23
 c6e:	e1 f7       	brne	.-8      	; 0xc68 <strrev+0x4>
 c70:	32 97       	sbiw	r30, 0x02	; 2
 c72:	04 c0       	rjmp	.+8      	; 0xc7c <strrev+0x18>
 c74:	7c 91       	ld	r23, X
 c76:	6d 93       	st	X+, r22
 c78:	70 83       	st	Z, r23
 c7a:	62 91       	ld	r22, -Z
 c7c:	ae 17       	cp	r26, r30
 c7e:	bf 07       	cpc	r27, r31
 c80:	c8 f3       	brcs	.-14     	; 0xc74 <strrev+0x10>
 c82:	08 95       	ret

00000c84 <_exit>:
 c84:	f8 94       	cli

00000c86 <__stop_program>:
 c86:	ff cf       	rjmp	.-2      	; 0xc86 <__stop_program>
