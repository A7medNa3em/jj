
NTI_atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000021c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000003c6  00800060  000021c8  0000225c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000f2  00800426  00800426  00002622  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002622  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002654  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000790  00000000  00000000  00002690  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005bf8  00000000  00000000  00002e20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001fe1  00000000  00000000  00008a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000032f8  00000000  00000000  0000a9f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000013a8  00000000  00000000  0000dcf4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001daa  00000000  00000000  0000f09c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000038c9  00000000  00000000  00010e46  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000618  00000000  00000000  0001470f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 2b 08 	jmp	0x1056	; 0x1056 <__vector_1>
       8:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__vector_2>
       c:	0c 94 79 08 	jmp	0x10f2	; 0x10f2 <__vector_3>
      10:	0c 94 c5 0b 	jmp	0x178a	; 0x178a <__vector_4>
      14:	0c 94 ee 0b 	jmp	0x17dc	; 0x17dc <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 7f 0b 	jmp	0x16fe	; 0x16fe <__vector_7>
      20:	0c 94 56 0b 	jmp	0x16ac	; 0x16ac <__vector_8>
      24:	0c 94 2d 0b 	jmp	0x165a	; 0x165a <__vector_9>
      28:	0c 94 a7 0a 	jmp	0x154e	; 0x154e <__vector_10>
      2c:	0c 94 d0 0a 	jmp	0x15a0	; 0x15a0 <__vector_11>
      30:	0c 94 30 09 	jmp	0x1260	; 0x1260 <__vector_12>
      34:	0c 94 aa 0c 	jmp	0x1954	; 0x1954 <__vector_13>
      38:	0c 94 d3 0c 	jmp	0x19a6	; 0x19a6 <__vector_14>
      3c:	0c 94 fc 0c 	jmp	0x19f8	; 0x19f8 <__vector_15>
      40:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	14 e0       	ldi	r17, 0x04	; 4
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ec       	ldi	r30, 0xC8	; 200
      68:	f1 e2       	ldi	r31, 0x21	; 33
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 32       	cpi	r26, 0x26	; 38
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	25 e0       	ldi	r18, 0x05	; 5
      78:	a6 e2       	ldi	r26, 0x26	; 38
      7a:	b4 e0       	ldi	r27, 0x04	; 4
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 31       	cpi	r26, 0x18	; 24
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e6 06 	call	0xdcc	; 0xdcc <main>
      8a:	0c 94 e2 10 	jmp	0x21c4	; 0x21c4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Entrance_Init>:

/* Init entrance  */
void Entrance_Init(void)
{
    /* Init UltraSonic Init led */
    US_voidInit();
      92:	0e 94 81 06 	call	0xd02	; 0xd02 <US_voidInit>
    /* Init servo  */
    SERVO_voidInit();
      96:	0e 94 14 06 	call	0xc28	; 0xc28 <SERVO_voidInit>

    /* Init led */
    led_viInit();
      9a:	0e 94 ee 02 	call	0x5dc	; 0x5dc <led_viInit>

    /* Init Entrance method (FP/RFID/Keypad) */
    /////////////////////////////////////////////////
    /////////////////////////////////////////////////
    /////////////////////////////////////////////////
    KeyPad_init();
      9e:	0e 94 93 01 	call	0x326	; 0x326 <KeyPad_init>
    SPI_Init();
      a2:	0e 94 00 09 	call	0x1200	; 0x1200 <SPI_Init>
    mcrf522_init();
      a6:	0e 94 99 04 	call	0x932	; 0x932 <mcrf522_init>

    /* Init Communication metod */
    UART_Init();
      aa:	0e 94 17 0c 	call	0x182e	; 0x182e <UART_Init>

    /* Init Display */
    /////////////////////////////////////////////////
    /////////////////////////////////////////////////
    /////////////////////////////////////////////////
    LCD_Init();
      ae:	0e 94 79 02 	call	0x4f2	; 0x4f2 <LCD_Init>
    OLED_vInit();
      b2:	0e 94 8b 03 	call	0x716	; 0x716 <OLED_vInit>
    OLED_ResetDisplay();
      b6:	0e 94 33 04 	call	0x866	; 0x866 <OLED_ResetDisplay>

    SERVO_voidGotoAngle(0);
      ba:	80 e0       	ldi	r24, 0x00	; 0
      bc:	0e 94 c9 05 	call	0xb92	; 0xb92 <SERVO_voidGotoAngle>
      c0:	08 95       	ret

000000c2 <Entrance_Start>:
}

void Entrance_Start()
{
      c2:	0f 93       	push	r16
      c4:	1f 93       	push	r17
      c6:	cf 93       	push	r28
      c8:	df 93       	push	r29
      ca:	1f 92       	push	r1
      cc:	cd b7       	in	r28, 0x3d	; 61
      ce:	de b7       	in	r29, 0x3e	; 62
    u8 detectedDistance_1 = 0, detectedDistance_2 = 0;
    u8 TryingNun = 0, Take_State = 0xff;
    u8 UserIndex = 0xff;
      d0:	8f ef       	ldi	r24, 0xFF	; 255
      d2:	89 83       	std	Y+1, r24	; 0x01

    detectedDistance_1 = US_u8dRead_Distance_cm(US_CHANNEL_0);
      d4:	80 e0       	ldi	r24, 0x00	; 0
      d6:	0e 94 b1 06 	call	0xd62	; 0xd62 <US_u8dRead_Distance_cm>
      da:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <__fixunssfsi>
      de:	16 2f       	mov	r17, r22
}

void Entrance_Start()
{
    u8 detectedDistance_1 = 0, detectedDistance_2 = 0;
    u8 TryingNun = 0, Take_State = 0xff;
      e0:	00 e0       	ldi	r16, 0x00	; 0
    u8 UserIndex = 0xff;

    detectedDistance_1 = US_u8dRead_Distance_cm(US_CHANNEL_0);

    while (detectedDistance_1 <= DETECT_DISTANCE_MIN)
      e2:	d5 c0       	rjmp	.+426    	; 0x28e <Entrance_Start+0x1cc>
    {
        /* Welcome and wait  massege  */
        OLED_ClearDisplay();
      e4:	0e 94 1d 04 	call	0x83a	; 0x83a <OLED_ClearDisplay>

        LCD_ClearDisplay();
      e8:	0e 94 ac 02 	call	0x558	; 0x558 <LCD_ClearDisplay>
        LCD_GoToXY(0, 2);
      ec:	62 e0       	ldi	r22, 0x02	; 2
      ee:	80 e0       	ldi	r24, 0x00	; 0
      f0:	0e 94 bf 02 	call	0x57e	; 0x57e <LCD_GoToXY>
        LCD_WriteString("Welcome");
      f4:	83 ea       	ldi	r24, 0xA3	; 163
      f6:	93 e0       	ldi	r25, 0x03	; 3
      f8:	0e 94 db 02 	call	0x5b6	; 0x5b6 <LCD_WriteString>
        LCD_GoToXY(1, 0);
      fc:	60 e0       	ldi	r22, 0x00	; 0
      fe:	81 e0       	ldi	r24, 0x01	; 1
     100:	0e 94 bf 02 	call	0x57e	; 0x57e <LCD_GoToXY>
        LCD_WriteString("Enter Password ");
     104:	8b ea       	ldi	r24, 0xAB	; 171
     106:	93 e0       	ldi	r25, 0x03	; 3
     108:	0e 94 db 02 	call	0x5b6	; 0x5b6 <LCD_WriteString>
        OLED_sendStr_xy2("Welcome", 1, 1);
     10c:	41 e0       	ldi	r20, 0x01	; 1
     10e:	50 e0       	ldi	r21, 0x00	; 0
     110:	61 e0       	ldi	r22, 0x01	; 1
     112:	70 e0       	ldi	r23, 0x00	; 0
     114:	83 ea       	ldi	r24, 0xA3	; 163
     116:	93 e0       	ldi	r25, 0x03	; 3
     118:	0e 94 f7 03 	call	0x7ee	; 0x7ee <OLED_sendStr_xy2>
        OLED_sendStr_xy2("Enter Password", 2, 1);
     11c:	41 e0       	ldi	r20, 0x01	; 1
     11e:	50 e0       	ldi	r21, 0x00	; 0
     120:	62 e0       	ldi	r22, 0x02	; 2
     122:	70 e0       	ldi	r23, 0x00	; 0
     124:	8b eb       	ldi	r24, 0xBB	; 187
     126:	93 e0       	ldi	r25, 0x03	; 3
     128:	0e 94 f7 03 	call	0x7ee	; 0x7ee <OLED_sendStr_xy2>

        /* Yellow Led On */
        led_viOn(LED_YELLOW);
     12c:	81 e0       	ldi	r24, 0x01	; 1
     12e:	0e 94 05 03 	call	0x60a	; 0x60a <led_viOn>
        /* RED Led OFF */
        led_viOff(LED_RED);
     132:	82 e0       	ldi	r24, 0x02	; 2
     134:	0e 94 43 03 	call	0x686	; 0x686 <led_viOff>
        /* Green Led OFF */
        led_viOff(LED_GREEN);
     138:	80 e0       	ldi	r24, 0x00	; 0
     13a:	0e 94 43 03 	call	0x686	; 0x686 <led_viOff>

        /* Take registery */
        /////////////////////////////////////////////////
        /////////////////////////////////////////////////

        detectedDistance_1 = US_u8dRead_Distance_cm(US_CHANNEL_0);
     13e:	80 e0       	ldi	r24, 0x00	; 0
     140:	0e 94 b1 06 	call	0xd62	; 0xd62 <US_u8dRead_Distance_cm>
     144:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <__fixunssfsi>
     148:	16 2f       	mov	r17, r22

        Take_State = Take_Compare_RFID(&UserIndex);
     14a:	ce 01       	movw	r24, r28
     14c:	01 96       	adiw	r24, 0x01	; 1
     14e:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <Take_Compare_RFID>

        if (Take_State == 1)
     152:	81 30       	cpi	r24, 0x01	; 1
     154:	09 f0       	breq	.+2      	; 0x158 <Entrance_Start+0x96>
     156:	44 c0       	rjmp	.+136    	; 0x1e0 <Entrance_Start+0x11e>
        {
            G_Entered_Num++;
     158:	80 91 2e 04 	lds	r24, 0x042E	; 0x80042e <G_Entered_Num>
     15c:	8f 5f       	subi	r24, 0xFF	; 255
     15e:	80 93 2e 04 	sts	0x042E, r24	; 0x80042e <G_Entered_Num>
            /* RED Led ON */
            led_viOn(LED_GREEN);
     162:	80 e0       	ldi	r24, 0x00	; 0
     164:	0e 94 05 03 	call	0x60a	; 0x60a <led_viOn>
            led_viOff(LED_RED);
     168:	82 e0       	ldi	r24, 0x02	; 2
     16a:	0e 94 43 03 	call	0x686	; 0x686 <led_viOff>

            /* Welcome  massege  */

            LCD_ClearDisplay();
     16e:	0e 94 ac 02 	call	0x558	; 0x558 <LCD_ClearDisplay>
            LCD_GoToXY(0, 2);
     172:	62 e0       	ldi	r22, 0x02	; 2
     174:	80 e0       	ldi	r24, 0x00	; 0
     176:	0e 94 bf 02 	call	0x57e	; 0x57e <LCD_GoToXY>
            LCD_WriteString("Welcome");
     17a:	83 ea       	ldi	r24, 0xA3	; 163
     17c:	93 e0       	ldi	r25, 0x03	; 3
     17e:	0e 94 db 02 	call	0x5b6	; 0x5b6 <LCD_WriteString>
            OLED_sendStr_xy2("Welcome", 1, 1);
     182:	41 e0       	ldi	r20, 0x01	; 1
     184:	50 e0       	ldi	r21, 0x00	; 0
     186:	61 e0       	ldi	r22, 0x01	; 1
     188:	70 e0       	ldi	r23, 0x00	; 0
     18a:	83 ea       	ldi	r24, 0xA3	; 163
     18c:	93 e0       	ldi	r25, 0x03	; 3
     18e:	0e 94 f7 03 	call	0x7ee	; 0x7ee <OLED_sendStr_xy2>

            LCD_GoToXY(1, 0);
     192:	60 e0       	ldi	r22, 0x00	; 0
     194:	81 e0       	ldi	r24, 0x01	; 1
     196:	0e 94 bf 02 	call	0x57e	; 0x57e <LCD_GoToXY>
            LCD_WriteString("Correct Password");
     19a:	8a ec       	ldi	r24, 0xCA	; 202
     19c:	93 e0       	ldi	r25, 0x03	; 3
     19e:	0e 94 db 02 	call	0x5b6	; 0x5b6 <LCD_WriteString>
            OLED_sendStr_xy2("Correct Password", 2, 0);
     1a2:	40 e0       	ldi	r20, 0x00	; 0
     1a4:	50 e0       	ldi	r21, 0x00	; 0
     1a6:	62 e0       	ldi	r22, 0x02	; 2
     1a8:	70 e0       	ldi	r23, 0x00	; 0
     1aa:	8a ec       	ldi	r24, 0xCA	; 202
     1ac:	93 e0       	ldi	r25, 0x03	; 3
     1ae:	0e 94 f7 03 	call	0x7ee	; 0x7ee <OLED_sendStr_xy2>

            /* open gate */
            SERVO_voidGotoAngle(90);
     1b2:	8a e5       	ldi	r24, 0x5A	; 90
     1b4:	0e 94 c9 05 	call	0xb92	; 0xb92 <SERVO_voidGotoAngle>
            /* wait until US 2 read */
            detectedDistance_2 = US_u8dRead_Distance_cm(US_CHANNEL_1);
     1b8:	81 e0       	ldi	r24, 0x01	; 1
     1ba:	0e 94 b1 06 	call	0xd62	; 0xd62 <US_u8dRead_Distance_cm>
     1be:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <__fixunssfsi>
            while (detectedDistance_2 > DETECT_DISTANCE_MIN)
     1c2:	05 c0       	rjmp	.+10     	; 0x1ce <Entrance_Start+0x10c>
            {
                detectedDistance_2 = US_u8dRead_Distance_cm(US_CHANNEL_1);
     1c4:	81 e0       	ldi	r24, 0x01	; 1
     1c6:	0e 94 b1 06 	call	0xd62	; 0xd62 <US_u8dRead_Distance_cm>
     1ca:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <__fixunssfsi>

            /* open gate */
            SERVO_voidGotoAngle(90);
            /* wait until US 2 read */
            detectedDistance_2 = US_u8dRead_Distance_cm(US_CHANNEL_1);
            while (detectedDistance_2 > DETECT_DISTANCE_MIN)
     1ce:	66 30       	cpi	r22, 0x06	; 6
     1d0:	c8 f7       	brcc	.-14     	; 0x1c4 <Entrance_Start+0x102>
            {
                detectedDistance_2 = US_u8dRead_Distance_cm(US_CHANNEL_1);
            }
            /* close gate */
            SERVO_voidGotoAngle(0);
     1d2:	80 e0       	ldi	r24, 0x00	; 0
     1d4:	0e 94 c9 05 	call	0xb92	; 0xb92 <SERVO_voidGotoAngle>

            /* SEND Index of user*/
            UART_TransmitBusyWait(UserIndex);
     1d8:	89 81       	ldd	r24, Y+1	; 0x01
     1da:	0e 94 a3 0c 	call	0x1946	; 0x1946 <UART_TransmitBusyWait>
            break;
     1de:	5a c0       	rjmp	.+180    	; 0x294 <Entrance_Start+0x1d2>
        }
        else if (Take_State == 2)
     1e0:	82 30       	cpi	r24, 0x02	; 2
     1e2:	09 f0       	breq	.+2      	; 0x1e6 <Entrance_Start+0x124>
     1e4:	54 c0       	rjmp	.+168    	; 0x28e <Entrance_Start+0x1cc>
        {
            TryingNun++;
     1e6:	0f 5f       	subi	r16, 0xFF	; 255
            if (TryingNun >= MAX_TRYING_NUM)
     1e8:	03 30       	cpi	r16, 0x03	; 3
     1ea:	38 f1       	brcs	.+78     	; 0x23a <Entrance_Start+0x178>
            {
                /* RED Led ON */
                led_viOn(LED_RED);
     1ec:	0e 94 05 03 	call	0x60a	; 0x60a <led_viOn>

                /* Blocking massege */
                LCD_ClearDisplay();
     1f0:	0e 94 ac 02 	call	0x558	; 0x558 <LCD_ClearDisplay>
                LCD_GoToXY(0, 2);
     1f4:	62 e0       	ldi	r22, 0x02	; 2
     1f6:	80 e0       	ldi	r24, 0x00	; 0
     1f8:	0e 94 bf 02 	call	0x57e	; 0x57e <LCD_GoToXY>
                LCD_WriteString("Try again");
     1fc:	8b ed       	ldi	r24, 0xDB	; 219
     1fe:	93 e0       	ldi	r25, 0x03	; 3
     200:	0e 94 db 02 	call	0x5b6	; 0x5b6 <LCD_WriteString>
                OLED_sendStr_xy2("TRY again after 5 secs", 1, 0);
     204:	40 e0       	ldi	r20, 0x00	; 0
     206:	50 e0       	ldi	r21, 0x00	; 0
     208:	61 e0       	ldi	r22, 0x01	; 1
     20a:	70 e0       	ldi	r23, 0x00	; 0
     20c:	85 ee       	ldi	r24, 0xE5	; 229
     20e:	93 e0       	ldi	r25, 0x03	; 3
     210:	0e 94 f7 03 	call	0x7ee	; 0x7ee <OLED_sendStr_xy2>

                LCD_GoToXY(1, 0);
     214:	60 e0       	ldi	r22, 0x00	; 0
     216:	81 e0       	ldi	r24, 0x01	; 1
     218:	0e 94 bf 02 	call	0x57e	; 0x57e <LCD_GoToXY>
                LCD_WriteString("after 5 secs");
     21c:	8f ee       	ldi	r24, 0xEF	; 239
     21e:	93 e0       	ldi	r25, 0x03	; 3
     220:	0e 94 db 02 	call	0x5b6	; 0x5b6 <LCD_WriteString>

                /* delay 5 sec to take second registry  */
                TD_delay_ms(5000);
     224:	28 e8       	ldi	r18, 0x88	; 136
     226:	33 e1       	ldi	r19, 0x13	; 19
     228:	40 e0       	ldi	r20, 0x00	; 0
     22a:	50 e0       	ldi	r21, 0x00	; 0
     22c:	60 e0       	ldi	r22, 0x00	; 0
     22e:	70 e0       	ldi	r23, 0x00	; 0
     230:	80 e0       	ldi	r24, 0x00	; 0
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <TD_delay_ms>
                break;
     238:	2d c0       	rjmp	.+90     	; 0x294 <Entrance_Start+0x1d2>
            }
            else
            {

                /* RED Led ON */
                led_viOn(LED_RED);
     23a:	82 e0       	ldi	r24, 0x02	; 2
     23c:	0e 94 05 03 	call	0x60a	; 0x60a <led_viOn>

                /* Try again massege  */
                LCD_ClearDisplay();
     240:	0e 94 ac 02 	call	0x558	; 0x558 <LCD_ClearDisplay>
                LCD_GoToXY(0, 2);
     244:	62 e0       	ldi	r22, 0x02	; 2
     246:	80 e0       	ldi	r24, 0x00	; 0
     248:	0e 94 bf 02 	call	0x57e	; 0x57e <LCD_GoToXY>
                LCD_WriteString("Wrong Password");
     24c:	8c ef       	ldi	r24, 0xFC	; 252
     24e:	93 e0       	ldi	r25, 0x03	; 3
     250:	0e 94 db 02 	call	0x5b6	; 0x5b6 <LCD_WriteString>
                LCD_GoToXY(1, 0);
     254:	60 e0       	ldi	r22, 0x00	; 0
     256:	81 e0       	ldi	r24, 0x01	; 1
     258:	0e 94 bf 02 	call	0x57e	; 0x57e <LCD_GoToXY>
                LCD_WriteString("Try again");
     25c:	8b ed       	ldi	r24, 0xDB	; 219
     25e:	93 e0       	ldi	r25, 0x03	; 3
     260:	0e 94 db 02 	call	0x5b6	; 0x5b6 <LCD_WriteString>
                OLED_sendStr_xy2(" Wrong PasswordTRY again ", 1, 1);
     264:	41 e0       	ldi	r20, 0x01	; 1
     266:	50 e0       	ldi	r21, 0x00	; 0
     268:	61 e0       	ldi	r22, 0x01	; 1
     26a:	70 e0       	ldi	r23, 0x00	; 0
     26c:	8b e0       	ldi	r24, 0x0B	; 11
     26e:	94 e0       	ldi	r25, 0x04	; 4
     270:	0e 94 f7 03 	call	0x7ee	; 0x7ee <OLED_sendStr_xy2>

                /* delay 2 sec to take second registry  */
                TD_delay_ms(2000);
     274:	20 ed       	ldi	r18, 0xD0	; 208
     276:	37 e0       	ldi	r19, 0x07	; 7
     278:	40 e0       	ldi	r20, 0x00	; 0
     27a:	50 e0       	ldi	r21, 0x00	; 0
     27c:	60 e0       	ldi	r22, 0x00	; 0
     27e:	70 e0       	ldi	r23, 0x00	; 0
     280:	80 e0       	ldi	r24, 0x00	; 0
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <TD_delay_ms>
                /* RED Led OFF */
                led_viOff(LED_RED);
     288:	82 e0       	ldi	r24, 0x02	; 2
     28a:	0e 94 43 03 	call	0x686	; 0x686 <led_viOff>
    u8 TryingNun = 0, Take_State = 0xff;
    u8 UserIndex = 0xff;

    detectedDistance_1 = US_u8dRead_Distance_cm(US_CHANNEL_0);

    while (detectedDistance_1 <= DETECT_DISTANCE_MIN)
     28e:	16 30       	cpi	r17, 0x06	; 6
     290:	08 f4       	brcc	.+2      	; 0x294 <Entrance_Start+0x1d2>
     292:	28 cf       	rjmp	.-432    	; 0xe4 <Entrance_Start+0x22>
                led_viOff(LED_RED);
            }
        }
    }

    LCD_ClearDisplay();
     294:	0e 94 ac 02 	call	0x558	; 0x558 <LCD_ClearDisplay>
    led_viOff(LED_RED);
     298:	82 e0       	ldi	r24, 0x02	; 2
     29a:	0e 94 43 03 	call	0x686	; 0x686 <led_viOff>
    led_viOff(LED_YELLOW);
     29e:	81 e0       	ldi	r24, 0x01	; 1
     2a0:	0e 94 43 03 	call	0x686	; 0x686 <led_viOff>
    led_viOff(LED_GREEN);
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	0e 94 43 03 	call	0x686	; 0x686 <led_viOff>
     2aa:	0f 90       	pop	r0
     2ac:	df 91       	pop	r29
     2ae:	cf 91       	pop	r28
     2b0:	1f 91       	pop	r17
     2b2:	0f 91       	pop	r16
     2b4:	08 95       	ret

000002b6 <Take_Compare_RFID>:

u8 ID_Arr[][4] = {{39, 132, 72, 214}};
char *NAME_Arr[] = {"Jo"};

u8 Take_Compare_RFID(u8 *index)
{
     2b6:	ef 92       	push	r14
     2b8:	ff 92       	push	r15
     2ba:	1f 93       	push	r17
     2bc:	cf 93       	push	r28
     2be:	df 93       	push	r29
     2c0:	00 d0       	rcall	.+0      	; 0x2c2 <Take_Compare_RFID+0xc>
     2c2:	00 d0       	rcall	.+0      	; 0x2c4 <Take_Compare_RFID+0xe>
     2c4:	cd b7       	in	r28, 0x3d	; 61
     2c6:	de b7       	in	r29, 0x3e	; 62
     2c8:	7c 01       	movw	r14, r24

    u8 byte;
    u8 buffer[4];
    u8 state = 0;

    byte = DetectCard();
     2ca:	0e 94 47 05 	call	0xa8e	; 0xa8e <DetectCard>

    if (byte == 1)
     2ce:	81 30       	cpi	r24, 0x01	; 1
     2d0:	f9 f4       	brne	.+62     	; 0x310 <Take_Compare_RFID+0x5a>
    {
        GetCardId(buffer);
     2d2:	ce 01       	movw	r24, r28
     2d4:	01 96       	adiw	r24, 0x01	; 1
     2d6:	0e 94 79 05 	call	0xaf2	; 0xaf2 <GetCardId>
        for (u8 i = 0; i < NUM_OF_USERS; i++)
     2da:	10 e0       	ldi	r17, 0x00	; 0
     2dc:	15 c0       	rjmp	.+42     	; 0x308 <Take_Compare_RFID+0x52>
        {
            if (memcmp(buffer, ID_Arr[i], 4) == 0)
     2de:	61 2f       	mov	r22, r17
     2e0:	70 e0       	ldi	r23, 0x00	; 0
     2e2:	66 0f       	add	r22, r22
     2e4:	77 1f       	adc	r23, r23
     2e6:	66 0f       	add	r22, r22
     2e8:	77 1f       	adc	r23, r23
     2ea:	60 5a       	subi	r22, 0xA0	; 160
     2ec:	7f 4f       	sbci	r23, 0xFF	; 255
     2ee:	44 e0       	ldi	r20, 0x04	; 4
     2f0:	50 e0       	ldi	r21, 0x00	; 0
     2f2:	ce 01       	movw	r24, r28
     2f4:	01 96       	adiw	r24, 0x01	; 1
     2f6:	0e 94 d5 10 	call	0x21aa	; 0x21aa <memcmp>
     2fa:	89 2b       	or	r24, r25
     2fc:	21 f4       	brne	.+8      	; 0x306 <Take_Compare_RFID+0x50>
            {
                *index = i;
     2fe:	f7 01       	movw	r30, r14
     300:	10 83       	st	Z, r17
                state = 1;
                return state;
     302:	81 e0       	ldi	r24, 0x01	; 1
     304:	06 c0       	rjmp	.+12     	; 0x312 <Take_Compare_RFID+0x5c>
    byte = DetectCard();

    if (byte == 1)
    {
        GetCardId(buffer);
        for (u8 i = 0; i < NUM_OF_USERS; i++)
     306:	1f 5f       	subi	r17, 0xFF	; 255
     308:	11 23       	and	r17, r17
     30a:	49 f3       	breq	.-46     	; 0x2de <Take_Compare_RFID+0x28>
                state = 1;
                return state;
            }
        }

        state = 2;
     30c:	82 e0       	ldi	r24, 0x02	; 2
     30e:	01 c0       	rjmp	.+2      	; 0x312 <Take_Compare_RFID+0x5c>
    }
    else
    {
        state = 0;
     310:	80 e0       	ldi	r24, 0x00	; 0
    }

    return state;
     312:	0f 90       	pop	r0
     314:	0f 90       	pop	r0
     316:	0f 90       	pop	r0
     318:	0f 90       	pop	r0
     31a:	df 91       	pop	r29
     31c:	cf 91       	pop	r28
     31e:	1f 91       	pop	r17
     320:	ff 90       	pop	r15
     322:	ef 90       	pop	r14
     324:	08 95       	ret

00000326 <KeyPad_init>:
 *   		default state to it according to connection
 *   		and init columns as input
 *   @retval none
 */
void KeyPad_init()
{
     326:	ef 92       	push	r14
     328:	ff 92       	push	r15
     32a:	0f 93       	push	r16
     32c:	1f 93       	push	r17
     32e:	cf 93       	push	r28
     330:	df 93       	push	r29
	u8 index_1 = 0,index_2 = 0;


	for (index_1 = 0; index_1 < KeypadsCount; index_1++)
     332:	e1 2c       	mov	r14, r1
     334:	28 c0       	rjmp	.+80     	; 0x386 <KeyPad_init+0x60>
	{
		for (index_2 = 0; index_2 < 4; index_2++)
		{
			/* Init rows and columns*/
			dio_vidConfigChannel(Keypads[index_1].rows[index_2].bport ,
     336:	cf 2d       	mov	r28, r15
     338:	d0 e0       	ldi	r29, 0x00	; 0
     33a:	ce 01       	movw	r24, r28
     33c:	88 0f       	add	r24, r24
     33e:	99 1f       	adc	r25, r25
     340:	c8 0f       	add	r28, r24
     342:	d9 1f       	adc	r29, r25
     344:	89 e1       	ldi	r24, 0x19	; 25
     346:	e8 9e       	mul	r14, r24
     348:	80 01       	movw	r16, r0
     34a:	11 24       	eor	r1, r1
     34c:	c0 0f       	add	r28, r16
     34e:	d1 1f       	adc	r29, r17
     350:	cb 59       	subi	r28, 0x9B	; 155
     352:	df 4f       	sbci	r29, 0xFF	; 255
     354:	41 e0       	ldi	r20, 0x01	; 1
     356:	69 81       	ldd	r22, Y+1	; 0x01
     358:	88 81       	ld	r24, Y
     35a:	0e 94 14 07 	call	0xe28	; 0xe28 <dio_vidConfigChannel>
			Keypads[index_1].rows[index_2].bchannel,OUTPUT);
			dio_vidConfigChannel(Keypads[index_1].cols[index_2].bport ,
     35e:	8c 85       	ldd	r24, Y+12	; 0x0c
     360:	40 e0       	ldi	r20, 0x00	; 0
     362:	68 2f       	mov	r22, r24
     364:	0e 94 14 07 	call	0xe28	; 0xe28 <dio_vidConfigChannel>
			Keypads[index_1].cols[index_2].bport,INPUT);

			/* Write default state to rows pins according to HW connections */
			dio_vidWriteChannel(Keypads[index_1].rows[index_2].bport ,
     368:	f8 01       	movw	r30, r16
     36a:	eb 59       	subi	r30, 0x9B	; 155
     36c:	ff 4f       	sbci	r31, 0xFF	; 255
     36e:	40 8d       	ldd	r20, Z+24	; 0x18
     370:	69 81       	ldd	r22, Y+1	; 0x01
     372:	88 81       	ld	r24, Y
     374:	0e 94 81 07 	call	0xf02	; 0xf02 <dio_vidWriteChannel>
	u8 index_1 = 0,index_2 = 0;


	for (index_1 = 0; index_1 < KeypadsCount; index_1++)
	{
		for (index_2 = 0; index_2 < 4; index_2++)
     378:	f3 94       	inc	r15
     37a:	01 c0       	rjmp	.+2      	; 0x37e <KeyPad_init+0x58>
     37c:	f1 2c       	mov	r15, r1
     37e:	83 e0       	ldi	r24, 0x03	; 3
     380:	8f 15       	cp	r24, r15
     382:	c8 f6       	brcc	.-78     	; 0x336 <KeyPad_init+0x10>
void KeyPad_init()
{
	u8 index_1 = 0,index_2 = 0;


	for (index_1 = 0; index_1 < KeypadsCount; index_1++)
     384:	e3 94       	inc	r14
     386:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <KeypadsCount>
     38a:	e8 16       	cp	r14, r24
     38c:	b8 f3       	brcs	.-18     	; 0x37c <KeyPad_init+0x56>
			/* Write default state to rows pins according to HW connections */
			dio_vidWriteChannel(Keypads[index_1].rows[index_2].bport ,
			Keypads[index_1].rows[index_2].bchannel,Keypads[index_1].defState);
		}
	}
}
     38e:	df 91       	pop	r29
     390:	cf 91       	pop	r28
     392:	1f 91       	pop	r17
     394:	0f 91       	pop	r16
     396:	ff 90       	pop	r15
     398:	ef 90       	pop	r14
     39a:	08 95       	ret

0000039c <LCD_lcd_kick>:
void LCD_WriteChar(u8 ch, u8 row, u8 col)
{
	LCD_GoToXY(row,col);
	LCD_WriteData(ch);
	
}
     39c:	41 e0       	ldi	r20, 0x01	; 1
     39e:	62 e0       	ldi	r22, 0x02	; 2
     3a0:	80 e0       	ldi	r24, 0x00	; 0
     3a2:	0e 94 81 07 	call	0xf02	; 0xf02 <dio_vidWriteChannel>
     3a6:	8f e9       	ldi	r24, 0x9F	; 159
     3a8:	9f e0       	ldi	r25, 0x0F	; 15
     3aa:	01 97       	sbiw	r24, 0x01	; 1
     3ac:	f1 f7       	brne	.-4      	; 0x3aa <LCD_lcd_kick+0xe>
     3ae:	00 c0       	rjmp	.+0      	; 0x3b0 <LCD_lcd_kick+0x14>
     3b0:	00 00       	nop
     3b2:	40 e0       	ldi	r20, 0x00	; 0
     3b4:	62 e0       	ldi	r22, 0x02	; 2
     3b6:	80 e0       	ldi	r24, 0x00	; 0
     3b8:	0e 94 81 07 	call	0xf02	; 0xf02 <dio_vidWriteChannel>
     3bc:	8f e9       	ldi	r24, 0x9F	; 159
     3be:	9f e0       	ldi	r25, 0x0F	; 15
     3c0:	01 97       	sbiw	r24, 0x01	; 1
     3c2:	f1 f7       	brne	.-4      	; 0x3c0 <LCD_lcd_kick+0x24>
     3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <LCD_lcd_kick+0x2a>
     3c6:	00 00       	nop
     3c8:	08 95       	ret

000003ca <LCD_SendCommand>:
     3ca:	cf 93       	push	r28
     3cc:	c8 2f       	mov	r28, r24
     3ce:	40 e0       	ldi	r20, 0x00	; 0
     3d0:	63 e0       	ldi	r22, 0x03	; 3
     3d2:	80 e0       	ldi	r24, 0x00	; 0
     3d4:	0e 94 81 07 	call	0xf02	; 0xf02 <dio_vidWriteChannel>
     3d8:	40 e0       	ldi	r20, 0x00	; 0
     3da:	69 e0       	ldi	r22, 0x09	; 9
     3dc:	80 e0       	ldi	r24, 0x00	; 0
     3de:	0e 94 81 07 	call	0xf02	; 0xf02 <dio_vidWriteChannel>
     3e2:	c4 fb       	bst	r28, 4
     3e4:	44 27       	eor	r20, r20
     3e6:	40 f9       	bld	r20, 0
     3e8:	60 e0       	ldi	r22, 0x00	; 0
     3ea:	81 e0       	ldi	r24, 0x01	; 1
     3ec:	0e 94 81 07 	call	0xf02	; 0xf02 <dio_vidWriteChannel>
     3f0:	c5 fb       	bst	r28, 5
     3f2:	44 27       	eor	r20, r20
     3f4:	40 f9       	bld	r20, 0
     3f6:	61 e0       	ldi	r22, 0x01	; 1
     3f8:	81 e0       	ldi	r24, 0x01	; 1
     3fa:	0e 94 81 07 	call	0xf02	; 0xf02 <dio_vidWriteChannel>
     3fe:	c6 fb       	bst	r28, 6
     400:	44 27       	eor	r20, r20
     402:	40 f9       	bld	r20, 0
     404:	62 e0       	ldi	r22, 0x02	; 2
     406:	81 e0       	ldi	r24, 0x01	; 1
     408:	0e 94 81 07 	call	0xf02	; 0xf02 <dio_vidWriteChannel>
     40c:	4c 2f       	mov	r20, r28
     40e:	44 1f       	adc	r20, r20
     410:	44 27       	eor	r20, r20
     412:	44 1f       	adc	r20, r20
     414:	64 e0       	ldi	r22, 0x04	; 4
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	0e 94 81 07 	call	0xf02	; 0xf02 <dio_vidWriteChannel>
     41c:	0e 94 ce 01 	call	0x39c	; 0x39c <LCD_lcd_kick>
     420:	4c 2f       	mov	r20, r28
     422:	41 70       	andi	r20, 0x01	; 1
     424:	60 e0       	ldi	r22, 0x00	; 0
     426:	81 e0       	ldi	r24, 0x01	; 1
     428:	0e 94 81 07 	call	0xf02	; 0xf02 <dio_vidWriteChannel>
     42c:	c1 fb       	bst	r28, 1
     42e:	44 27       	eor	r20, r20
     430:	40 f9       	bld	r20, 0
     432:	61 e0       	ldi	r22, 0x01	; 1
     434:	81 e0       	ldi	r24, 0x01	; 1
     436:	0e 94 81 07 	call	0xf02	; 0xf02 <dio_vidWriteChannel>
     43a:	c2 fb       	bst	r28, 2
     43c:	44 27       	eor	r20, r20
     43e:	40 f9       	bld	r20, 0
     440:	62 e0       	ldi	r22, 0x02	; 2
     442:	81 e0       	ldi	r24, 0x01	; 1
     444:	0e 94 81 07 	call	0xf02	; 0xf02 <dio_vidWriteChannel>
     448:	c3 fb       	bst	r28, 3
     44a:	44 27       	eor	r20, r20
     44c:	40 f9       	bld	r20, 0
     44e:	64 e0       	ldi	r22, 0x04	; 4
     450:	81 e0       	ldi	r24, 0x01	; 1
     452:	0e 94 81 07 	call	0xf02	; 0xf02 <dio_vidWriteChannel>
     456:	0e 94 ce 01 	call	0x39c	; 0x39c <LCD_lcd_kick>
     45a:	cf 91       	pop	r28
     45c:	08 95       	ret

0000045e <LCD_WriteData>:
     45e:	cf 93       	push	r28
     460:	c8 2f       	mov	r28, r24
     462:	41 e0       	ldi	r20, 0x01	; 1
     464:	63 e0       	ldi	r22, 0x03	; 3
     466:	80 e0       	ldi	r24, 0x00	; 0
     468:	0e 94 81 07 	call	0xf02	; 0xf02 <dio_vidWriteChannel>
     46c:	40 e0       	ldi	r20, 0x00	; 0
     46e:	69 e0       	ldi	r22, 0x09	; 9
     470:	80 e0       	ldi	r24, 0x00	; 0
     472:	0e 94 81 07 	call	0xf02	; 0xf02 <dio_vidWriteChannel>
     476:	c4 fb       	bst	r28, 4
     478:	44 27       	eor	r20, r20
     47a:	40 f9       	bld	r20, 0
     47c:	60 e0       	ldi	r22, 0x00	; 0
     47e:	81 e0       	ldi	r24, 0x01	; 1
     480:	0e 94 81 07 	call	0xf02	; 0xf02 <dio_vidWriteChannel>
     484:	c5 fb       	bst	r28, 5
     486:	44 27       	eor	r20, r20
     488:	40 f9       	bld	r20, 0
     48a:	61 e0       	ldi	r22, 0x01	; 1
     48c:	81 e0       	ldi	r24, 0x01	; 1
     48e:	0e 94 81 07 	call	0xf02	; 0xf02 <dio_vidWriteChannel>
     492:	c6 fb       	bst	r28, 6
     494:	44 27       	eor	r20, r20
     496:	40 f9       	bld	r20, 0
     498:	62 e0       	ldi	r22, 0x02	; 2
     49a:	81 e0       	ldi	r24, 0x01	; 1
     49c:	0e 94 81 07 	call	0xf02	; 0xf02 <dio_vidWriteChannel>
     4a0:	4c 2f       	mov	r20, r28
     4a2:	44 1f       	adc	r20, r20
     4a4:	44 27       	eor	r20, r20
     4a6:	44 1f       	adc	r20, r20
     4a8:	64 e0       	ldi	r22, 0x04	; 4
     4aa:	81 e0       	ldi	r24, 0x01	; 1
     4ac:	0e 94 81 07 	call	0xf02	; 0xf02 <dio_vidWriteChannel>
     4b0:	0e 94 ce 01 	call	0x39c	; 0x39c <LCD_lcd_kick>
     4b4:	4c 2f       	mov	r20, r28
     4b6:	41 70       	andi	r20, 0x01	; 1
     4b8:	60 e0       	ldi	r22, 0x00	; 0
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	0e 94 81 07 	call	0xf02	; 0xf02 <dio_vidWriteChannel>
     4c0:	c1 fb       	bst	r28, 1
     4c2:	44 27       	eor	r20, r20
     4c4:	40 f9       	bld	r20, 0
     4c6:	61 e0       	ldi	r22, 0x01	; 1
     4c8:	81 e0       	ldi	r24, 0x01	; 1
     4ca:	0e 94 81 07 	call	0xf02	; 0xf02 <dio_vidWriteChannel>
     4ce:	c2 fb       	bst	r28, 2
     4d0:	44 27       	eor	r20, r20
     4d2:	40 f9       	bld	r20, 0
     4d4:	62 e0       	ldi	r22, 0x02	; 2
     4d6:	81 e0       	ldi	r24, 0x01	; 1
     4d8:	0e 94 81 07 	call	0xf02	; 0xf02 <dio_vidWriteChannel>
     4dc:	c3 fb       	bst	r28, 3
     4de:	44 27       	eor	r20, r20
     4e0:	40 f9       	bld	r20, 0
     4e2:	64 e0       	ldi	r22, 0x04	; 4
     4e4:	81 e0       	ldi	r24, 0x01	; 1
     4e6:	0e 94 81 07 	call	0xf02	; 0xf02 <dio_vidWriteChannel>
     4ea:	0e 94 ce 01 	call	0x39c	; 0x39c <LCD_lcd_kick>
     4ee:	cf 91       	pop	r28
     4f0:	08 95       	ret

000004f2 <LCD_Init>:
     4f2:	41 e0       	ldi	r20, 0x01	; 1
     4f4:	63 e0       	ldi	r22, 0x03	; 3
     4f6:	80 e0       	ldi	r24, 0x00	; 0
     4f8:	0e 94 14 07 	call	0xe28	; 0xe28 <dio_vidConfigChannel>
     4fc:	41 e0       	ldi	r20, 0x01	; 1
     4fe:	62 e0       	ldi	r22, 0x02	; 2
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	0e 94 14 07 	call	0xe28	; 0xe28 <dio_vidConfigChannel>
     506:	41 e0       	ldi	r20, 0x01	; 1
     508:	69 e0       	ldi	r22, 0x09	; 9
     50a:	80 e0       	ldi	r24, 0x00	; 0
     50c:	0e 94 14 07 	call	0xe28	; 0xe28 <dio_vidConfigChannel>
     510:	41 e0       	ldi	r20, 0x01	; 1
     512:	60 e0       	ldi	r22, 0x00	; 0
     514:	81 e0       	ldi	r24, 0x01	; 1
     516:	0e 94 14 07 	call	0xe28	; 0xe28 <dio_vidConfigChannel>
     51a:	41 e0       	ldi	r20, 0x01	; 1
     51c:	61 e0       	ldi	r22, 0x01	; 1
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	0e 94 14 07 	call	0xe28	; 0xe28 <dio_vidConfigChannel>
     524:	41 e0       	ldi	r20, 0x01	; 1
     526:	62 e0       	ldi	r22, 0x02	; 2
     528:	81 e0       	ldi	r24, 0x01	; 1
     52a:	0e 94 14 07 	call	0xe28	; 0xe28 <dio_vidConfigChannel>
     52e:	41 e0       	ldi	r20, 0x01	; 1
     530:	64 e0       	ldi	r22, 0x04	; 4
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	0e 94 14 07 	call	0xe28	; 0xe28 <dio_vidConfigChannel>
     538:	81 e0       	ldi	r24, 0x01	; 1
     53a:	0e 94 e5 01 	call	0x3ca	; 0x3ca <LCD_SendCommand>
     53e:	82 e0       	ldi	r24, 0x02	; 2
     540:	0e 94 e5 01 	call	0x3ca	; 0x3ca <LCD_SendCommand>
     544:	88 e2       	ldi	r24, 0x28	; 40
     546:	0e 94 e5 01 	call	0x3ca	; 0x3ca <LCD_SendCommand>
     54a:	86 e0       	ldi	r24, 0x06	; 6
     54c:	0e 94 e5 01 	call	0x3ca	; 0x3ca <LCD_SendCommand>
     550:	8f e0       	ldi	r24, 0x0F	; 15
     552:	0e 94 e5 01 	call	0x3ca	; 0x3ca <LCD_SendCommand>
     556:	08 95       	ret

00000558 <LCD_ClearDisplay>:
     558:	81 e0       	ldi	r24, 0x01	; 1
     55a:	0e 94 e5 01 	call	0x3ca	; 0x3ca <LCD_SendCommand>
     55e:	8f e3       	ldi	r24, 0x3F	; 63
     560:	9c e9       	ldi	r25, 0x9C	; 156
     562:	01 97       	sbiw	r24, 0x01	; 1
     564:	f1 f7       	brne	.-4      	; 0x562 <LCD_ClearDisplay+0xa>
     566:	00 c0       	rjmp	.+0      	; 0x568 <LCD_ClearDisplay+0x10>
     568:	00 00       	nop
     56a:	82 e0       	ldi	r24, 0x02	; 2
     56c:	0e 94 e5 01 	call	0x3ca	; 0x3ca <LCD_SendCommand>
     570:	8f e3       	ldi	r24, 0x3F	; 63
     572:	9c e9       	ldi	r25, 0x9C	; 156
     574:	01 97       	sbiw	r24, 0x01	; 1
     576:	f1 f7       	brne	.-4      	; 0x574 <LCD_ClearDisplay+0x1c>
     578:	00 c0       	rjmp	.+0      	; 0x57a <LCD_ClearDisplay+0x22>
     57a:	00 00       	nop
     57c:	08 95       	ret

0000057e <LCD_GoToXY>:
     57e:	81 11       	cpse	r24, r1
     580:	05 c0       	rjmp	.+10     	; 0x58c <LCD_GoToXY+0xe>
     582:	80 e8       	ldi	r24, 0x80	; 128
     584:	86 0f       	add	r24, r22
     586:	0e 94 e5 01 	call	0x3ca	; 0x3ca <LCD_SendCommand>
     58a:	08 95       	ret
     58c:	81 30       	cpi	r24, 0x01	; 1
     58e:	29 f4       	brne	.+10     	; 0x59a <LCD_GoToXY+0x1c>
     590:	80 ec       	ldi	r24, 0xC0	; 192
     592:	86 0f       	add	r24, r22
     594:	0e 94 e5 01 	call	0x3ca	; 0x3ca <LCD_SendCommand>
     598:	08 95       	ret
     59a:	82 30       	cpi	r24, 0x02	; 2
     59c:	29 f4       	brne	.+10     	; 0x5a8 <LCD_GoToXY+0x2a>
     59e:	84 e9       	ldi	r24, 0x94	; 148
     5a0:	86 0f       	add	r24, r22
     5a2:	0e 94 e5 01 	call	0x3ca	; 0x3ca <LCD_SendCommand>
     5a6:	08 95       	ret
     5a8:	83 30       	cpi	r24, 0x03	; 3
     5aa:	21 f4       	brne	.+8      	; 0x5b4 <LCD_GoToXY+0x36>
     5ac:	84 ed       	ldi	r24, 0xD4	; 212
     5ae:	86 0f       	add	r24, r22
     5b0:	0e 94 e5 01 	call	0x3ca	; 0x3ca <LCD_SendCommand>
     5b4:	08 95       	ret

000005b6 <LCD_WriteString>:

}


void LCD_WriteString(char *str)
{
     5b6:	0f 93       	push	r16
     5b8:	1f 93       	push	r17
     5ba:	cf 93       	push	r28
     5bc:	8c 01       	movw	r16, r24

	for (u8 index = 0; str[index] ; index++)
     5be:	c0 e0       	ldi	r28, 0x00	; 0
     5c0:	03 c0       	rjmp	.+6      	; 0x5c8 <LCD_WriteString+0x12>
	{
		LCD_WriteData(str[index]);
     5c2:	0e 94 2f 02 	call	0x45e	; 0x45e <LCD_WriteData>


void LCD_WriteString(char *str)
{

	for (u8 index = 0; str[index] ; index++)
     5c6:	cf 5f       	subi	r28, 0xFF	; 255
     5c8:	f8 01       	movw	r30, r16
     5ca:	ec 0f       	add	r30, r28
     5cc:	f1 1d       	adc	r31, r1
     5ce:	80 81       	ld	r24, Z
     5d0:	81 11       	cpse	r24, r1
     5d2:	f7 cf       	rjmp	.-18     	; 0x5c2 <LCD_WriteString+0xc>
	{
		LCD_WriteData(str[index]);
		
	}
}
     5d4:	cf 91       	pop	r28
     5d6:	1f 91       	pop	r17
     5d8:	0f 91       	pop	r16
     5da:	08 95       	ret

000005dc <led_viInit>:

#include "led.h"
#include "led_cfg.h"

void led_viInit(void)
{
     5dc:	cf 93       	push	r28
	u8 ledIndex=0;
	for(ledIndex=0 ; ledIndex < ledsCount ; ledIndex++)
     5de:	c0 e0       	ldi	r28, 0x00	; 0
     5e0:	0e c0       	rjmp	.+28     	; 0x5fe <led_viInit+0x22>
	{
		dio_vidConfigChannel(ledsConfigurations[ledIndex].portn,ledsConfigurations[ledIndex].ledchannel,OUTPUT);
     5e2:	ec 2f       	mov	r30, r28
     5e4:	f0 e0       	ldi	r31, 0x00	; 0
     5e6:	ee 0f       	add	r30, r30
     5e8:	ff 1f       	adc	r31, r31
     5ea:	ee 0f       	add	r30, r30
     5ec:	ff 1f       	adc	r31, r31
     5ee:	e1 58       	subi	r30, 0x81	; 129
     5f0:	ff 4f       	sbci	r31, 0xFF	; 255
     5f2:	41 e0       	ldi	r20, 0x01	; 1
     5f4:	62 81       	ldd	r22, Z+2	; 0x02
     5f6:	81 81       	ldd	r24, Z+1	; 0x01
     5f8:	0e 94 14 07 	call	0xe28	; 0xe28 <dio_vidConfigChannel>
#include "led_cfg.h"

void led_viInit(void)
{
	u8 ledIndex=0;
	for(ledIndex=0 ; ledIndex < ledsCount ; ledIndex++)
     5fc:	cf 5f       	subi	r28, 0xFF	; 255
     5fe:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <ledsCount>
     602:	c8 17       	cp	r28, r24
     604:	70 f3       	brcs	.-36     	; 0x5e2 <led_viInit+0x6>
	{
		dio_vidConfigChannel(ledsConfigurations[ledIndex].portn,ledsConfigurations[ledIndex].ledchannel,OUTPUT);
	}
}
     606:	cf 91       	pop	r28
     608:	08 95       	ret

0000060a <led_viOn>:
void led_viOn(Led_t ledx)
{
     60a:	cf 93       	push	r28
     60c:	df 93       	push	r29
     60e:	d8 2f       	mov	r29, r24
	u8 ledIndex=0;
	for(ledIndex=0 ; ledIndex < ledsCount ; ledIndex++)
     610:	c0 e0       	ldi	r28, 0x00	; 0
     612:	32 c0       	rjmp	.+100    	; 0x678 <led_viOn+0x6e>
	{
		if(ledsConfigurations[ledIndex].ledn == ledx)
     614:	8c 2f       	mov	r24, r28
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	fc 01       	movw	r30, r24
     61a:	ee 0f       	add	r30, r30
     61c:	ff 1f       	adc	r31, r31
     61e:	ee 0f       	add	r30, r30
     620:	ff 1f       	adc	r31, r31
     622:	e1 58       	subi	r30, 0x81	; 129
     624:	ff 4f       	sbci	r31, 0xFF	; 255
     626:	20 81       	ld	r18, Z
     628:	2d 13       	cpse	r18, r29
     62a:	25 c0       	rjmp	.+74     	; 0x676 <led_viOn+0x6c>
		{
			if(ledsConfigurations[ledIndex].ledactive == LED_ACTIVE_HIGH)
     62c:	fc 01       	movw	r30, r24
     62e:	ee 0f       	add	r30, r30
     630:	ff 1f       	adc	r31, r31
     632:	ee 0f       	add	r30, r30
     634:	ff 1f       	adc	r31, r31
     636:	e1 58       	subi	r30, 0x81	; 129
     638:	ff 4f       	sbci	r31, 0xFF	; 255
     63a:	23 81       	ldd	r18, Z+3	; 0x03
     63c:	21 30       	cpi	r18, 0x01	; 1
     63e:	69 f4       	brne	.+26     	; 0x65a <led_viOn+0x50>
			{
				dio_vidWriteChannel(ledsConfigurations[ledIndex].portn,ledsConfigurations[ledIndex].ledchannel,STD_HIGH);
     640:	88 0f       	add	r24, r24
     642:	99 1f       	adc	r25, r25
     644:	88 0f       	add	r24, r24
     646:	99 1f       	adc	r25, r25
     648:	fc 01       	movw	r30, r24
     64a:	e1 58       	subi	r30, 0x81	; 129
     64c:	ff 4f       	sbci	r31, 0xFF	; 255
     64e:	41 e0       	ldi	r20, 0x01	; 1
     650:	62 81       	ldd	r22, Z+2	; 0x02
     652:	81 81       	ldd	r24, Z+1	; 0x01
     654:	0e 94 81 07 	call	0xf02	; 0xf02 <dio_vidWriteChannel>
     658:	0e c0       	rjmp	.+28     	; 0x676 <led_viOn+0x6c>
			}
			else if(ledsConfigurations[ledIndex].ledactive == LED_ACTIVE_LOW)
     65a:	21 11       	cpse	r18, r1
     65c:	0c c0       	rjmp	.+24     	; 0x676 <led_viOn+0x6c>
			{
				dio_vidWriteChannel(ledsConfigurations[ledIndex].portn,ledsConfigurations[ledIndex].ledchannel,STD_LOW);
     65e:	88 0f       	add	r24, r24
     660:	99 1f       	adc	r25, r25
     662:	88 0f       	add	r24, r24
     664:	99 1f       	adc	r25, r25
     666:	fc 01       	movw	r30, r24
     668:	e1 58       	subi	r30, 0x81	; 129
     66a:	ff 4f       	sbci	r31, 0xFF	; 255
     66c:	40 e0       	ldi	r20, 0x00	; 0
     66e:	62 81       	ldd	r22, Z+2	; 0x02
     670:	81 81       	ldd	r24, Z+1	; 0x01
     672:	0e 94 81 07 	call	0xf02	; 0xf02 <dio_vidWriteChannel>
	}
}
void led_viOn(Led_t ledx)
{
	u8 ledIndex=0;
	for(ledIndex=0 ; ledIndex < ledsCount ; ledIndex++)
     676:	cf 5f       	subi	r28, 0xFF	; 255
     678:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <ledsCount>
     67c:	c8 17       	cp	r28, r24
     67e:	50 f2       	brcs	.-108    	; 0x614 <led_viOn+0xa>
		}
		
	}
	
	
}
     680:	df 91       	pop	r29
     682:	cf 91       	pop	r28
     684:	08 95       	ret

00000686 <led_viOff>:
void led_viOff(Led_t ledx)
{
     686:	cf 93       	push	r28
     688:	df 93       	push	r29
     68a:	d8 2f       	mov	r29, r24
	u8 ledIndex=0;
	for(ledIndex=0 ; ledIndex < ledsCount ; ledIndex++)
     68c:	c0 e0       	ldi	r28, 0x00	; 0
     68e:	32 c0       	rjmp	.+100    	; 0x6f4 <led_viOff+0x6e>
	{
		if(ledsConfigurations[ledIndex].ledn == ledx)
     690:	8c 2f       	mov	r24, r28
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	fc 01       	movw	r30, r24
     696:	ee 0f       	add	r30, r30
     698:	ff 1f       	adc	r31, r31
     69a:	ee 0f       	add	r30, r30
     69c:	ff 1f       	adc	r31, r31
     69e:	e1 58       	subi	r30, 0x81	; 129
     6a0:	ff 4f       	sbci	r31, 0xFF	; 255
     6a2:	20 81       	ld	r18, Z
     6a4:	2d 13       	cpse	r18, r29
     6a6:	25 c0       	rjmp	.+74     	; 0x6f2 <led_viOff+0x6c>
		{
			if(ledsConfigurations[ledIndex].ledactive == LED_ACTIVE_HIGH)
     6a8:	fc 01       	movw	r30, r24
     6aa:	ee 0f       	add	r30, r30
     6ac:	ff 1f       	adc	r31, r31
     6ae:	ee 0f       	add	r30, r30
     6b0:	ff 1f       	adc	r31, r31
     6b2:	e1 58       	subi	r30, 0x81	; 129
     6b4:	ff 4f       	sbci	r31, 0xFF	; 255
     6b6:	23 81       	ldd	r18, Z+3	; 0x03
     6b8:	21 30       	cpi	r18, 0x01	; 1
     6ba:	69 f4       	brne	.+26     	; 0x6d6 <led_viOff+0x50>
			{
				dio_vidWriteChannel(ledsConfigurations[ledIndex].portn,ledsConfigurations[ledIndex].ledchannel,STD_LOW);
     6bc:	88 0f       	add	r24, r24
     6be:	99 1f       	adc	r25, r25
     6c0:	88 0f       	add	r24, r24
     6c2:	99 1f       	adc	r25, r25
     6c4:	fc 01       	movw	r30, r24
     6c6:	e1 58       	subi	r30, 0x81	; 129
     6c8:	ff 4f       	sbci	r31, 0xFF	; 255
     6ca:	40 e0       	ldi	r20, 0x00	; 0
     6cc:	62 81       	ldd	r22, Z+2	; 0x02
     6ce:	81 81       	ldd	r24, Z+1	; 0x01
     6d0:	0e 94 81 07 	call	0xf02	; 0xf02 <dio_vidWriteChannel>
     6d4:	0e c0       	rjmp	.+28     	; 0x6f2 <led_viOff+0x6c>
			}
			else if(ledsConfigurations[ledIndex].ledactive == LED_ACTIVE_LOW)
     6d6:	21 11       	cpse	r18, r1
     6d8:	0c c0       	rjmp	.+24     	; 0x6f2 <led_viOff+0x6c>
			{
				dio_vidWriteChannel(ledsConfigurations[ledIndex].portn,ledsConfigurations[ledIndex].ledchannel,STD_HIGH);
     6da:	88 0f       	add	r24, r24
     6dc:	99 1f       	adc	r25, r25
     6de:	88 0f       	add	r24, r24
     6e0:	99 1f       	adc	r25, r25
     6e2:	fc 01       	movw	r30, r24
     6e4:	e1 58       	subi	r30, 0x81	; 129
     6e6:	ff 4f       	sbci	r31, 0xFF	; 255
     6e8:	41 e0       	ldi	r20, 0x01	; 1
     6ea:	62 81       	ldd	r22, Z+2	; 0x02
     6ec:	81 81       	ldd	r24, Z+1	; 0x01
     6ee:	0e 94 81 07 	call	0xf02	; 0xf02 <dio_vidWriteChannel>
	
}
void led_viOff(Led_t ledx)
{
	u8 ledIndex=0;
	for(ledIndex=0 ; ledIndex < ledsCount ; ledIndex++)
     6f2:	cf 5f       	subi	r28, 0xFF	; 255
     6f4:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <ledsCount>
     6f8:	c8 17       	cp	r28, r24
     6fa:	50 f2       	brcs	.-108    	; 0x690 <led_viOff+0xa>
		}
		
	}
	
	
}
     6fc:	df 91       	pop	r29
     6fe:	cf 91       	pop	r28
     700:	08 95       	ret

00000702 <OLED_SendCmd>:
			EEPROM_enuRead(BaseAddress + i, &Data);
			OLED_SendChar(Data);
		}
		String++;
	}
}
     702:	68 2f       	mov	r22, r24
     704:	80 e8       	ldi	r24, 0x80	; 128
     706:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <I2C_Write>
     70a:	08 95       	ret

0000070c <OLED_SendChar>:
     70c:	68 2f       	mov	r22, r24
     70e:	80 e4       	ldi	r24, 0x40	; 64
     710:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <I2C_Write>
     714:	08 95       	ret

00000716 <OLED_vInit>:
     716:	0e 94 a0 08 	call	0x1140	; 0x1140 <I2C_vInit>
     71a:	8e ea       	ldi	r24, 0xAE	; 174
     71c:	0e 94 81 03 	call	0x702	; 0x702 <OLED_SendCmd>
     720:	85 ed       	ldi	r24, 0xD5	; 213
     722:	0e 94 81 03 	call	0x702	; 0x702 <OLED_SendCmd>
     726:	80 e8       	ldi	r24, 0x80	; 128
     728:	0e 94 81 03 	call	0x702	; 0x702 <OLED_SendCmd>
     72c:	88 ea       	ldi	r24, 0xA8	; 168
     72e:	0e 94 81 03 	call	0x702	; 0x702 <OLED_SendCmd>
     732:	8f e3       	ldi	r24, 0x3F	; 63
     734:	0e 94 81 03 	call	0x702	; 0x702 <OLED_SendCmd>
     738:	83 ed       	ldi	r24, 0xD3	; 211
     73a:	0e 94 81 03 	call	0x702	; 0x702 <OLED_SendCmd>
     73e:	80 e0       	ldi	r24, 0x00	; 0
     740:	0e 94 81 03 	call	0x702	; 0x702 <OLED_SendCmd>
     744:	80 e4       	ldi	r24, 0x40	; 64
     746:	0e 94 81 03 	call	0x702	; 0x702 <OLED_SendCmd>
     74a:	8d e8       	ldi	r24, 0x8D	; 141
     74c:	0e 94 81 03 	call	0x702	; 0x702 <OLED_SendCmd>
     750:	84 e1       	ldi	r24, 0x14	; 20
     752:	0e 94 81 03 	call	0x702	; 0x702 <OLED_SendCmd>
     756:	80 e2       	ldi	r24, 0x20	; 32
     758:	0e 94 81 03 	call	0x702	; 0x702 <OLED_SendCmd>
     75c:	80 e0       	ldi	r24, 0x00	; 0
     75e:	0e 94 81 03 	call	0x702	; 0x702 <OLED_SendCmd>
     762:	81 ea       	ldi	r24, 0xA1	; 161
     764:	0e 94 81 03 	call	0x702	; 0x702 <OLED_SendCmd>
     768:	88 ec       	ldi	r24, 0xC8	; 200
     76a:	0e 94 81 03 	call	0x702	; 0x702 <OLED_SendCmd>
     76e:	8a ed       	ldi	r24, 0xDA	; 218
     770:	0e 94 81 03 	call	0x702	; 0x702 <OLED_SendCmd>
     774:	82 e1       	ldi	r24, 0x12	; 18
     776:	0e 94 81 03 	call	0x702	; 0x702 <OLED_SendCmd>
     77a:	81 e8       	ldi	r24, 0x81	; 129
     77c:	0e 94 81 03 	call	0x702	; 0x702 <OLED_SendCmd>
     780:	8f ec       	ldi	r24, 0xCF	; 207
     782:	0e 94 81 03 	call	0x702	; 0x702 <OLED_SendCmd>
     786:	89 ed       	ldi	r24, 0xD9	; 217
     788:	0e 94 81 03 	call	0x702	; 0x702 <OLED_SendCmd>
     78c:	81 ef       	ldi	r24, 0xF1	; 241
     78e:	0e 94 81 03 	call	0x702	; 0x702 <OLED_SendCmd>
     792:	8b ed       	ldi	r24, 0xDB	; 219
     794:	0e 94 81 03 	call	0x702	; 0x702 <OLED_SendCmd>
     798:	80 e4       	ldi	r24, 0x40	; 64
     79a:	0e 94 81 03 	call	0x702	; 0x702 <OLED_SendCmd>
     79e:	84 ea       	ldi	r24, 0xA4	; 164
     7a0:	0e 94 81 03 	call	0x702	; 0x702 <OLED_SendCmd>
     7a4:	86 ea       	ldi	r24, 0xA6	; 166
     7a6:	0e 94 81 03 	call	0x702	; 0x702 <OLED_SendCmd>
     7aa:	8f ea       	ldi	r24, 0xAF	; 175
     7ac:	0e 94 81 03 	call	0x702	; 0x702 <OLED_SendCmd>
     7b0:	08 95       	ret

000007b2 <OLED_DisplayOn>:
     7b2:	8f ea       	ldi	r24, 0xAF	; 175
     7b4:	0e 94 81 03 	call	0x702	; 0x702 <OLED_SendCmd>
     7b8:	08 95       	ret

000007ba <OLED_DisplayOff>:
     7ba:	8e ea       	ldi	r24, 0xAE	; 174
     7bc:	0e 94 81 03 	call	0x702	; 0x702 <OLED_SendCmd>
     7c0:	08 95       	ret

000007c2 <OLED_Set_xy>:
     7c2:	cf 93       	push	r28
     7c4:	c6 2f       	mov	r28, r22
     7c6:	80 55       	subi	r24, 0x50	; 80
     7c8:	0e 94 81 03 	call	0x702	; 0x702 <OLED_SendCmd>
     7cc:	8c 2f       	mov	r24, r28
     7ce:	88 0f       	add	r24, r24
     7d0:	88 0f       	add	r24, r24
     7d2:	88 0f       	add	r24, r24
     7d4:	88 70       	andi	r24, 0x08	; 8
     7d6:	0e 94 81 03 	call	0x702	; 0x702 <OLED_SendCmd>
     7da:	8c 2f       	mov	r24, r28
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	96 95       	lsr	r25
     7e0:	87 95       	ror	r24
     7e2:	8f 70       	andi	r24, 0x0F	; 15
     7e4:	80 5f       	subi	r24, 0xF0	; 240
     7e6:	0e 94 81 03 	call	0x702	; 0x702 <OLED_SendCmd>
     7ea:	cf 91       	pop	r28
     7ec:	08 95       	ret

000007ee <OLED_sendStr_xy2>:

void OLED_sendStr_xy2(u8 *String, int Row, int Col)
{
     7ee:	1f 93       	push	r17
     7f0:	cf 93       	push	r28
     7f2:	df 93       	push	r29
     7f4:	ec 01       	movw	r28, r24
     7f6:	86 2f       	mov	r24, r22
	u8 Data = 0;
	OLED_Set_xy(Row, Col);
     7f8:	64 2f       	mov	r22, r20
     7fa:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <OLED_Set_xy>
	u16 BaseAddress;
	while (*String != '\0')
     7fe:	16 c0       	rjmp	.+44     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
	{
		// BaseAddress = (*String - 0x20) * 8;
		for (u8 i = 0; i < 8; i++)
		{
			// EEPROM_enuRead( BaseAddress + i, &Data);
			OLED_SendChar(myFont1[*String - 32][i]);
     800:	e8 81       	ld	r30, Y
     802:	f0 e0       	ldi	r31, 0x00	; 0
     804:	b0 97       	sbiw	r30, 0x20	; 32
     806:	ee 0f       	add	r30, r30
     808:	ff 1f       	adc	r31, r31
     80a:	ee 0f       	add	r30, r30
     80c:	ff 1f       	adc	r31, r31
     80e:	ee 0f       	add	r30, r30
     810:	ff 1f       	adc	r31, r31
     812:	ed 56       	subi	r30, 0x6D	; 109
     814:	ff 4f       	sbci	r31, 0xFF	; 255
     816:	e1 0f       	add	r30, r17
     818:	f1 1d       	adc	r31, r1
     81a:	80 81       	ld	r24, Z
     81c:	0e 94 86 03 	call	0x70c	; 0x70c <OLED_SendChar>
	OLED_Set_xy(Row, Col);
	u16 BaseAddress;
	while (*String != '\0')
	{
		// BaseAddress = (*String - 0x20) * 8;
		for (u8 i = 0; i < 8; i++)
     820:	1f 5f       	subi	r17, 0xFF	; 255
     822:	01 c0       	rjmp	.+2      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
     824:	10 e0       	ldi	r17, 0x00	; 0
     826:	18 30       	cpi	r17, 0x08	; 8
     828:	58 f3       	brcs	.-42     	; 0x800 <__DATA_REGION_LENGTH__>
		{
			// EEPROM_enuRead( BaseAddress + i, &Data);
			OLED_SendChar(myFont1[*String - 32][i]);
		}
		String++;
     82a:	21 96       	adiw	r28, 0x01	; 1
void OLED_sendStr_xy2(u8 *String, int Row, int Col)
{
	u8 Data = 0;
	OLED_Set_xy(Row, Col);
	u16 BaseAddress;
	while (*String != '\0')
     82c:	88 81       	ld	r24, Y
     82e:	81 11       	cpse	r24, r1
     830:	f9 cf       	rjmp	.-14     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
			// EEPROM_enuRead( BaseAddress + i, &Data);
			OLED_SendChar(myFont1[*String - 32][i]);
		}
		String++;
	}
}
     832:	df 91       	pop	r29
     834:	cf 91       	pop	r28
     836:	1f 91       	pop	r17
     838:	08 95       	ret

0000083a <OLED_ClearDisplay>:

void OLED_ClearDisplay(void)
{
     83a:	cf 93       	push	r28
     83c:	df 93       	push	r29
	u8 i, k;
	for (k = 0; k < 8; k++)
     83e:	d0 e0       	ldi	r29, 0x00	; 0
     840:	0d c0       	rjmp	.+26     	; 0x85c <OLED_ClearDisplay+0x22>
	{
		OLED_Set_xy(k, 0);
     842:	60 e0       	ldi	r22, 0x00	; 0
     844:	8d 2f       	mov	r24, r29
     846:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <OLED_Set_xy>
		{
			for (i = 0; i < 128; i++) // clear all COL
     84a:	c0 e0       	ldi	r28, 0x00	; 0
     84c:	04 c0       	rjmp	.+8      	; 0x856 <OLED_ClearDisplay+0x1c>
			{
				OLED_SendChar(0); // clear all COL
     84e:	80 e0       	ldi	r24, 0x00	; 0
     850:	0e 94 86 03 	call	0x70c	; 0x70c <OLED_SendChar>
	u8 i, k;
	for (k = 0; k < 8; k++)
	{
		OLED_Set_xy(k, 0);
		{
			for (i = 0; i < 128; i++) // clear all COL
     854:	cf 5f       	subi	r28, 0xFF	; 255
     856:	cc 23       	and	r28, r28
     858:	d4 f7       	brge	.-12     	; 0x84e <OLED_ClearDisplay+0x14>
}

void OLED_ClearDisplay(void)
{
	u8 i, k;
	for (k = 0; k < 8; k++)
     85a:	df 5f       	subi	r29, 0xFF	; 255
     85c:	d8 30       	cpi	r29, 0x08	; 8
     85e:	88 f3       	brcs	.-30     	; 0x842 <OLED_ClearDisplay+0x8>
			{
				OLED_SendChar(0); // clear all COL
			}
		}
	}
}
     860:	df 91       	pop	r29
     862:	cf 91       	pop	r28
     864:	08 95       	ret

00000866 <OLED_ResetDisplay>:

void OLED_ResetDisplay(void)
{
	OLED_DisplayOff();
     866:	0e 94 dd 03 	call	0x7ba	; 0x7ba <OLED_DisplayOff>
	OLED_ClearDisplay();
     86a:	0e 94 1d 04 	call	0x83a	; 0x83a <OLED_ClearDisplay>
	OLED_DisplayOn();
     86e:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <OLED_DisplayOn>
     872:	08 95       	ret

00000874 <mcrf522_write_reg>:
}

u8 getFirmwareVersion()
{
	return mcrf522_read_reg(0x37);
}
     874:	cf 93       	push	r28
     876:	df 93       	push	r29
     878:	c8 2f       	mov	r28, r24
     87a:	d6 2f       	mov	r29, r22
     87c:	40 e0       	ldi	r20, 0x00	; 0
     87e:	63 e0       	ldi	r22, 0x03	; 3
     880:	81 e0       	ldi	r24, 0x01	; 1
     882:	0e 94 81 07 	call	0xf02	; 0xf02 <dio_vidWriteChannel>
     886:	8c 2f       	mov	r24, r28
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	88 0f       	add	r24, r24
     88c:	99 1f       	adc	r25, r25
     88e:	8e 77       	andi	r24, 0x7E	; 126
     890:	0e 94 2b 09 	call	0x1256	; 0x1256 <SPI_DATA_RW>
     894:	8d 2f       	mov	r24, r29
     896:	0e 94 2b 09 	call	0x1256	; 0x1256 <SPI_DATA_RW>
     89a:	41 e0       	ldi	r20, 0x01	; 1
     89c:	63 e0       	ldi	r22, 0x03	; 3
     89e:	81 e0       	ldi	r24, 0x01	; 1
     8a0:	0e 94 81 07 	call	0xf02	; 0xf02 <dio_vidWriteChannel>
     8a4:	df 91       	pop	r29
     8a6:	cf 91       	pop	r28
     8a8:	08 95       	ret

000008aa <mcrf522_read_reg>:
     8aa:	cf 93       	push	r28
     8ac:	c8 2f       	mov	r28, r24
     8ae:	40 e0       	ldi	r20, 0x00	; 0
     8b0:	63 e0       	ldi	r22, 0x03	; 3
     8b2:	81 e0       	ldi	r24, 0x01	; 1
     8b4:	0e 94 81 07 	call	0xf02	; 0xf02 <dio_vidWriteChannel>
     8b8:	8c 2f       	mov	r24, r28
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	88 0f       	add	r24, r24
     8be:	99 1f       	adc	r25, r25
     8c0:	8e 77       	andi	r24, 0x7E	; 126
     8c2:	80 68       	ori	r24, 0x80	; 128
     8c4:	0e 94 2b 09 	call	0x1256	; 0x1256 <SPI_DATA_RW>
     8c8:	80 e0       	ldi	r24, 0x00	; 0
     8ca:	0e 94 2b 09 	call	0x1256	; 0x1256 <SPI_DATA_RW>
     8ce:	c8 2f       	mov	r28, r24
     8d0:	41 e0       	ldi	r20, 0x01	; 1
     8d2:	63 e0       	ldi	r22, 0x03	; 3
     8d4:	81 e0       	ldi	r24, 0x01	; 1
     8d6:	0e 94 81 07 	call	0xf02	; 0xf02 <dio_vidWriteChannel>
     8da:	8c 2f       	mov	r24, r28
     8dc:	cf 91       	pop	r28
     8de:	08 95       	ret

000008e0 <mcrf522_clear_bit_mask>:
     8e0:	cf 93       	push	r28
     8e2:	df 93       	push	r29
     8e4:	d8 2f       	mov	r29, r24
     8e6:	c6 2f       	mov	r28, r22
     8e8:	0e 94 55 04 	call	0x8aa	; 0x8aa <mcrf522_read_reg>
     8ec:	c0 95       	com	r28
     8ee:	6c 2f       	mov	r22, r28
     8f0:	68 23       	and	r22, r24
     8f2:	8d 2f       	mov	r24, r29
     8f4:	0e 94 3a 04 	call	0x874	; 0x874 <mcrf522_write_reg>
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	08 95       	ret

000008fe <mcrf522_set_bit_mask>:
     8fe:	cf 93       	push	r28
     900:	df 93       	push	r29
     902:	d8 2f       	mov	r29, r24
     904:	c6 2f       	mov	r28, r22
     906:	0e 94 55 04 	call	0x8aa	; 0x8aa <mcrf522_read_reg>
     90a:	68 2f       	mov	r22, r24
     90c:	6c 2b       	or	r22, r28
     90e:	8d 2f       	mov	r24, r29
     910:	0e 94 3a 04 	call	0x874	; 0x874 <mcrf522_write_reg>
     914:	df 91       	pop	r29
     916:	cf 91       	pop	r28
     918:	08 95       	ret

0000091a <mcrf522_antenna_on>:
     91a:	84 e1       	ldi	r24, 0x14	; 20
     91c:	0e 94 55 04 	call	0x8aa	; 0x8aa <mcrf522_read_reg>
     920:	98 2f       	mov	r25, r24
     922:	93 70       	andi	r25, 0x03	; 3
     924:	29 f4       	brne	.+10     	; 0x930 <mcrf522_antenna_on+0x16>
     926:	68 2f       	mov	r22, r24
     928:	63 60       	ori	r22, 0x03	; 3
     92a:	84 e1       	ldi	r24, 0x14	; 20
     92c:	0e 94 3a 04 	call	0x874	; 0x874 <mcrf522_write_reg>
     930:	08 95       	ret

00000932 <mcrf522_init>:
     932:	60 e8       	ldi	r22, 0x80	; 128
     934:	8a e2       	ldi	r24, 0x2A	; 42
     936:	0e 94 3a 04 	call	0x874	; 0x874 <mcrf522_write_reg>
     93a:	6a e9       	ldi	r22, 0x9A	; 154
     93c:	8b e2       	ldi	r24, 0x2B	; 43
     93e:	0e 94 3a 04 	call	0x874	; 0x874 <mcrf522_write_reg>
     942:	63 e0       	ldi	r22, 0x03	; 3
     944:	8c e2       	ldi	r24, 0x2C	; 44
     946:	0e 94 3a 04 	call	0x874	; 0x874 <mcrf522_write_reg>
     94a:	68 ee       	ldi	r22, 0xE8	; 232
     94c:	8d e2       	ldi	r24, 0x2D	; 45
     94e:	0e 94 3a 04 	call	0x874	; 0x874 <mcrf522_write_reg>
     952:	60 e4       	ldi	r22, 0x40	; 64
     954:	85 e1       	ldi	r24, 0x15	; 21
     956:	0e 94 3a 04 	call	0x874	; 0x874 <mcrf522_write_reg>
     95a:	6d e3       	ldi	r22, 0x3D	; 61
     95c:	81 e1       	ldi	r24, 0x11	; 17
     95e:	0e 94 3a 04 	call	0x874	; 0x874 <mcrf522_write_reg>
     962:	0e 94 8d 04 	call	0x91a	; 0x91a <mcrf522_antenna_on>
     966:	08 95       	ret

00000968 <Communicate>:
     968:	9f 92       	push	r9
     96a:	af 92       	push	r10
     96c:	bf 92       	push	r11
     96e:	cf 92       	push	r12
     970:	df 92       	push	r13
     972:	ef 92       	push	r14
     974:	ff 92       	push	r15
     976:	0f 93       	push	r16
     978:	1f 93       	push	r17
     97a:	cf 93       	push	r28
     97c:	df 93       	push	r29
     97e:	98 2e       	mov	r9, r24
     980:	5b 01       	movw	r10, r22
     982:	e4 2e       	mov	r14, r20
     984:	69 01       	movw	r12, r18
     986:	8c e0       	ldi	r24, 0x0C	; 12
     988:	98 16       	cp	r9, r24
     98a:	19 f0       	breq	.+6      	; 0x992 <Communicate+0x2a>
     98c:	f1 2c       	mov	r15, r1
     98e:	d0 e0       	ldi	r29, 0x00	; 0
     990:	05 c0       	rjmp	.+10     	; 0x99c <Communicate+0x34>
     992:	0f 2e       	mov	r0, r31
     994:	f7 e7       	ldi	r31, 0x77	; 119
     996:	ff 2e       	mov	r15, r31
     998:	f0 2d       	mov	r31, r0
     99a:	d0 e3       	ldi	r29, 0x30	; 48
     99c:	60 e0       	ldi	r22, 0x00	; 0
     99e:	81 e0       	ldi	r24, 0x01	; 1
     9a0:	0e 94 3a 04 	call	0x874	; 0x874 <mcrf522_write_reg>
     9a4:	6f 2d       	mov	r22, r15
     9a6:	60 68       	ori	r22, 0x80	; 128
     9a8:	82 e0       	ldi	r24, 0x02	; 2
     9aa:	0e 94 3a 04 	call	0x874	; 0x874 <mcrf522_write_reg>
     9ae:	60 e8       	ldi	r22, 0x80	; 128
     9b0:	84 e0       	ldi	r24, 0x04	; 4
     9b2:	0e 94 70 04 	call	0x8e0	; 0x8e0 <mcrf522_clear_bit_mask>
     9b6:	60 e8       	ldi	r22, 0x80	; 128
     9b8:	8a e0       	ldi	r24, 0x0A	; 10
     9ba:	0e 94 7f 04 	call	0x8fe	; 0x8fe <mcrf522_set_bit_mask>
     9be:	60 e0       	ldi	r22, 0x00	; 0
     9c0:	81 e0       	ldi	r24, 0x01	; 1
     9c2:	0e 94 3a 04 	call	0x874	; 0x874 <mcrf522_write_reg>
     9c6:	f1 2c       	mov	r15, r1
     9c8:	08 c0       	rjmp	.+16     	; 0x9da <Communicate+0x72>
     9ca:	f5 01       	movw	r30, r10
     9cc:	ef 0d       	add	r30, r15
     9ce:	f1 1d       	adc	r31, r1
     9d0:	60 81       	ld	r22, Z
     9d2:	89 e0       	ldi	r24, 0x09	; 9
     9d4:	0e 94 3a 04 	call	0x874	; 0x874 <mcrf522_write_reg>
     9d8:	f3 94       	inc	r15
     9da:	fe 14       	cp	r15, r14
     9dc:	b0 f3       	brcs	.-20     	; 0x9ca <Communicate+0x62>
     9de:	69 2d       	mov	r22, r9
     9e0:	81 e0       	ldi	r24, 0x01	; 1
     9e2:	0e 94 3a 04 	call	0x874	; 0x874 <mcrf522_write_reg>
     9e6:	ec e0       	ldi	r30, 0x0C	; 12
     9e8:	9e 12       	cpse	r9, r30
     9ea:	04 c0       	rjmp	.+8      	; 0x9f4 <Communicate+0x8c>
     9ec:	60 e8       	ldi	r22, 0x80	; 128
     9ee:	8d e0       	ldi	r24, 0x0D	; 13
     9f0:	0e 94 7f 04 	call	0x8fe	; 0x8fe <mcrf522_set_bit_mask>
     9f4:	0f 2e       	mov	r0, r31
     9f6:	f0 ed       	ldi	r31, 0xD0	; 208
     9f8:	ef 2e       	mov	r14, r31
     9fa:	f7 e0       	ldi	r31, 0x07	; 7
     9fc:	ff 2e       	mov	r15, r31
     9fe:	f0 2d       	mov	r31, r0
     a00:	0c c0       	rjmp	.+24     	; 0xa1a <Communicate+0xb2>
     a02:	84 e0       	ldi	r24, 0x04	; 4
     a04:	0e 94 55 04 	call	0x8aa	; 0x8aa <mcrf522_read_reg>
     a08:	c8 2f       	mov	r28, r24
     a0a:	9d 2f       	mov	r25, r29
     a0c:	98 23       	and	r25, r24
     a0e:	41 f4       	brne	.+16     	; 0xa20 <Communicate+0xb8>
     a10:	80 fd       	sbrc	r24, 0
     a12:	30 c0       	rjmp	.+96     	; 0xa74 <Communicate+0x10c>
     a14:	f1 e0       	ldi	r31, 0x01	; 1
     a16:	ef 1a       	sub	r14, r31
     a18:	f1 08       	sbc	r15, r1
     a1a:	1e 14       	cp	r1, r14
     a1c:	1f 04       	cpc	r1, r15
     a1e:	8c f3       	brlt	.-30     	; 0xa02 <Communicate+0x9a>
     a20:	86 e0       	ldi	r24, 0x06	; 6
     a22:	0e 94 55 04 	call	0x8aa	; 0x8aa <mcrf522_read_reg>
     a26:	98 2f       	mov	r25, r24
     a28:	98 70       	andi	r25, 0x08	; 8
     a2a:	83 fd       	sbrc	r24, 3
     a2c:	1e c0       	rjmp	.+60     	; 0xa6a <Communicate+0x102>
     a2e:	cc 23       	and	r28, r28
     a30:	09 f1       	breq	.+66     	; 0xa74 <Communicate+0x10c>
     a32:	c1 14       	cp	r12, r1
     a34:	d1 04       	cpc	r13, r1
     a36:	d9 f0       	breq	.+54     	; 0xa6e <Communicate+0x106>
     a38:	01 15       	cp	r16, r1
     a3a:	11 05       	cpc	r17, r1
     a3c:	d1 f0       	breq	.+52     	; 0xa72 <Communicate+0x10a>
     a3e:	8a e0       	ldi	r24, 0x0A	; 10
     a40:	0e 94 55 04 	call	0x8aa	; 0x8aa <mcrf522_read_reg>
     a44:	f8 01       	movw	r30, r16
     a46:	80 83       	st	Z, r24
     a48:	c0 e0       	ldi	r28, 0x00	; 0
     a4a:	09 c0       	rjmp	.+18     	; 0xa5e <Communicate+0xf6>
     a4c:	76 01       	movw	r14, r12
     a4e:	ec 0e       	add	r14, r28
     a50:	f1 1c       	adc	r15, r1
     a52:	89 e0       	ldi	r24, 0x09	; 9
     a54:	0e 94 55 04 	call	0x8aa	; 0x8aa <mcrf522_read_reg>
     a58:	f7 01       	movw	r30, r14
     a5a:	80 83       	st	Z, r24
     a5c:	cf 5f       	subi	r28, 0xFF	; 255
     a5e:	f8 01       	movw	r30, r16
     a60:	80 81       	ld	r24, Z
     a62:	c8 17       	cp	r28, r24
     a64:	98 f3       	brcs	.-26     	; 0xa4c <Communicate+0xe4>
     a66:	91 e0       	ldi	r25, 0x01	; 1
     a68:	05 c0       	rjmp	.+10     	; 0xa74 <Communicate+0x10c>
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	03 c0       	rjmp	.+6      	; 0xa74 <Communicate+0x10c>
     a6e:	91 e0       	ldi	r25, 0x01	; 1
     a70:	01 c0       	rjmp	.+2      	; 0xa74 <Communicate+0x10c>
     a72:	91 e0       	ldi	r25, 0x01	; 1
     a74:	89 2f       	mov	r24, r25
     a76:	df 91       	pop	r29
     a78:	cf 91       	pop	r28
     a7a:	1f 91       	pop	r17
     a7c:	0f 91       	pop	r16
     a7e:	ff 90       	pop	r15
     a80:	ef 90       	pop	r14
     a82:	df 90       	pop	r13
     a84:	cf 90       	pop	r12
     a86:	bf 90       	pop	r11
     a88:	af 90       	pop	r10
     a8a:	9f 90       	pop	r9
     a8c:	08 95       	ret

00000a8e <DetectCard>:
     a8e:	0f 93       	push	r16
     a90:	1f 93       	push	r17
     a92:	cf 93       	push	r28
     a94:	df 93       	push	r29
     a96:	00 d0       	rcall	.+0      	; 0xa98 <DetectCard+0xa>
     a98:	00 d0       	rcall	.+0      	; 0xa9a <DetectCard+0xc>
     a9a:	cd b7       	in	r28, 0x3d	; 61
     a9c:	de b7       	in	r29, 0x3e	; 62
     a9e:	82 e0       	ldi	r24, 0x02	; 2
     aa0:	8b 83       	std	Y+3, r24	; 0x03
     aa2:	60 e8       	ldi	r22, 0x80	; 128
     aa4:	8e e0       	ldi	r24, 0x0E	; 14
     aa6:	0e 94 70 04 	call	0x8e0	; 0x8e0 <mcrf522_clear_bit_mask>
     aaa:	82 e5       	ldi	r24, 0x52	; 82
     aac:	8c 83       	std	Y+4, r24	; 0x04
     aae:	67 e0       	ldi	r22, 0x07	; 7
     ab0:	8d e0       	ldi	r24, 0x0D	; 13
     ab2:	0e 94 3a 04 	call	0x874	; 0x874 <mcrf522_write_reg>
     ab6:	8e 01       	movw	r16, r28
     ab8:	0d 5f       	subi	r16, 0xFD	; 253
     aba:	1f 4f       	sbci	r17, 0xFF	; 255
     abc:	9e 01       	movw	r18, r28
     abe:	2f 5f       	subi	r18, 0xFF	; 255
     ac0:	3f 4f       	sbci	r19, 0xFF	; 255
     ac2:	41 e0       	ldi	r20, 0x01	; 1
     ac4:	be 01       	movw	r22, r28
     ac6:	6c 5f       	subi	r22, 0xFC	; 252
     ac8:	7f 4f       	sbci	r23, 0xFF	; 255
     aca:	8c e0       	ldi	r24, 0x0C	; 12
     acc:	0e 94 b4 04 	call	0x968	; 0x968 <Communicate>
     ad0:	88 23       	and	r24, r24
     ad2:	31 f0       	breq	.+12     	; 0xae0 <DetectCard+0x52>
     ad4:	8b 81       	ldd	r24, Y+3	; 0x03
     ad6:	82 30       	cpi	r24, 0x02	; 2
     ad8:	11 f0       	breq	.+4      	; 0xade <DetectCard+0x50>
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	01 c0       	rjmp	.+2      	; 0xae0 <DetectCard+0x52>
     ade:	81 e0       	ldi	r24, 0x01	; 1
     ae0:	0f 90       	pop	r0
     ae2:	0f 90       	pop	r0
     ae4:	0f 90       	pop	r0
     ae6:	0f 90       	pop	r0
     ae8:	df 91       	pop	r29
     aea:	cf 91       	pop	r28
     aec:	1f 91       	pop	r17
     aee:	0f 91       	pop	r16
     af0:	08 95       	ret

00000af2 <GetCardId>:

u8 GetCardId(u8 *uid)
{
     af2:	ef 92       	push	r14
     af4:	ff 92       	push	r15
     af6:	0f 93       	push	r16
     af8:	1f 93       	push	r17
     afa:	cf 93       	push	r28
     afc:	df 93       	push	r29
     afe:	cd b7       	in	r28, 0x3d	; 61
     b00:	de b7       	in	r29, 0x3e	; 62
     b02:	61 97       	sbiw	r28, 0x11	; 17
     b04:	0f b6       	in	r0, 0x3f	; 63
     b06:	f8 94       	cli
     b08:	de bf       	out	0x3e, r29	; 62
     b0a:	0f be       	out	0x3f, r0	; 63
     b0c:	cd bf       	out	0x3d, r28	; 61
     b0e:	7c 01       	movw	r14, r24
	u8 buffer[16];
	u8 backLen = 16;
     b10:	80 e1       	ldi	r24, 0x10	; 16
     b12:	89 8b       	std	Y+17, r24	; 0x11
	// all received bits will be cleared after a collision
	mcrf522_clear_bit_mask(MCRF522_REG_COLL, 0x80);
     b14:	60 e8       	ldi	r22, 0x80	; 128
     b16:	8e e0       	ldi	r24, 0x0E	; 14
     b18:	0e 94 70 04 	call	0x8e0	; 0x8e0 <mcrf522_clear_bit_mask>
	// Put MCRF522 in idle mode
	mcrf522_write_reg(MCRF522_REG_COMMAND, MCRF522_CMD_IDLE);
     b1c:	60 e0       	ldi	r22, 0x00	; 0
     b1e:	81 e0       	ldi	r24, 0x01	; 1
     b20:	0e 94 3a 04 	call	0x874	; 0x874 <mcrf522_write_reg>
	mcrf522_write_reg(MCRF522_REG_BIT_FRAMING, 0);
     b24:	60 e0       	ldi	r22, 0x00	; 0
     b26:	8d e0       	ldi	r24, 0x0D	; 13
     b28:	0e 94 3a 04 	call	0x874	; 0x874 <mcrf522_write_reg>
	buffer[0] = MCRF522_SELECT_TAG;
     b2c:	83 e9       	ldi	r24, 0x93	; 147
     b2e:	89 83       	std	Y+1, r24	; 0x01
	buffer[1] = MCRF522_REQ_COMMAND;
     b30:	80 e2       	ldi	r24, 0x20	; 32
     b32:	8a 83       	std	Y+2, r24	; 0x02
	if (!Communicate(MCRF522_CMD_TRANSCEIVE, buffer, (u8)2, buffer, &backLen))
     b34:	8e 01       	movw	r16, r28
     b36:	0f 5e       	subi	r16, 0xEF	; 239
     b38:	1f 4f       	sbci	r17, 0xFF	; 255
     b3a:	9e 01       	movw	r18, r28
     b3c:	2f 5f       	subi	r18, 0xFF	; 255
     b3e:	3f 4f       	sbci	r19, 0xFF	; 255
     b40:	42 e0       	ldi	r20, 0x02	; 2
     b42:	b9 01       	movw	r22, r18
     b44:	8c e0       	ldi	r24, 0x0C	; 12
     b46:	0e 94 b4 04 	call	0x968	; 0x968 <Communicate>
     b4a:	88 23       	and	r24, r24
     b4c:	a9 f0       	breq	.+42     	; 0xb78 <GetCardId+0x86>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	0e c0       	rjmp	.+28     	; 0xb6e <GetCardId+0x7c>
	{
		return 0;
	}
	for (u8 i = 0; i < 4; i++)
	{
		uid[i] = buffer[i];
     b52:	82 2f       	mov	r24, r18
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	f7 01       	movw	r30, r14
     b58:	e8 0f       	add	r30, r24
     b5a:	f9 1f       	adc	r31, r25
     b5c:	a1 e0       	ldi	r26, 0x01	; 1
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	ac 0f       	add	r26, r28
     b62:	bd 1f       	adc	r27, r29
     b64:	a8 0f       	add	r26, r24
     b66:	b9 1f       	adc	r27, r25
     b68:	8c 91       	ld	r24, X
     b6a:	80 83       	st	Z, r24
	buffer[1] = MCRF522_REQ_COMMAND;
	if (!Communicate(MCRF522_CMD_TRANSCEIVE, buffer, (u8)2, buffer, &backLen))
	{
		return 0;
	}
	for (u8 i = 0; i < 4; i++)
     b6c:	2f 5f       	subi	r18, 0xFF	; 255
     b6e:	24 30       	cpi	r18, 0x04	; 4
     b70:	80 f3       	brcs	.-32     	; 0xb52 <GetCardId+0x60>
	{
		uid[i] = buffer[i];
	}
	uid[4] = '\0';
     b72:	f7 01       	movw	r30, r14
     b74:	14 82       	std	Z+4, r1	; 0x04
	return 1;
     b76:	81 e0       	ldi	r24, 0x01	; 1
}
     b78:	61 96       	adiw	r28, 0x11	; 17
     b7a:	0f b6       	in	r0, 0x3f	; 63
     b7c:	f8 94       	cli
     b7e:	de bf       	out	0x3e, r29	; 62
     b80:	0f be       	out	0x3f, r0	; 63
     b82:	cd bf       	out	0x3d, r28	; 61
     b84:	df 91       	pop	r29
     b86:	cf 91       	pop	r28
     b88:	1f 91       	pop	r17
     b8a:	0f 91       	pop	r16
     b8c:	ff 90       	pop	r15
     b8e:	ef 90       	pop	r14
     b90:	08 95       	ret

00000b92 <SERVO_voidGotoAngle>:
}

void SERVO_voidGotoAngle(s8 angle)
{
	u16 duty = 0;
	if ((angle <= 90) && (angle > 0))
     b92:	9f ef       	ldi	r25, 0xFF	; 255
     b94:	98 0f       	add	r25, r24
     b96:	9a 35       	cpi	r25, 0x5A	; 90
     b98:	50 f5       	brcc	.+84     	; 0xbee <SERVO_voidGotoAngle+0x5c>
	{
		duty = 120 - (50 - ((f32)(5 * angle) / 9.0));
     b9a:	08 2e       	mov	r0, r24
     b9c:	00 0c       	add	r0, r0
     b9e:	99 0b       	sbc	r25, r25
     ba0:	bc 01       	movw	r22, r24
     ba2:	66 0f       	add	r22, r22
     ba4:	77 1f       	adc	r23, r23
     ba6:	66 0f       	add	r22, r22
     ba8:	77 1f       	adc	r23, r23
     baa:	68 0f       	add	r22, r24
     bac:	79 1f       	adc	r23, r25
     bae:	07 2e       	mov	r0, r23
     bb0:	00 0c       	add	r0, r0
     bb2:	88 0b       	sbc	r24, r24
     bb4:	99 0b       	sbc	r25, r25
     bb6:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <__floatsisf>
     bba:	20 e0       	ldi	r18, 0x00	; 0
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	40 e1       	ldi	r20, 0x10	; 16
     bc0:	51 e4       	ldi	r21, 0x41	; 65
     bc2:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <__divsf3>
     bc6:	9b 01       	movw	r18, r22
     bc8:	ac 01       	movw	r20, r24
     bca:	60 e0       	ldi	r22, 0x00	; 0
     bcc:	70 e0       	ldi	r23, 0x00	; 0
     bce:	88 e4       	ldi	r24, 0x48	; 72
     bd0:	92 e4       	ldi	r25, 0x42	; 66
     bd2:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <__subsf3>
     bd6:	9b 01       	movw	r18, r22
     bd8:	ac 01       	movw	r20, r24
     bda:	60 e0       	ldi	r22, 0x00	; 0
     bdc:	70 e0       	ldi	r23, 0x00	; 0
     bde:	80 ef       	ldi	r24, 0xF0	; 240
     be0:	92 e4       	ldi	r25, 0x42	; 66
     be2:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <__subsf3>
     be6:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <__fixunssfsi>
     bea:	cb 01       	movw	r24, r22
     bec:	18 c0       	rjmp	.+48     	; 0xc1e <SERVO_voidGotoAngle+0x8c>
	}
	else if ((angle < 0) && (angle >= -90))
     bee:	9a e5       	ldi	r25, 0x5A	; 90
     bf0:	98 0f       	add	r25, r24
     bf2:	9a 35       	cpi	r25, 0x5A	; 90
     bf4:	68 f4       	brcc	.+26     	; 0xc10 <SERVO_voidGotoAngle+0x7e>
	{
		duty = angle / 2 + 70;
     bf6:	68 2f       	mov	r22, r24
     bf8:	88 23       	and	r24, r24
     bfa:	14 f4       	brge	.+4      	; 0xc00 <SERVO_voidGotoAngle+0x6e>
     bfc:	61 e0       	ldi	r22, 0x01	; 1
     bfe:	68 0f       	add	r22, r24
     c00:	65 95       	asr	r22
     c02:	06 2e       	mov	r0, r22
     c04:	00 0c       	add	r0, r0
     c06:	77 0b       	sbc	r23, r23
     c08:	cb 01       	movw	r24, r22
     c0a:	8a 5b       	subi	r24, 0xBA	; 186
     c0c:	9f 4f       	sbci	r25, 0xFF	; 255
     c0e:	07 c0       	rjmp	.+14     	; 0xc1e <SERVO_voidGotoAngle+0x8c>
	}
	else if (angle == 0)
     c10:	88 23       	and	r24, r24
     c12:	19 f0       	breq	.+6      	; 0xc1a <SERVO_voidGotoAngle+0x88>
	SERVO_voidGotoAngle(0);
}

void SERVO_voidGotoAngle(s8 angle)
{
	u16 duty = 0;
     c14:	80 e0       	ldi	r24, 0x00	; 0
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	02 c0       	rjmp	.+4      	; 0xc1e <SERVO_voidGotoAngle+0x8c>
	{
		duty = angle / 2 + 70;
	}
	else if (angle == 0)
	{
		duty = 70;
     c1a:	86 e4       	ldi	r24, 0x46	; 70
     c1c:	90 e0       	ldi	r25, 0x00	; 0
	}

	PWM1_voidSetDuty_Channel_A(duty);
     c1e:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <PWM1_voidSetDuty_Channel_A>
	PWM1_voidStart();
     c22:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <PWM1_voidStart>
     c26:	08 95       	ret

00000c28 <SERVO_voidInit>:
#include "../SERVICES/PWM1/pwm1_interface.h"
#include "servo.h"

void SERVO_voidInit(void)
{
	PWM1_voidInit_Channel_A();
     c28:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <PWM1_voidInit_Channel_A>
	SERVO_voidGotoAngle(0);
     c2c:	80 e0       	ldi	r24, 0x00	; 0
     c2e:	0e 94 c9 05 	call	0xb92	; 0xb92 <SERVO_voidGotoAngle>
     c32:	08 95       	ret

00000c34 <US_T2_OVF_CallBack>:
static volatile u16 US_Ton = 0;

void US_T2_OVF_CallBack()
{

    US_T2_OVF++;
     c34:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <US_T2_OVF>
     c38:	90 91 2b 04 	lds	r25, 0x042B	; 0x80042b <US_T2_OVF+0x1>
     c3c:	01 96       	adiw	r24, 0x01	; 1
     c3e:	90 93 2b 04 	sts	0x042B, r25	; 0x80042b <US_T2_OVF+0x1>
     c42:	80 93 2a 04 	sts	0x042A, r24	; 0x80042a <US_T2_OVF>
     c46:	08 95       	ret

00000c48 <US_EXTI_CallBack>:
}

void US_EXTI_CallBack()
{
     c48:	cf 93       	push	r28
     c4a:	df 93       	push	r29

    if (US_Flag == 0)
     c4c:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <US_Flag>
     c50:	81 11       	cpse	r24, r1
     c52:	0f c0       	rjmp	.+30     	; 0xc72 <US_EXTI_CallBack+0x2a>
    {
        TCNT2 = 0;
     c54:	14 bc       	out	0x24, r1	; 36
        US_T2_OVF = 0;
     c56:	10 92 2b 04 	sts	0x042B, r1	; 0x80042b <US_T2_OVF+0x1>
     c5a:	10 92 2a 04 	sts	0x042A, r1	; 0x80042a <US_T2_OVF>
        // US_Ton = 0;

        T2_voidStart();
     c5e:	0e 94 b5 0b 	call	0x176a	; 0x176a <T2_voidStart>
        EXTI_Init(EXTI_0, FALLING_EDGE);
     c62:	62 e0       	ldi	r22, 0x02	; 2
     c64:	80 e0       	ldi	r24, 0x00	; 0
     c66:	0e 94 ee 07 	call	0xfdc	; 0xfdc <EXTI_Init>

        US_Flag = 1;
     c6a:	81 e0       	ldi	r24, 0x01	; 1
     c6c:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <US_Flag>
     c70:	45 c0       	rjmp	.+138    	; 0xcfc <US_EXTI_CallBack+0xb4>
    }
    else if (US_Flag == 1)
     c72:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <US_Flag>
     c76:	81 30       	cpi	r24, 0x01	; 1
     c78:	09 f0       	breq	.+2      	; 0xc7c <US_EXTI_CallBack+0x34>
     c7a:	40 c0       	rjmp	.+128    	; 0xcfc <US_EXTI_CallBack+0xb4>
    {

        US_Ton = (TCNT2 + US_T2_OVF * 256) * T2_TICK_TIME;
     c7c:	24 b5       	in	r18, 0x24	; 36
     c7e:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <US_T2_OVF>
     c82:	90 91 2b 04 	lds	r25, 0x042B	; 0x80042b <US_T2_OVF+0x1>
     c86:	98 2f       	mov	r25, r24
     c88:	88 27       	eor	r24, r24
     c8a:	82 0f       	add	r24, r18
     c8c:	91 1d       	adc	r25, r1
     c8e:	82 95       	swap	r24
     c90:	92 95       	swap	r25
     c92:	90 7f       	andi	r25, 0xF0	; 240
     c94:	98 27       	eor	r25, r24
     c96:	80 7f       	andi	r24, 0xF0	; 240
     c98:	98 27       	eor	r25, r24
     c9a:	90 93 27 04 	sts	0x0427, r25	; 0x800427 <__data_end+0x1>
     c9e:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__data_end>

        US_arrChannels[G_US_channel].readingDistance = US_Ton / 58.0;
     ca2:	c0 91 28 04 	lds	r28, 0x0428	; 0x800428 <G_US_channel>
     ca6:	d0 e0       	ldi	r29, 0x00	; 0
     ca8:	60 91 26 04 	lds	r22, 0x0426	; 0x800426 <__data_end>
     cac:	70 91 27 04 	lds	r23, 0x0427	; 0x800427 <__data_end+0x1>
     cb0:	80 e0       	ldi	r24, 0x00	; 0
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <__floatunsisf>
     cb8:	20 e0       	ldi	r18, 0x00	; 0
     cba:	30 e0       	ldi	r19, 0x00	; 0
     cbc:	48 e6       	ldi	r20, 0x68	; 104
     cbe:	52 e4       	ldi	r21, 0x42	; 66
     cc0:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <__divsf3>
     cc4:	fe 01       	movw	r30, r28
     cc6:	ee 0f       	add	r30, r30
     cc8:	ff 1f       	adc	r31, r31
     cca:	ee 0f       	add	r30, r30
     ccc:	ff 1f       	adc	r31, r31
     cce:	ee 0f       	add	r30, r30
     cd0:	ff 1f       	adc	r31, r31
     cd2:	ec 1b       	sub	r30, r28
     cd4:	fd 0b       	sbc	r31, r29
     cd6:	e4 57       	subi	r30, 0x74	; 116
     cd8:	fc 4f       	sbci	r31, 0xFC	; 252
     cda:	63 83       	std	Z+3, r22	; 0x03
     cdc:	74 83       	std	Z+4, r23	; 0x04
     cde:	85 83       	std	Z+5, r24	; 0x05
     ce0:	96 83       	std	Z+6, r25	; 0x06

        US_T2_OVF = 0;
     ce2:	10 92 2b 04 	sts	0x042B, r1	; 0x80042b <US_T2_OVF+0x1>
     ce6:	10 92 2a 04 	sts	0x042A, r1	; 0x80042a <US_T2_OVF>
        TCNT2 = 0;
     cea:	14 bc       	out	0x24, r1	; 36

        EXTI_Init(EXTI_0, RISINING_EDGE);
     cec:	63 e0       	ldi	r22, 0x03	; 3
     cee:	80 e0       	ldi	r24, 0x00	; 0
     cf0:	0e 94 ee 07 	call	0xfdc	; 0xfdc <EXTI_Init>
        T2_voidStop();
     cf4:	0e 94 bc 0b 	call	0x1778	; 0x1778 <T2_voidStop>

        US_Flag = 0;
     cf8:	10 92 29 04 	sts	0x0429, r1	; 0x800429 <US_Flag>
    }
}
     cfc:	df 91       	pop	r29
     cfe:	cf 91       	pop	r28
     d00:	08 95       	ret

00000d02 <US_voidInit>:

void US_voidInit()
{
     d02:	cf 93       	push	r28
    /* init trig pin as output */
    u8 US_index = 0;
    for (US_index = 0; US_index < US_countChannels; US_index++)
     d04:	c0 e0       	ldi	r28, 0x00	; 0
     d06:	13 c0       	rjmp	.+38     	; 0xd2e <US_voidInit+0x2c>
    {
        dio_vidConfigChannel(US_arrChannels[US_index].TRIG_PORT_Num,
     d08:	8c 2f       	mov	r24, r28
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	fc 01       	movw	r30, r24
     d0e:	ee 0f       	add	r30, r30
     d10:	ff 1f       	adc	r31, r31
     d12:	ee 0f       	add	r30, r30
     d14:	ff 1f       	adc	r31, r31
     d16:	ee 0f       	add	r30, r30
     d18:	ff 1f       	adc	r31, r31
     d1a:	e8 1b       	sub	r30, r24
     d1c:	f9 0b       	sbc	r31, r25
     d1e:	e4 57       	subi	r30, 0x74	; 116
     d20:	fc 4f       	sbci	r31, 0xFC	; 252
     d22:	41 e0       	ldi	r20, 0x01	; 1
     d24:	62 81       	ldd	r22, Z+2	; 0x02
     d26:	81 81       	ldd	r24, Z+1	; 0x01
     d28:	0e 94 14 07 	call	0xe28	; 0xe28 <dio_vidConfigChannel>

void US_voidInit()
{
    /* init trig pin as output */
    u8 US_index = 0;
    for (US_index = 0; US_index < US_countChannels; US_index++)
     d2c:	cf 5f       	subi	r28, 0xFF	; 255
     d2e:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <US_countChannels>
     d32:	c8 17       	cp	r28, r24
     d34:	48 f3       	brcs	.-46     	; 0xd08 <US_voidInit+0x6>
        dio_vidConfigChannel(US_arrChannels[US_index].TRIG_PORT_Num,
                             US_arrChannels[US_index].TRIG_PIN_Num, OUTPUT);
    }

    /* init T2 */
    T2_voidInit();
     d36:	0e 94 a8 0b 	call	0x1750	; 0x1750 <T2_voidInit>
    /* enable ovf interrupt*/
    GIE_ENABLE();
     d3a:	8f b7       	in	r24, 0x3f	; 63
     d3c:	80 68       	ori	r24, 0x80	; 128
     d3e:	8f bf       	out	0x3f, r24	; 63
    T2_voidSetCallbackOV(US_T2_OVF_CallBack);
     d40:	8a e1       	ldi	r24, 0x1A	; 26
     d42:	96 e0       	ldi	r25, 0x06	; 6
     d44:	0e 94 c0 0b 	call	0x1780	; 0x1780 <T2_voidSetCallbackOV>
    T2_voidEnableInteruptOV();
     d48:	0e 94 b1 0b 	call	0x1762	; 0x1762 <T2_voidEnableInteruptOV>

    // init EXTI0 at rising edge
    EXTI_voidSetCallbackFunction(EXTI_0, US_EXTI_CallBack);
     d4c:	64 e2       	ldi	r22, 0x24	; 36
     d4e:	76 e0       	ldi	r23, 0x06	; 6
     d50:	80 e0       	ldi	r24, 0x00	; 0
     d52:	0e 94 16 08 	call	0x102c	; 0x102c <EXTI_voidSetCallbackFunction>
    EXTI_Init(EXTI_0, RISINING_EDGE);
     d56:	63 e0       	ldi	r22, 0x03	; 3
     d58:	80 e0       	ldi	r24, 0x00	; 0
     d5a:	0e 94 ee 07 	call	0xfdc	; 0xfdc <EXTI_Init>
}
     d5e:	cf 91       	pop	r28
     d60:	08 95       	ret

00000d62 <US_u8dRead_Distance_cm>:

f32 US_u8dRead_Distance_cm(US_Channel_Num_t US_channel)
{
     d62:	cf 93       	push	r28
     d64:	df 93       	push	r29
    G_US_channel = US_channel;
     d66:	80 93 28 04 	sts	0x0428, r24	; 0x800428 <G_US_channel>

    /*Trig pluse*/

    dio_vidWriteChannel(US_arrChannels[US_channel].TRIG_PORT_Num,
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	ec 01       	movw	r28, r24
     d6e:	cc 0f       	add	r28, r28
     d70:	dd 1f       	adc	r29, r29
     d72:	cc 0f       	add	r28, r28
     d74:	dd 1f       	adc	r29, r29
     d76:	cc 0f       	add	r28, r28
     d78:	dd 1f       	adc	r29, r29
     d7a:	c8 1b       	sub	r28, r24
     d7c:	d9 0b       	sbc	r29, r25
     d7e:	c4 57       	subi	r28, 0x74	; 116
     d80:	dc 4f       	sbci	r29, 0xFC	; 252
     d82:	41 e0       	ldi	r20, 0x01	; 1
     d84:	6a 81       	ldd	r22, Y+2	; 0x02
     d86:	89 81       	ldd	r24, Y+1	; 0x01
     d88:	0e 94 81 07 	call	0xf02	; 0xf02 <dio_vidWriteChannel>
                        US_arrChannels[US_channel].TRIG_PIN_Num, STD_HIGH);
    /*wait 10 usec */
    TD_delay_us(10);
     d8c:	2a e0       	ldi	r18, 0x0A	; 10
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	40 e0       	ldi	r20, 0x00	; 0
     d92:	50 e0       	ldi	r21, 0x00	; 0
     d94:	60 e0       	ldi	r22, 0x00	; 0
     d96:	70 e0       	ldi	r23, 0x00	; 0
     d98:	80 e0       	ldi	r24, 0x00	; 0
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <TD_delay_us>
    dio_vidWriteChannel(US_arrChannels[US_channel].TRIG_PORT_Num,
     da0:	40 e0       	ldi	r20, 0x00	; 0
     da2:	6a 81       	ldd	r22, Y+2	; 0x02
     da4:	89 81       	ldd	r24, Y+1	; 0x01
     da6:	0e 94 81 07 	call	0xf02	; 0xf02 <dio_vidWriteChannel>
                        US_arrChannels[US_channel].TRIG_PIN_Num, STD_LOW);

    TD_delay_ms(500);
     daa:	24 ef       	ldi	r18, 0xF4	; 244
     dac:	31 e0       	ldi	r19, 0x01	; 1
     dae:	40 e0       	ldi	r20, 0x00	; 0
     db0:	50 e0       	ldi	r21, 0x00	; 0
     db2:	60 e0       	ldi	r22, 0x00	; 0
     db4:	70 e0       	ldi	r23, 0x00	; 0
     db6:	80 e0       	ldi	r24, 0x00	; 0
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <TD_delay_ms>

    return US_arrChannels[US_channel].readingDistance;
     dbe:	6b 81       	ldd	r22, Y+3	; 0x03
     dc0:	7c 81       	ldd	r23, Y+4	; 0x04
     dc2:	8d 81       	ldd	r24, Y+5	; 0x05
     dc4:	9e 81       	ldd	r25, Y+6	; 0x06
     dc6:	df 91       	pop	r29
     dc8:	cf 91       	pop	r28
     dca:	08 95       	ret

00000dcc <main>:

#if 1

int main()
{
	Entrance_Init();
     dcc:	0e 94 49 00 	call	0x92	; 0x92 <Entrance_Init>

	while (1)
	{

		Entrance_Start();
     dd0:	0e 94 61 00 	call	0xc2	; 0xc2 <Entrance_Start>
     dd4:	fd cf       	rjmp	.-6      	; 0xdd0 <main+0x4>

00000dd6 <__vector_16>:
}

/* vector of ADC interrupt */
void __vector_16(void) __attribute__((signal, used));
void __vector_16(void)
{
     dd6:	1f 92       	push	r1
     dd8:	0f 92       	push	r0
     dda:	0f b6       	in	r0, 0x3f	; 63
     ddc:	0f 92       	push	r0
     dde:	11 24       	eor	r1, r1
     de0:	2f 93       	push	r18
     de2:	3f 93       	push	r19
     de4:	4f 93       	push	r20
     de6:	5f 93       	push	r21
     de8:	6f 93       	push	r22
     dea:	7f 93       	push	r23
     dec:	8f 93       	push	r24
     dee:	9f 93       	push	r25
     df0:	af 93       	push	r26
     df2:	bf 93       	push	r27
     df4:	ef 93       	push	r30
     df6:	ff 93       	push	r31
	if (GP_ADC_Callback != NULL)
     df8:	e0 91 2f 04 	lds	r30, 0x042F	; 0x80042f <GP_ADC_Callback>
     dfc:	f0 91 30 04 	lds	r31, 0x0430	; 0x800430 <GP_ADC_Callback+0x1>
     e00:	30 97       	sbiw	r30, 0x00	; 0
     e02:	09 f0       	breq	.+2      	; 0xe06 <__vector_16+0x30>
	{
		GP_ADC_Callback();
     e04:	09 95       	icall
	}
}
     e06:	ff 91       	pop	r31
     e08:	ef 91       	pop	r30
     e0a:	bf 91       	pop	r27
     e0c:	af 91       	pop	r26
     e0e:	9f 91       	pop	r25
     e10:	8f 91       	pop	r24
     e12:	7f 91       	pop	r23
     e14:	6f 91       	pop	r22
     e16:	5f 91       	pop	r21
     e18:	4f 91       	pop	r20
     e1a:	3f 91       	pop	r19
     e1c:	2f 91       	pop	r18
     e1e:	0f 90       	pop	r0
     e20:	0f be       	out	0x3f, r0	; 63
     e22:	0f 90       	pop	r0
     e24:	1f 90       	pop	r1
     e26:	18 95       	reti

00000e28 <dio_vidConfigChannel>:
					 direction -> MC channel direction
* \Return value:   : None                            
*******************************************************************************/
void dio_vidConfigChannel(dio_portId_t port, dio_channelId_t channel, dio_direction_t direction)
{
	switch (port)
     e28:	81 30       	cpi	r24, 0x01	; 1
     e2a:	01 f1       	breq	.+64     	; 0xe6c <dio_vidConfigChannel+0x44>
     e2c:	30 f0       	brcs	.+12     	; 0xe3a <dio_vidConfigChannel+0x12>
     e2e:	82 30       	cpi	r24, 0x02	; 2
     e30:	b1 f1       	breq	.+108    	; 0xe9e <dio_vidConfigChannel+0x76>
     e32:	83 30       	cpi	r24, 0x03	; 3
     e34:	09 f4       	brne	.+2      	; 0xe38 <dio_vidConfigChannel+0x10>
     e36:	4c c0       	rjmp	.+152    	; 0xed0 <dio_vidConfigChannel+0xa8>
     e38:	08 95       	ret
	{
	case DIO_PORTA:
		if (direction == OUTPUT)
     e3a:	41 30       	cpi	r20, 0x01	; 1
     e3c:	59 f4       	brne	.+22     	; 0xe54 <dio_vidConfigChannel+0x2c>
		{
			SET_BIT (DDRA,channel);
     e3e:	2a b3       	in	r18, 0x1a	; 26
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	02 c0       	rjmp	.+4      	; 0xe4a <dio_vidConfigChannel+0x22>
     e46:	88 0f       	add	r24, r24
     e48:	99 1f       	adc	r25, r25
     e4a:	6a 95       	dec	r22
     e4c:	e2 f7       	brpl	.-8      	; 0xe46 <dio_vidConfigChannel+0x1e>
     e4e:	82 2b       	or	r24, r18
     e50:	8a bb       	out	0x1a, r24	; 26
     e52:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DDRA,channel);
     e54:	2a b3       	in	r18, 0x1a	; 26
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	02 c0       	rjmp	.+4      	; 0xe60 <dio_vidConfigChannel+0x38>
     e5c:	88 0f       	add	r24, r24
     e5e:	99 1f       	adc	r25, r25
     e60:	6a 95       	dec	r22
     e62:	e2 f7       	brpl	.-8      	; 0xe5c <dio_vidConfigChannel+0x34>
     e64:	80 95       	com	r24
     e66:	82 23       	and	r24, r18
     e68:	8a bb       	out	0x1a, r24	; 26
     e6a:	08 95       	ret
		}
		break;

	case DIO_PORTB:
		if (direction == OUTPUT)
     e6c:	41 30       	cpi	r20, 0x01	; 1
     e6e:	59 f4       	brne	.+22     	; 0xe86 <dio_vidConfigChannel+0x5e>
		{
			SET_BIT (DDRB,channel);
     e70:	27 b3       	in	r18, 0x17	; 23
     e72:	81 e0       	ldi	r24, 0x01	; 1
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	02 c0       	rjmp	.+4      	; 0xe7c <dio_vidConfigChannel+0x54>
     e78:	88 0f       	add	r24, r24
     e7a:	99 1f       	adc	r25, r25
     e7c:	6a 95       	dec	r22
     e7e:	e2 f7       	brpl	.-8      	; 0xe78 <dio_vidConfigChannel+0x50>
     e80:	82 2b       	or	r24, r18
     e82:	87 bb       	out	0x17, r24	; 23
     e84:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DDRB,channel);
     e86:	27 b3       	in	r18, 0x17	; 23
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	02 c0       	rjmp	.+4      	; 0xe92 <dio_vidConfigChannel+0x6a>
     e8e:	88 0f       	add	r24, r24
     e90:	99 1f       	adc	r25, r25
     e92:	6a 95       	dec	r22
     e94:	e2 f7       	brpl	.-8      	; 0xe8e <dio_vidConfigChannel+0x66>
     e96:	80 95       	com	r24
     e98:	82 23       	and	r24, r18
     e9a:	87 bb       	out	0x17, r24	; 23
     e9c:	08 95       	ret
		}
		break;

	case DIO_PORTC:
		if (direction == OUTPUT)
     e9e:	41 30       	cpi	r20, 0x01	; 1
     ea0:	59 f4       	brne	.+22     	; 0xeb8 <dio_vidConfigChannel+0x90>
		{
			SET_BIT (DDRC,channel);
     ea2:	24 b3       	in	r18, 0x14	; 20
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <dio_vidConfigChannel+0x86>
     eaa:	88 0f       	add	r24, r24
     eac:	99 1f       	adc	r25, r25
     eae:	6a 95       	dec	r22
     eb0:	e2 f7       	brpl	.-8      	; 0xeaa <dio_vidConfigChannel+0x82>
     eb2:	82 2b       	or	r24, r18
     eb4:	84 bb       	out	0x14, r24	; 20
     eb6:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DDRC,channel);
     eb8:	24 b3       	in	r18, 0x14	; 20
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	02 c0       	rjmp	.+4      	; 0xec4 <dio_vidConfigChannel+0x9c>
     ec0:	88 0f       	add	r24, r24
     ec2:	99 1f       	adc	r25, r25
     ec4:	6a 95       	dec	r22
     ec6:	e2 f7       	brpl	.-8      	; 0xec0 <dio_vidConfigChannel+0x98>
     ec8:	80 95       	com	r24
     eca:	82 23       	and	r24, r18
     ecc:	84 bb       	out	0x14, r24	; 20
     ece:	08 95       	ret
		}
		break;

	case DIO_PORTD:
		if (direction == OUTPUT)
     ed0:	41 30       	cpi	r20, 0x01	; 1
     ed2:	59 f4       	brne	.+22     	; 0xeea <dio_vidConfigChannel+0xc2>
		{
			SET_BIT (DDRD,channel);
     ed4:	21 b3       	in	r18, 0x11	; 17
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	02 c0       	rjmp	.+4      	; 0xee0 <dio_vidConfigChannel+0xb8>
     edc:	88 0f       	add	r24, r24
     ede:	99 1f       	adc	r25, r25
     ee0:	6a 95       	dec	r22
     ee2:	e2 f7       	brpl	.-8      	; 0xedc <dio_vidConfigChannel+0xb4>
     ee4:	82 2b       	or	r24, r18
     ee6:	81 bb       	out	0x11, r24	; 17
     ee8:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DDRD,channel);
     eea:	21 b3       	in	r18, 0x11	; 17
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <dio_vidConfigChannel+0xce>
     ef2:	88 0f       	add	r24, r24
     ef4:	99 1f       	adc	r25, r25
     ef6:	6a 95       	dec	r22
     ef8:	e2 f7       	brpl	.-8      	; 0xef2 <dio_vidConfigChannel+0xca>
     efa:	80 95       	com	r24
     efc:	82 23       	and	r24, r18
     efe:	81 bb       	out	0x11, r24	; 17
     f00:	08 95       	ret

00000f02 <dio_vidWriteChannel>:
					 level    -> MC channel level
* \Return value:   : None                            
*******************************************************************************/
void dio_vidWriteChannel(dio_portId_t port, dio_channelId_t channel, dio_level_t level)
{
	switch (port)
     f02:	81 30       	cpi	r24, 0x01	; 1
     f04:	01 f1       	breq	.+64     	; 0xf46 <dio_vidWriteChannel+0x44>
     f06:	30 f0       	brcs	.+12     	; 0xf14 <dio_vidWriteChannel+0x12>
     f08:	82 30       	cpi	r24, 0x02	; 2
     f0a:	b1 f1       	breq	.+108    	; 0xf78 <dio_vidWriteChannel+0x76>
     f0c:	83 30       	cpi	r24, 0x03	; 3
     f0e:	09 f4       	brne	.+2      	; 0xf12 <dio_vidWriteChannel+0x10>
     f10:	4c c0       	rjmp	.+152    	; 0xfaa <dio_vidWriteChannel+0xa8>
     f12:	08 95       	ret
	{
	case DIO_PORTA:
		if (level == STD_LOW)
     f14:	41 11       	cpse	r20, r1
     f16:	0c c0       	rjmp	.+24     	; 0xf30 <dio_vidWriteChannel+0x2e>
		{
			CLEAR_BIT(PORTA,channel);
     f18:	2b b3       	in	r18, 0x1b	; 27
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	02 c0       	rjmp	.+4      	; 0xf24 <dio_vidWriteChannel+0x22>
     f20:	88 0f       	add	r24, r24
     f22:	99 1f       	adc	r25, r25
     f24:	6a 95       	dec	r22
     f26:	e2 f7       	brpl	.-8      	; 0xf20 <dio_vidWriteChannel+0x1e>
     f28:	80 95       	com	r24
     f2a:	82 23       	and	r24, r18
     f2c:	8b bb       	out	0x1b, r24	; 27
     f2e:	08 95       	ret
		}
		else
		{
			SET_BIT(PORTA,channel);
     f30:	2b b3       	in	r18, 0x1b	; 27
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	02 c0       	rjmp	.+4      	; 0xf3c <dio_vidWriteChannel+0x3a>
     f38:	88 0f       	add	r24, r24
     f3a:	99 1f       	adc	r25, r25
     f3c:	6a 95       	dec	r22
     f3e:	e2 f7       	brpl	.-8      	; 0xf38 <dio_vidWriteChannel+0x36>
     f40:	82 2b       	or	r24, r18
     f42:	8b bb       	out	0x1b, r24	; 27
     f44:	08 95       	ret
		}
		break;

	case DIO_PORTB:
		if (level == STD_LOW)
     f46:	41 11       	cpse	r20, r1
     f48:	0c c0       	rjmp	.+24     	; 0xf62 <dio_vidWriteChannel+0x60>
		{
			CLEAR_BIT(PORTB,channel);
     f4a:	28 b3       	in	r18, 0x18	; 24
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <dio_vidWriteChannel+0x54>
     f52:	88 0f       	add	r24, r24
     f54:	99 1f       	adc	r25, r25
     f56:	6a 95       	dec	r22
     f58:	e2 f7       	brpl	.-8      	; 0xf52 <dio_vidWriteChannel+0x50>
     f5a:	80 95       	com	r24
     f5c:	82 23       	and	r24, r18
     f5e:	88 bb       	out	0x18, r24	; 24
     f60:	08 95       	ret
		}
		else
		{
			SET_BIT(PORTB,channel);
     f62:	28 b3       	in	r18, 0x18	; 24
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <dio_vidWriteChannel+0x6c>
     f6a:	88 0f       	add	r24, r24
     f6c:	99 1f       	adc	r25, r25
     f6e:	6a 95       	dec	r22
     f70:	e2 f7       	brpl	.-8      	; 0xf6a <dio_vidWriteChannel+0x68>
     f72:	82 2b       	or	r24, r18
     f74:	88 bb       	out	0x18, r24	; 24
     f76:	08 95       	ret
		}
		break;

	case DIO_PORTC:
		if (level == STD_LOW)
     f78:	41 11       	cpse	r20, r1
     f7a:	0c c0       	rjmp	.+24     	; 0xf94 <dio_vidWriteChannel+0x92>
		{
			CLEAR_BIT(PORTC,channel);
     f7c:	25 b3       	in	r18, 0x15	; 21
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	02 c0       	rjmp	.+4      	; 0xf88 <dio_vidWriteChannel+0x86>
     f84:	88 0f       	add	r24, r24
     f86:	99 1f       	adc	r25, r25
     f88:	6a 95       	dec	r22
     f8a:	e2 f7       	brpl	.-8      	; 0xf84 <dio_vidWriteChannel+0x82>
     f8c:	80 95       	com	r24
     f8e:	82 23       	and	r24, r18
     f90:	85 bb       	out	0x15, r24	; 21
     f92:	08 95       	ret
		}
		else
		{
			SET_BIT(PORTC,channel);
     f94:	25 b3       	in	r18, 0x15	; 21
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <dio_vidWriteChannel+0x9e>
     f9c:	88 0f       	add	r24, r24
     f9e:	99 1f       	adc	r25, r25
     fa0:	6a 95       	dec	r22
     fa2:	e2 f7       	brpl	.-8      	; 0xf9c <dio_vidWriteChannel+0x9a>
     fa4:	82 2b       	or	r24, r18
     fa6:	85 bb       	out	0x15, r24	; 21
     fa8:	08 95       	ret
		}
		break;

	case DIO_PORTD:
		if (level == STD_LOW)
     faa:	41 11       	cpse	r20, r1
     fac:	0c c0       	rjmp	.+24     	; 0xfc6 <dio_vidWriteChannel+0xc4>
		{
			CLEAR_BIT(PORTD,channel);
     fae:	22 b3       	in	r18, 0x12	; 18
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	02 c0       	rjmp	.+4      	; 0xfba <dio_vidWriteChannel+0xb8>
     fb6:	88 0f       	add	r24, r24
     fb8:	99 1f       	adc	r25, r25
     fba:	6a 95       	dec	r22
     fbc:	e2 f7       	brpl	.-8      	; 0xfb6 <dio_vidWriteChannel+0xb4>
     fbe:	80 95       	com	r24
     fc0:	82 23       	and	r24, r18
     fc2:	82 bb       	out	0x12, r24	; 18
     fc4:	08 95       	ret
		}
		else
		{
			SET_BIT(PORTD,channel);
     fc6:	22 b3       	in	r18, 0x12	; 18
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	02 c0       	rjmp	.+4      	; 0xfd2 <dio_vidWriteChannel+0xd0>
     fce:	88 0f       	add	r24, r24
     fd0:	99 1f       	adc	r25, r25
     fd2:	6a 95       	dec	r22
     fd4:	e2 f7       	brpl	.-8      	; 0xfce <dio_vidWriteChannel+0xcc>
     fd6:	82 2b       	or	r24, r18
     fd8:	82 bb       	out	0x12, r24	; 18
     fda:	08 95       	ret

00000fdc <EXTI_Init>:
	}
	break;
	case EXTI_2:
	{
		// Disable INT2
		CLEAR_BIT(GICR, 5);
     fdc:	81 30       	cpi	r24, 0x01	; 1
     fde:	79 f0       	breq	.+30     	; 0xffe <EXTI_Init+0x22>
     fe0:	18 f0       	brcs	.+6      	; 0xfe8 <EXTI_Init+0xc>
     fe2:	82 30       	cpi	r24, 0x02	; 2
     fe4:	b9 f0       	breq	.+46     	; 0x1014 <EXTI_Init+0x38>
     fe6:	08 95       	ret
     fe8:	85 b7       	in	r24, 0x35	; 53
     fea:	8c 7f       	andi	r24, 0xFC	; 252
     fec:	85 bf       	out	0x35, r24	; 53
     fee:	85 b7       	in	r24, 0x35	; 53
     ff0:	63 70       	andi	r22, 0x03	; 3
     ff2:	68 2b       	or	r22, r24
     ff4:	65 bf       	out	0x35, r22	; 53
     ff6:	8b b7       	in	r24, 0x3b	; 59
     ff8:	80 64       	ori	r24, 0x40	; 64
     ffa:	8b bf       	out	0x3b, r24	; 59
     ffc:	08 95       	ret
     ffe:	85 b7       	in	r24, 0x35	; 53
    1000:	83 7f       	andi	r24, 0xF3	; 243
    1002:	85 bf       	out	0x35, r24	; 53
    1004:	85 b7       	in	r24, 0x35	; 53
    1006:	6c 70       	andi	r22, 0x0C	; 12
    1008:	68 2b       	or	r22, r24
    100a:	65 bf       	out	0x35, r22	; 53
    100c:	8b b7       	in	r24, 0x3b	; 59
    100e:	80 68       	ori	r24, 0x80	; 128
    1010:	8b bf       	out	0x3b, r24	; 59
    1012:	08 95       	ret
    1014:	84 b7       	in	r24, 0x34	; 52
    1016:	8f 7b       	andi	r24, 0xBF	; 191
    1018:	84 bf       	out	0x34, r24	; 52
    101a:	84 b7       	in	r24, 0x34	; 52
    101c:	62 50       	subi	r22, 0x02	; 2
    101e:	60 72       	andi	r22, 0x20	; 32
    1020:	68 2b       	or	r22, r24
    1022:	64 bf       	out	0x34, r22	; 52
    1024:	8b b7       	in	r24, 0x3b	; 59
    1026:	80 62       	ori	r24, 0x20	; 32
    1028:	8b bf       	out	0x3b, r24	; 59
    102a:	08 95       	ret

0000102c <EXTI_voidSetCallbackFunction>:
    102c:	81 30       	cpi	r24, 0x01	; 1
    102e:	49 f0       	breq	.+18     	; 0x1042 <EXTI_voidSetCallbackFunction+0x16>
    1030:	18 f0       	brcs	.+6      	; 0x1038 <EXTI_voidSetCallbackFunction+0xc>
    1032:	82 30       	cpi	r24, 0x02	; 2
    1034:	59 f0       	breq	.+22     	; 0x104c <EXTI_voidSetCallbackFunction+0x20>
    1036:	08 95       	ret
    1038:	70 93 36 04 	sts	0x0436, r23	; 0x800436 <EXTI0_callback+0x1>
    103c:	60 93 35 04 	sts	0x0435, r22	; 0x800435 <EXTI0_callback>
    1040:	08 95       	ret
    1042:	70 93 32 04 	sts	0x0432, r23	; 0x800432 <EXTI1_callback+0x1>
    1046:	60 93 31 04 	sts	0x0431, r22	; 0x800431 <EXTI1_callback>
    104a:	08 95       	ret
    104c:	70 93 34 04 	sts	0x0434, r23	; 0x800434 <EXTI2_callback+0x1>
    1050:	60 93 33 04 	sts	0x0433, r22	; 0x800433 <EXTI2_callback>
    1054:	08 95       	ret

00001056 <__vector_1>:
void __vector_1(void) __attribute__((signal, used));
void __vector_2(void) __attribute__((signal, used));
void __vector_3(void) __attribute__((signal, used));

void __vector_1(void)
{
    1056:	1f 92       	push	r1
    1058:	0f 92       	push	r0
    105a:	0f b6       	in	r0, 0x3f	; 63
    105c:	0f 92       	push	r0
    105e:	11 24       	eor	r1, r1
    1060:	2f 93       	push	r18
    1062:	3f 93       	push	r19
    1064:	4f 93       	push	r20
    1066:	5f 93       	push	r21
    1068:	6f 93       	push	r22
    106a:	7f 93       	push	r23
    106c:	8f 93       	push	r24
    106e:	9f 93       	push	r25
    1070:	af 93       	push	r26
    1072:	bf 93       	push	r27
    1074:	ef 93       	push	r30
    1076:	ff 93       	push	r31
	EXTI0_callback();
    1078:	e0 91 35 04 	lds	r30, 0x0435	; 0x800435 <EXTI0_callback>
    107c:	f0 91 36 04 	lds	r31, 0x0436	; 0x800436 <EXTI0_callback+0x1>
    1080:	09 95       	icall
}
    1082:	ff 91       	pop	r31
    1084:	ef 91       	pop	r30
    1086:	bf 91       	pop	r27
    1088:	af 91       	pop	r26
    108a:	9f 91       	pop	r25
    108c:	8f 91       	pop	r24
    108e:	7f 91       	pop	r23
    1090:	6f 91       	pop	r22
    1092:	5f 91       	pop	r21
    1094:	4f 91       	pop	r20
    1096:	3f 91       	pop	r19
    1098:	2f 91       	pop	r18
    109a:	0f 90       	pop	r0
    109c:	0f be       	out	0x3f, r0	; 63
    109e:	0f 90       	pop	r0
    10a0:	1f 90       	pop	r1
    10a2:	18 95       	reti

000010a4 <__vector_2>:

void __vector_2(void)
{
    10a4:	1f 92       	push	r1
    10a6:	0f 92       	push	r0
    10a8:	0f b6       	in	r0, 0x3f	; 63
    10aa:	0f 92       	push	r0
    10ac:	11 24       	eor	r1, r1
    10ae:	2f 93       	push	r18
    10b0:	3f 93       	push	r19
    10b2:	4f 93       	push	r20
    10b4:	5f 93       	push	r21
    10b6:	6f 93       	push	r22
    10b8:	7f 93       	push	r23
    10ba:	8f 93       	push	r24
    10bc:	9f 93       	push	r25
    10be:	af 93       	push	r26
    10c0:	bf 93       	push	r27
    10c2:	ef 93       	push	r30
    10c4:	ff 93       	push	r31
	EXTI1_callback();
    10c6:	e0 91 31 04 	lds	r30, 0x0431	; 0x800431 <EXTI1_callback>
    10ca:	f0 91 32 04 	lds	r31, 0x0432	; 0x800432 <EXTI1_callback+0x1>
    10ce:	09 95       	icall
}
    10d0:	ff 91       	pop	r31
    10d2:	ef 91       	pop	r30
    10d4:	bf 91       	pop	r27
    10d6:	af 91       	pop	r26
    10d8:	9f 91       	pop	r25
    10da:	8f 91       	pop	r24
    10dc:	7f 91       	pop	r23
    10de:	6f 91       	pop	r22
    10e0:	5f 91       	pop	r21
    10e2:	4f 91       	pop	r20
    10e4:	3f 91       	pop	r19
    10e6:	2f 91       	pop	r18
    10e8:	0f 90       	pop	r0
    10ea:	0f be       	out	0x3f, r0	; 63
    10ec:	0f 90       	pop	r0
    10ee:	1f 90       	pop	r1
    10f0:	18 95       	reti

000010f2 <__vector_3>:

void __vector_3(void)
{
    10f2:	1f 92       	push	r1
    10f4:	0f 92       	push	r0
    10f6:	0f b6       	in	r0, 0x3f	; 63
    10f8:	0f 92       	push	r0
    10fa:	11 24       	eor	r1, r1
    10fc:	2f 93       	push	r18
    10fe:	3f 93       	push	r19
    1100:	4f 93       	push	r20
    1102:	5f 93       	push	r21
    1104:	6f 93       	push	r22
    1106:	7f 93       	push	r23
    1108:	8f 93       	push	r24
    110a:	9f 93       	push	r25
    110c:	af 93       	push	r26
    110e:	bf 93       	push	r27
    1110:	ef 93       	push	r30
    1112:	ff 93       	push	r31
	EXTI2_callback();
    1114:	e0 91 33 04 	lds	r30, 0x0433	; 0x800433 <EXTI2_callback>
    1118:	f0 91 34 04 	lds	r31, 0x0434	; 0x800434 <EXTI2_callback+0x1>
    111c:	09 95       	icall
    111e:	ff 91       	pop	r31
    1120:	ef 91       	pop	r30
    1122:	bf 91       	pop	r27
    1124:	af 91       	pop	r26
    1126:	9f 91       	pop	r25
    1128:	8f 91       	pop	r24
    112a:	7f 91       	pop	r23
    112c:	6f 91       	pop	r22
    112e:	5f 91       	pop	r21
    1130:	4f 91       	pop	r20
    1132:	3f 91       	pop	r19
    1134:	2f 91       	pop	r18
    1136:	0f 90       	pop	r0
    1138:	0f be       	out	0x3f, r0	; 63
    113a:	0f 90       	pop	r0
    113c:	1f 90       	pop	r1
    113e:	18 95       	reti

00001140 <I2C_vInit>:
int I2C_enuReadMoreByte(void)
{
    TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
    while(CHECK_BIT(TWCR , TWINT) == 0);               /* Polling untill the transmitting done         */
    return TWDR;    // TWDR 1Byte so why need to int & how return more byte
}
    1140:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <I2C_Prescaller>
    1144:	84 30       	cpi	r24, 0x04	; 4
    1146:	61 f0       	breq	.+24     	; 0x1160 <I2C_vInit+0x20>
    1148:	18 f4       	brcc	.+6      	; 0x1150 <I2C_vInit+0x10>
    114a:	81 30       	cpi	r24, 0x01	; 1
    114c:	31 f0       	breq	.+12     	; 0x115a <I2C_vInit+0x1a>
    114e:	13 c0       	rjmp	.+38     	; 0x1176 <I2C_vInit+0x36>
    1150:	80 31       	cpi	r24, 0x10	; 16
    1152:	51 f0       	breq	.+20     	; 0x1168 <I2C_vInit+0x28>
    1154:	80 34       	cpi	r24, 0x40	; 64
    1156:	61 f0       	breq	.+24     	; 0x1170 <I2C_vInit+0x30>
    1158:	0e c0       	rjmp	.+28     	; 0x1176 <I2C_vInit+0x36>
    115a:	81 b1       	in	r24, 0x01	; 1
    115c:	81 b9       	out	0x01, r24	; 1
    115e:	0b c0       	rjmp	.+22     	; 0x1176 <I2C_vInit+0x36>
    1160:	81 b1       	in	r24, 0x01	; 1
    1162:	81 60       	ori	r24, 0x01	; 1
    1164:	81 b9       	out	0x01, r24	; 1
    1166:	07 c0       	rjmp	.+14     	; 0x1176 <I2C_vInit+0x36>
    1168:	81 b1       	in	r24, 0x01	; 1
    116a:	82 60       	ori	r24, 0x02	; 2
    116c:	81 b9       	out	0x01, r24	; 1
    116e:	03 c0       	rjmp	.+6      	; 0x1176 <I2C_vInit+0x36>
    1170:	81 b1       	in	r24, 0x01	; 1
    1172:	83 60       	ori	r24, 0x03	; 3
    1174:	81 b9       	out	0x01, r24	; 1
    1176:	88 e4       	ldi	r24, 0x48	; 72
    1178:	80 b9       	out	0x00, r24	; 0
    117a:	08 95       	ret

0000117c <I2C_enuStartTransmission>:
    117c:	84 ee       	ldi	r24, 0xE4	; 228
    117e:	86 bf       	out	0x36, r24	; 54
    1180:	06 b6       	in	r0, 0x36	; 54
    1182:	07 fe       	sbrs	r0, 7
    1184:	fd cf       	rjmp	.-6      	; 0x1180 <I2C_enuStartTransmission+0x4>
    1186:	81 b1       	in	r24, 0x01	; 1
    1188:	88 7f       	andi	r24, 0xF8	; 248
    118a:	88 30       	cpi	r24, 0x08	; 8
    118c:	11 f0       	breq	.+4      	; 0x1192 <I2C_enuStartTransmission+0x16>
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	08 95       	ret
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	08 95       	ret

00001196 <I2C_enuSendSalveAdd>:
    1196:	83 b9       	out	0x03, r24	; 3
    1198:	84 e8       	ldi	r24, 0x84	; 132
    119a:	86 bf       	out	0x36, r24	; 54
    119c:	06 b6       	in	r0, 0x36	; 54
    119e:	07 fe       	sbrs	r0, 7
    11a0:	fd cf       	rjmp	.-6      	; 0x119c <I2C_enuSendSalveAdd+0x6>
    11a2:	80 e0       	ldi	r24, 0x00	; 0
    11a4:	08 95       	ret

000011a6 <I2C_enuSendSlaveRamAdd>:
    11a6:	83 b9       	out	0x03, r24	; 3
    11a8:	84 e8       	ldi	r24, 0x84	; 132
    11aa:	86 bf       	out	0x36, r24	; 54
    11ac:	06 b6       	in	r0, 0x36	; 54
    11ae:	07 fe       	sbrs	r0, 7
    11b0:	fd cf       	rjmp	.-6      	; 0x11ac <I2C_enuSendSlaveRamAdd+0x6>
    11b2:	81 b1       	in	r24, 0x01	; 1
    11b4:	88 7f       	andi	r24, 0xF8	; 248
    11b6:	88 32       	cpi	r24, 0x28	; 40
    11b8:	11 f0       	breq	.+4      	; 0x11be <I2C_enuSendSlaveRamAdd+0x18>
    11ba:	85 e0       	ldi	r24, 0x05	; 5
    11bc:	08 95       	ret
    11be:	80 e0       	ldi	r24, 0x00	; 0
    11c0:	08 95       	ret

000011c2 <I2C_enuSendSlaveData>:
    11c2:	83 b9       	out	0x03, r24	; 3
    11c4:	84 e8       	ldi	r24, 0x84	; 132
    11c6:	86 bf       	out	0x36, r24	; 54
    11c8:	06 b6       	in	r0, 0x36	; 54
    11ca:	07 fe       	sbrs	r0, 7
    11cc:	fd cf       	rjmp	.-6      	; 0x11c8 <I2C_enuSendSlaveData+0x6>
    11ce:	80 e0       	ldi	r24, 0x00	; 0
    11d0:	08 95       	ret

000011d2 <I2C_vStopTransmission>:
 * @brief 
 * 
 */
void I2C_vStopTransmission(void)
{
    TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWSTO) | (1<<TWEN);
    11d2:	84 ed       	ldi	r24, 0xD4	; 212
    11d4:	86 bf       	out	0x36, r24	; 54
    11d6:	08 95       	ret

000011d8 <I2C_Write>:

	// i2c_write(0x80,com);


void I2C_Write(u8 FrameType , u8 Data)
{
    11d8:	cf 93       	push	r28
    11da:	df 93       	push	r29
    11dc:	d8 2f       	mov	r29, r24
    11de:	c6 2f       	mov	r28, r22
    I2C_enuStartTransmission();
    11e0:	0e 94 be 08 	call	0x117c	; 0x117c <I2C_enuStartTransmission>
    I2C_enuSendSalveAdd(OLED_ADDRESS | WRITE);
    11e4:	88 e7       	ldi	r24, 0x78	; 120
    11e6:	0e 94 cb 08 	call	0x1196	; 0x1196 <I2C_enuSendSalveAdd>
    I2C_enuSendSlaveRamAdd(FrameType);                // To know if it data or cmd will send next
    11ea:	8d 2f       	mov	r24, r29
    11ec:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <I2C_enuSendSlaveRamAdd>
    I2C_enuSendSlaveData(Data);
    11f0:	8c 2f       	mov	r24, r28
    11f2:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <I2C_enuSendSlaveData>
    I2C_vStopTransmission();
    11f6:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <I2C_vStopTransmission>
}
    11fa:	df 91       	pop	r29
    11fc:	cf 91       	pop	r28
    11fe:	08 95       	ret

00001200 <SPI_Init>:
void SPI_Init()
{
	switch (SPI_DOUBLE_SPEED_MODE)
	{
	case DOUBLE_SPEED_MODE_DIS:
		CLEAR_BIT(SPSR, SPI2X);
    1200:	8e b1       	in	r24, 0x0e	; 14
    1202:	8e 7f       	andi	r24, 0xFE	; 254
    1204:	8e b9       	out	0x0e, r24	; 14
		break;
	}
	switch (DATA_ORDER)
	{
	case MSB:
		CLEAR_BIT(SPCR, DORD);
    1206:	8d b1       	in	r24, 0x0d	; 13
    1208:	8f 7d       	andi	r24, 0xDF	; 223
    120a:	8d b9       	out	0x0d, r24	; 13
		break;
	}
	switch (CLK_POLARITY)
	{
	case RISING_LEADING:
		CLEAR_BIT(SPCR, CPOL);
    120c:	8d b1       	in	r24, 0x0d	; 13
    120e:	87 7f       	andi	r24, 0xF7	; 247
    1210:	8d b9       	out	0x0d, r24	; 13
		break;
	}
	switch (CLK_PHASE)
	{
	case SAMPLE_LEADING:
		CLEAR_BIT(SPCR, CPHA);
    1212:	8d b1       	in	r24, 0x0d	; 13
    1214:	8b 7f       	andi	r24, 0xFB	; 251
    1216:	8d b9       	out	0x0d, r24	; 13
		break;
	}
	switch (SPI_INT_ENABLE)
	{
	case SPI_INT_DIS:
		CLEAR_BIT(SPCR, SPIE);
    1218:	8d b1       	in	r24, 0x0d	; 13
    121a:	8f 77       	andi	r24, 0x7F	; 127
    121c:	8d b9       	out	0x0d, r24	; 13
	{
	case SPI_DIS:
		CLEAR_BIT(SPCR, SPE);
		break;
	case SPI_EN:
		SET_BIT(SPCR, SPE);
    121e:	8d b1       	in	r24, 0x0d	; 13
    1220:	80 64       	ori	r24, 0x40	; 64
    1222:	8d b9       	out	0x0d, r24	; 13
		CLEAR_BIT(DDRB, SS);
		SET_BIT(DDRB, MISO);
		CLEAR_BIT(SPCR, MSTR);
		break;
	case MASTER:
		SET_BIT(DDRB, MOSI);
    1224:	87 b3       	in	r24, 0x17	; 23
    1226:	80 62       	ori	r24, 0x20	; 32
    1228:	87 bb       	out	0x17, r24	; 23
		SET_BIT(DDRB, SCK);
    122a:	87 b3       	in	r24, 0x17	; 23
    122c:	80 68       	ori	r24, 0x80	; 128
    122e:	87 bb       	out	0x17, r24	; 23
		SET_BIT(DDRB, SS);
    1230:	87 b3       	in	r24, 0x17	; 23
    1232:	88 60       	ori	r24, 0x08	; 8
    1234:	87 bb       	out	0x17, r24	; 23
		CLEAR_BIT(DDRB, MISO);
    1236:	87 b3       	in	r24, 0x17	; 23
    1238:	8f 7b       	andi	r24, 0xBF	; 191
    123a:	87 bb       	out	0x17, r24	; 23
		SET_BIT(PORTB, SS);
    123c:	88 b3       	in	r24, 0x18	; 24
    123e:	88 60       	ori	r24, 0x08	; 8
    1240:	88 bb       	out	0x18, r24	; 24
		SET_BIT(SPCR, MSTR);
    1242:	8d b1       	in	r24, 0x0d	; 13
    1244:	80 61       	ori	r24, 0x10	; 16
    1246:	8d b9       	out	0x0d, r24	; 13
		break;
	}
	SET_BIT(SPCR, SPR0);
    1248:	8d b1       	in	r24, 0x0d	; 13
    124a:	81 60       	ori	r24, 0x01	; 1
    124c:	8d b9       	out	0x0d, r24	; 13
	CLEAR_BIT(SPCR, SPR1);
    124e:	8d b1       	in	r24, 0x0d	; 13
    1250:	8d 7f       	andi	r24, 0xFD	; 253
    1252:	8d b9       	out	0x0d, r24	; 13
    1254:	08 95       	ret

00001256 <SPI_DATA_RW>:
}
u8 SPI_DATA_RW(u8 Copy_u8data)
{
	SPDR = Copy_u8data;
    1256:	8f b9       	out	0x0f, r24	; 15
	while (!CHECK_BIT(SPSR, SPIF))
    1258:	77 9b       	sbis	0x0e, 7	; 14
    125a:	fe cf       	rjmp	.-4      	; 0x1258 <SPI_DATA_RW+0x2>
		;
	return SPDR;
    125c:	8f b1       	in	r24, 0x0f	; 15
}
    125e:	08 95       	ret

00001260 <__vector_12>:


/* SPI Transmission/reception complete ISR */
void __vector_12 (void) __attribute__((signal));
void __vector_12 (void)
{
    1260:	1f 92       	push	r1
    1262:	0f 92       	push	r0
    1264:	0f b6       	in	r0, 0x3f	; 63
    1266:	0f 92       	push	r0
    1268:	11 24       	eor	r1, r1
    126a:	2f 93       	push	r18
    126c:	3f 93       	push	r19
    126e:	4f 93       	push	r20
    1270:	5f 93       	push	r21
    1272:	6f 93       	push	r22
    1274:	7f 93       	push	r23
    1276:	8f 93       	push	r24
    1278:	9f 93       	push	r25
    127a:	af 93       	push	r26
    127c:	bf 93       	push	r27
    127e:	ef 93       	push	r30
    1280:	ff 93       	push	r31
	

	/* call back function */
	GP_SPI_CallBack();
    1282:	e0 91 2c 04 	lds	r30, 0x042C	; 0x80042c <GP_SPI_CallBack>
    1286:	f0 91 2d 04 	lds	r31, 0x042D	; 0x80042d <GP_SPI_CallBack+0x1>
    128a:	09 95       	icall
}
    128c:	ff 91       	pop	r31
    128e:	ef 91       	pop	r30
    1290:	bf 91       	pop	r27
    1292:	af 91       	pop	r26
    1294:	9f 91       	pop	r25
    1296:	8f 91       	pop	r24
    1298:	7f 91       	pop	r23
    129a:	6f 91       	pop	r22
    129c:	5f 91       	pop	r21
    129e:	4f 91       	pop	r20
    12a0:	3f 91       	pop	r19
    12a2:	2f 91       	pop	r18
    12a4:	0f 90       	pop	r0
    12a6:	0f be       	out	0x3f, r0	; 63
    12a8:	0f 90       	pop	r0
    12aa:	1f 90       	pop	r1
    12ac:	18 95       	reti

000012ae <T0_voidInit>:

    /* Set mode of OC0 pin mode
       COM01 bit5   COM00 bit4  in RCCR0
     */
    TCCR0 &= ~(0x30);
    TCCR0 |= ((MODE << 4) & 0x30);
    12ae:	83 b7       	in	r24, 0x33	; 51
    12b0:	87 7f       	andi	r24, 0xF7	; 247
    12b2:	83 bf       	out	0x33, r24	; 51
    12b4:	83 b7       	in	r24, 0x33	; 51
    12b6:	8f 7b       	andi	r24, 0xBF	; 191
    12b8:	83 bf       	out	0x33, r24	; 51
    12ba:	83 b7       	in	r24, 0x33	; 51
    12bc:	83 bf       	out	0x33, r24	; 51
    12be:	83 b7       	in	r24, 0x33	; 51
    12c0:	83 bf       	out	0x33, r24	; 51
    12c2:	08 95       	ret

000012c4 <T0_voidStart>:
    12c4:	83 b7       	in	r24, 0x33	; 51
    12c6:	88 7f       	andi	r24, 0xF8	; 248
    12c8:	83 bf       	out	0x33, r24	; 51
    12ca:	83 b7       	in	r24, 0x33	; 51
    12cc:	82 60       	ori	r24, 0x02	; 2
    12ce:	83 bf       	out	0x33, r24	; 51
    12d0:	08 95       	ret

000012d2 <T0_voidStop>:
    12d2:	83 b7       	in	r24, 0x33	; 51
    12d4:	88 7f       	andi	r24, 0xF8	; 248
    12d6:	83 bf       	out	0x33, r24	; 51
    12d8:	08 95       	ret

000012da <T0_voidWait_us>:
    12da:	2f 92       	push	r2
    12dc:	3f 92       	push	r3
    12de:	4f 92       	push	r4
    12e0:	5f 92       	push	r5
    12e2:	6f 92       	push	r6
    12e4:	7f 92       	push	r7
    12e6:	8f 92       	push	r8
    12e8:	9f 92       	push	r9
    12ea:	af 92       	push	r10
    12ec:	bf 92       	push	r11
    12ee:	cf 92       	push	r12
    12f0:	df 92       	push	r13
    12f2:	ef 92       	push	r14
    12f4:	ff 92       	push	r15
    12f6:	0f 93       	push	r16
    12f8:	1f 93       	push	r17
    12fa:	cf 93       	push	r28
    12fc:	df 93       	push	r29
    12fe:	cd b7       	in	r28, 0x3d	; 61
    1300:	de b7       	in	r29, 0x3e	; 62
    1302:	68 97       	sbiw	r28, 0x18	; 24
    1304:	0f b6       	in	r0, 0x3f	; 63
    1306:	f8 94       	cli
    1308:	de bf       	out	0x3e, r29	; 62
    130a:	0f be       	out	0x3f, r0	; 63
    130c:	cd bf       	out	0x3d, r28	; 61
    130e:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <__floatundisf>
    1312:	9b 01       	movw	r18, r22
    1314:	ac 01       	movw	r20, r24
    1316:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <__addsf3>
    131a:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <__fixunssfdi>
    131e:	2f 8b       	std	Y+23, r18	; 0x17
    1320:	23 2e       	mov	r2, r19
    1322:	34 2e       	mov	r3, r20
    1324:	85 2e       	mov	r8, r21
    1326:	96 2e       	mov	r9, r22
    1328:	78 8f       	std	Y+24, r23	; 0x18
    132a:	89 83       	std	Y+1, r24	; 0x01
    132c:	9a 83       	std	Y+2, r25	; 0x02
    132e:	2f 3f       	cpi	r18, 0xFF	; 255
    1330:	31 05       	cpc	r19, r1
    1332:	41 05       	cpc	r20, r1
    1334:	51 05       	cpc	r21, r1
    1336:	61 05       	cpc	r22, r1
    1338:	71 05       	cpc	r23, r1
    133a:	81 05       	cpc	r24, r1
    133c:	91 05       	cpc	r25, r1
    133e:	09 f0       	breq	.+2      	; 0x1342 <T0_voidWait_us+0x68>
    1340:	38 f4       	brcc	.+14     	; 0x1350 <T0_voidWait_us+0x76>
    1342:	12 2f       	mov	r17, r18
    1344:	11 95       	neg	r17
    1346:	41 2c       	mov	r4, r1
    1348:	51 2c       	mov	r5, r1
    134a:	32 01       	movw	r6, r4
    134c:	19 83       	std	Y+1, r17	; 0x01
    134e:	e1 c0       	rjmp	.+450    	; 0x1512 <T0_voidWait_us+0x238>
    1350:	2f 89       	ldd	r18, Y+23	; 0x17
    1352:	78 8d       	ldd	r23, Y+24	; 0x18
    1354:	89 81       	ldd	r24, Y+1	; 0x01
    1356:	9a 81       	ldd	r25, Y+2	; 0x02
    1358:	21 15       	cp	r18, r1
    135a:	e1 e0       	ldi	r30, 0x01	; 1
    135c:	3e 07       	cpc	r19, r30
    135e:	41 05       	cpc	r20, r1
    1360:	51 05       	cpc	r21, r1
    1362:	61 05       	cpc	r22, r1
    1364:	71 05       	cpc	r23, r1
    1366:	81 05       	cpc	r24, r1
    1368:	91 05       	cpc	r25, r1
    136a:	09 f4       	brne	.+2      	; 0x136e <T0_voidWait_us+0x94>
    136c:	ba c0       	rjmp	.+372    	; 0x14e2 <T0_voidWait_us+0x208>
    136e:	21 15       	cp	r18, r1
    1370:	01 e0       	ldi	r16, 0x01	; 1
    1372:	30 07       	cpc	r19, r16
    1374:	41 05       	cpc	r20, r1
    1376:	51 05       	cpc	r21, r1
    1378:	61 05       	cpc	r22, r1
    137a:	71 05       	cpc	r23, r1
    137c:	81 05       	cpc	r24, r1
    137e:	91 05       	cpc	r25, r1
    1380:	09 f0       	breq	.+2      	; 0x1384 <T0_voidWait_us+0xaa>
    1382:	08 f4       	brcc	.+2      	; 0x1386 <T0_voidWait_us+0xac>
    1384:	b4 c0       	rjmp	.+360    	; 0x14ee <T0_voidWait_us+0x214>
    1386:	02 e0       	ldi	r16, 0x02	; 2
    1388:	0e 94 83 10 	call	0x2106	; 0x2106 <__ashldi3>
    138c:	42 2e       	mov	r4, r18
    138e:	53 2e       	mov	r5, r19
    1390:	64 2e       	mov	r6, r20
    1392:	75 2e       	mov	r7, r21
    1394:	b6 2f       	mov	r27, r22
    1396:	a7 2f       	mov	r26, r23
    1398:	f8 2f       	mov	r31, r24
    139a:	e9 2f       	mov	r30, r25
    139c:	0e 94 83 10 	call	0x2106	; 0x2106 <__ashldi3>
    13a0:	a2 2e       	mov	r10, r18
    13a2:	b3 2e       	mov	r11, r19
    13a4:	c4 2e       	mov	r12, r20
    13a6:	d5 2e       	mov	r13, r21
    13a8:	e6 2e       	mov	r14, r22
    13aa:	f7 2e       	mov	r15, r23
    13ac:	08 2f       	mov	r16, r24
    13ae:	19 2f       	mov	r17, r25
    13b0:	24 2d       	mov	r18, r4
    13b2:	35 2d       	mov	r19, r5
    13b4:	46 2d       	mov	r20, r6
    13b6:	57 2d       	mov	r21, r7
    13b8:	6b 2f       	mov	r22, r27
    13ba:	7a 2f       	mov	r23, r26
    13bc:	8f 2f       	mov	r24, r31
    13be:	9e 2f       	mov	r25, r30
    13c0:	0e 94 ba 10 	call	0x2174	; 0x2174 <__adddi3>
    13c4:	42 2e       	mov	r4, r18
    13c6:	53 2e       	mov	r5, r19
    13c8:	64 2e       	mov	r6, r20
    13ca:	75 2e       	mov	r7, r21
    13cc:	b6 2f       	mov	r27, r22
    13ce:	a7 2f       	mov	r26, r23
    13d0:	f8 2f       	mov	r31, r24
    13d2:	e9 2f       	mov	r30, r25
    13d4:	02 e0       	ldi	r16, 0x02	; 2
    13d6:	0e 94 83 10 	call	0x2106	; 0x2106 <__ashldi3>
    13da:	a2 2e       	mov	r10, r18
    13dc:	b3 2e       	mov	r11, r19
    13de:	c4 2e       	mov	r12, r20
    13e0:	d5 2e       	mov	r13, r21
    13e2:	e6 2e       	mov	r14, r22
    13e4:	f7 2e       	mov	r15, r23
    13e6:	08 2f       	mov	r16, r24
    13e8:	19 2f       	mov	r17, r25
    13ea:	24 2d       	mov	r18, r4
    13ec:	35 2d       	mov	r19, r5
    13ee:	46 2d       	mov	r20, r6
    13f0:	57 2d       	mov	r21, r7
    13f2:	6b 2f       	mov	r22, r27
    13f4:	7a 2f       	mov	r23, r26
    13f6:	8f 2f       	mov	r24, r31
    13f8:	9e 2f       	mov	r25, r30
    13fa:	0e 94 ba 10 	call	0x2174	; 0x2174 <__adddi3>
    13fe:	62 2e       	mov	r6, r18
    1400:	73 2e       	mov	r7, r19
    1402:	b4 2f       	mov	r27, r20
    1404:	a5 2f       	mov	r26, r21
    1406:	f6 2f       	mov	r31, r22
    1408:	e7 2f       	mov	r30, r23
    140a:	58 2e       	mov	r5, r24
    140c:	49 2e       	mov	r4, r25
    140e:	08 e0       	ldi	r16, 0x08	; 8
    1410:	0e 94 9e 10 	call	0x213c	; 0x213c <__lshrdi3>
    1414:	2f 87       	std	Y+15, r18	; 0x0f
    1416:	38 8b       	std	Y+16, r19	; 0x10
    1418:	49 8b       	std	Y+17, r20	; 0x11
    141a:	5a 8b       	std	Y+18, r21	; 0x12
    141c:	6b 8b       	std	Y+19, r22	; 0x13
    141e:	7c 8b       	std	Y+20, r23	; 0x14
    1420:	8d 8b       	std	Y+21, r24	; 0x15
    1422:	9e 8b       	std	Y+22, r25	; 0x16
    1424:	a1 2c       	mov	r10, r1
    1426:	0f 2e       	mov	r0, r31
    1428:	f4 e6       	ldi	r31, 0x64	; 100
    142a:	bf 2e       	mov	r11, r31
    142c:	f0 2d       	mov	r31, r0
    142e:	c1 2c       	mov	r12, r1
    1430:	d1 2c       	mov	r13, r1
    1432:	e1 2c       	mov	r14, r1
    1434:	f1 2c       	mov	r15, r1
    1436:	00 e0       	ldi	r16, 0x00	; 0
    1438:	10 e0       	ldi	r17, 0x00	; 0
    143a:	26 2d       	mov	r18, r6
    143c:	37 2d       	mov	r19, r7
    143e:	4b 2f       	mov	r20, r27
    1440:	5a 2f       	mov	r21, r26
    1442:	6f 2f       	mov	r22, r31
    1444:	7e 2f       	mov	r23, r30
    1446:	85 2d       	mov	r24, r5
    1448:	94 2d       	mov	r25, r4
    144a:	0e 94 26 10 	call	0x204c	; 0x204c <__udivdi3>
    144e:	2b 83       	std	Y+3, r18	; 0x03
    1450:	3c 83       	std	Y+4, r19	; 0x04
    1452:	4d 83       	std	Y+5, r20	; 0x05
    1454:	5e 83       	std	Y+6, r21	; 0x06
    1456:	4b 80       	ldd	r4, Y+3	; 0x03
    1458:	5c 80       	ldd	r5, Y+4	; 0x04
    145a:	6d 80       	ldd	r6, Y+5	; 0x05
    145c:	7e 80       	ldd	r7, Y+6	; 0x06
    145e:	a4 e6       	ldi	r26, 0x64	; 100
    1460:	b0 e0       	ldi	r27, 0x00	; 0
    1462:	a3 01       	movw	r20, r6
    1464:	92 01       	movw	r18, r4
    1466:	0e 94 19 10 	call	0x2032	; 0x2032 <__muluhisi3>
    146a:	7b 01       	movw	r14, r22
    146c:	8c 01       	movw	r16, r24
    146e:	20 e0       	ldi	r18, 0x00	; 0
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	a9 01       	movw	r20, r18
    1474:	6f 83       	std	Y+7, r22	; 0x07
    1476:	f8 86       	std	Y+8, r15	; 0x08
    1478:	09 87       	std	Y+9, r16	; 0x09
    147a:	1a 87       	std	Y+10, r17	; 0x0a
    147c:	2b 87       	std	Y+11, r18	; 0x0b
    147e:	3c 87       	std	Y+12, r19	; 0x0c
    1480:	4d 87       	std	Y+13, r20	; 0x0d
    1482:	5e 87       	std	Y+14, r21	; 0x0e
    1484:	2f 85       	ldd	r18, Y+15	; 0x0f
    1486:	38 89       	ldd	r19, Y+16	; 0x10
    1488:	49 89       	ldd	r20, Y+17	; 0x11
    148a:	5a 89       	ldd	r21, Y+18	; 0x12
    148c:	6b 89       	ldd	r22, Y+19	; 0x13
    148e:	7c 89       	ldd	r23, Y+20	; 0x14
    1490:	8d 89       	ldd	r24, Y+21	; 0x15
    1492:	9e 89       	ldd	r25, Y+22	; 0x16
    1494:	ae 2c       	mov	r10, r14
    1496:	bf 2c       	mov	r11, r15
    1498:	c0 2e       	mov	r12, r16
    149a:	d1 2e       	mov	r13, r17
    149c:	e1 2c       	mov	r14, r1
    149e:	f1 2c       	mov	r15, r1
    14a0:	00 e0       	ldi	r16, 0x00	; 0
    14a2:	10 e0       	ldi	r17, 0x00	; 0
    14a4:	0e 94 cc 10 	call	0x2198	; 0x2198 <__cmpdi2>
    14a8:	29 f0       	breq	.+10     	; 0x14b4 <T0_voidWait_us+0x1da>
    14aa:	0f ef       	ldi	r16, 0xFF	; 255
    14ac:	40 1a       	sub	r4, r16
    14ae:	50 0a       	sbc	r5, r16
    14b0:	60 0a       	sbc	r6, r16
    14b2:	70 0a       	sbc	r7, r16
    14b4:	93 01       	movw	r18, r6
    14b6:	82 01       	movw	r16, r4
    14b8:	a4 2c       	mov	r10, r4
    14ba:	b1 2e       	mov	r11, r17
    14bc:	c2 2e       	mov	r12, r18
    14be:	d3 2e       	mov	r13, r19
    14c0:	e1 2c       	mov	r14, r1
    14c2:	f1 2c       	mov	r15, r1
    14c4:	00 e0       	ldi	r16, 0x00	; 0
    14c6:	10 e0       	ldi	r17, 0x00	; 0
    14c8:	2f 89       	ldd	r18, Y+23	; 0x17
    14ca:	32 2d       	mov	r19, r2
    14cc:	43 2d       	mov	r20, r3
    14ce:	58 2d       	mov	r21, r8
    14d0:	69 2d       	mov	r22, r9
    14d2:	78 8d       	ldd	r23, Y+24	; 0x18
    14d4:	89 81       	ldd	r24, Y+1	; 0x01
    14d6:	9a 81       	ldd	r25, Y+2	; 0x02
    14d8:	0e 94 26 10 	call	0x204c	; 0x204c <__udivdi3>
    14dc:	21 95       	neg	r18
    14de:	29 83       	std	Y+1, r18	; 0x01
    14e0:	18 c0       	rjmp	.+48     	; 0x1512 <T0_voidWait_us+0x238>
    14e2:	19 82       	std	Y+1, r1	; 0x01
    14e4:	41 2c       	mov	r4, r1
    14e6:	51 2c       	mov	r5, r1
    14e8:	32 01       	movw	r6, r4
    14ea:	43 94       	inc	r4
    14ec:	12 c0       	rjmp	.+36     	; 0x1512 <T0_voidWait_us+0x238>
    14ee:	19 82       	std	Y+1, r1	; 0x01
    14f0:	41 2c       	mov	r4, r1
    14f2:	51 2c       	mov	r5, r1
    14f4:	32 01       	movw	r6, r4
    14f6:	0d c0       	rjmp	.+26     	; 0x1512 <T0_voidWait_us+0x238>
    14f8:	39 81       	ldd	r19, Y+1	; 0x01
    14fa:	32 bf       	out	0x32, r19	; 50
    14fc:	08 b6       	in	r0, 0x38	; 56
    14fe:	00 fe       	sbrs	r0, 0
    1500:	fd cf       	rjmp	.-6      	; 0x14fc <T0_voidWait_us+0x222>
    1502:	88 b7       	in	r24, 0x38	; 56
    1504:	81 60       	ori	r24, 0x01	; 1
    1506:	88 bf       	out	0x38, r24	; 56
    1508:	41 e0       	ldi	r20, 0x01	; 1
    150a:	44 1a       	sub	r4, r20
    150c:	51 08       	sbc	r5, r1
    150e:	61 08       	sbc	r6, r1
    1510:	71 08       	sbc	r7, r1
    1512:	41 14       	cp	r4, r1
    1514:	51 04       	cpc	r5, r1
    1516:	61 04       	cpc	r6, r1
    1518:	71 04       	cpc	r7, r1
    151a:	71 f7       	brne	.-36     	; 0x14f8 <T0_voidWait_us+0x21e>
    151c:	68 96       	adiw	r28, 0x18	; 24
    151e:	0f b6       	in	r0, 0x3f	; 63
    1520:	f8 94       	cli
    1522:	de bf       	out	0x3e, r29	; 62
    1524:	0f be       	out	0x3f, r0	; 63
    1526:	cd bf       	out	0x3d, r28	; 61
    1528:	df 91       	pop	r29
    152a:	cf 91       	pop	r28
    152c:	1f 91       	pop	r17
    152e:	0f 91       	pop	r16
    1530:	ff 90       	pop	r15
    1532:	ef 90       	pop	r14
    1534:	df 90       	pop	r13
    1536:	cf 90       	pop	r12
    1538:	bf 90       	pop	r11
    153a:	af 90       	pop	r10
    153c:	9f 90       	pop	r9
    153e:	8f 90       	pop	r8
    1540:	7f 90       	pop	r7
    1542:	6f 90       	pop	r6
    1544:	5f 90       	pop	r5
    1546:	4f 90       	pop	r4
    1548:	3f 90       	pop	r3
    154a:	2f 90       	pop	r2
    154c:	08 95       	ret

0000154e <__vector_10>:
    154e:	1f 92       	push	r1
    1550:	0f 92       	push	r0
    1552:	0f b6       	in	r0, 0x3f	; 63
    1554:	0f 92       	push	r0
    1556:	11 24       	eor	r1, r1
    1558:	2f 93       	push	r18
    155a:	3f 93       	push	r19
    155c:	4f 93       	push	r20
    155e:	5f 93       	push	r21
    1560:	6f 93       	push	r22
    1562:	7f 93       	push	r23
    1564:	8f 93       	push	r24
    1566:	9f 93       	push	r25
    1568:	af 93       	push	r26
    156a:	bf 93       	push	r27
    156c:	ef 93       	push	r30
    156e:	ff 93       	push	r31
    1570:	e0 91 37 04 	lds	r30, 0x0437	; 0x800437 <T0_OC_CallBackFun>
    1574:	f0 91 38 04 	lds	r31, 0x0438	; 0x800438 <T0_OC_CallBackFun+0x1>
    1578:	30 97       	sbiw	r30, 0x00	; 0
    157a:	09 f0       	breq	.+2      	; 0x157e <__vector_10+0x30>
    157c:	09 95       	icall
    157e:	ff 91       	pop	r31
    1580:	ef 91       	pop	r30
    1582:	bf 91       	pop	r27
    1584:	af 91       	pop	r26
    1586:	9f 91       	pop	r25
    1588:	8f 91       	pop	r24
    158a:	7f 91       	pop	r23
    158c:	6f 91       	pop	r22
    158e:	5f 91       	pop	r21
    1590:	4f 91       	pop	r20
    1592:	3f 91       	pop	r19
    1594:	2f 91       	pop	r18
    1596:	0f 90       	pop	r0
    1598:	0f be       	out	0x3f, r0	; 63
    159a:	0f 90       	pop	r0
    159c:	1f 90       	pop	r1
    159e:	18 95       	reti

000015a0 <__vector_11>:
}
void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
    15a0:	1f 92       	push	r1
    15a2:	0f 92       	push	r0
    15a4:	0f b6       	in	r0, 0x3f	; 63
    15a6:	0f 92       	push	r0
    15a8:	11 24       	eor	r1, r1
    15aa:	2f 93       	push	r18
    15ac:	3f 93       	push	r19
    15ae:	4f 93       	push	r20
    15b0:	5f 93       	push	r21
    15b2:	6f 93       	push	r22
    15b4:	7f 93       	push	r23
    15b6:	8f 93       	push	r24
    15b8:	9f 93       	push	r25
    15ba:	af 93       	push	r26
    15bc:	bf 93       	push	r27
    15be:	ef 93       	push	r30
    15c0:	ff 93       	push	r31
    if (T0_OVF_CallBackFun != NULL)
    15c2:	e0 91 39 04 	lds	r30, 0x0439	; 0x800439 <T0_OVF_CallBackFun>
    15c6:	f0 91 3a 04 	lds	r31, 0x043A	; 0x80043a <T0_OVF_CallBackFun+0x1>
    15ca:	30 97       	sbiw	r30, 0x00	; 0
    15cc:	09 f0       	breq	.+2      	; 0x15d0 <__vector_11+0x30>
    {
        T0_OVF_CallBackFun();
    15ce:	09 95       	icall
    }
}
    15d0:	ff 91       	pop	r31
    15d2:	ef 91       	pop	r30
    15d4:	bf 91       	pop	r27
    15d6:	af 91       	pop	r26
    15d8:	9f 91       	pop	r25
    15da:	8f 91       	pop	r24
    15dc:	7f 91       	pop	r23
    15de:	6f 91       	pop	r22
    15e0:	5f 91       	pop	r21
    15e2:	4f 91       	pop	r20
    15e4:	3f 91       	pop	r19
    15e6:	2f 91       	pop	r18
    15e8:	0f 90       	pop	r0
    15ea:	0f be       	out	0x3f, r0	; 63
    15ec:	0f 90       	pop	r0
    15ee:	1f 90       	pop	r1
    15f0:	18 95       	reti

000015f2 <T1_voidInit>:
void T1_voidEnable_InterruptIC(void (*copyofFun)())
{
    /* OCA enable */
    SET_BIT(TIMSK, 5);

    T1_IC_CallBackFun = copyofFun;
    15f2:	80 31       	cpi	r24, 0x10	; 16
    15f4:	a0 f4       	brcc	.+40     	; 0x161e <T1_voidInit+0x2c>
    15f6:	9f b5       	in	r25, 0x2f	; 47
    15f8:	9c 7f       	andi	r25, 0xFC	; 252
    15fa:	9f bd       	out	0x2f, r25	; 47
    15fc:	9f b5       	in	r25, 0x2f	; 47
    15fe:	28 2f       	mov	r18, r24
    1600:	23 70       	andi	r18, 0x03	; 3
    1602:	92 2b       	or	r25, r18
    1604:	9f bd       	out	0x2f, r25	; 47
    1606:	9e b5       	in	r25, 0x2e	; 46
    1608:	97 7e       	andi	r25, 0xE7	; 231
    160a:	9e bd       	out	0x2e, r25	; 46
    160c:	2e b5       	in	r18, 0x2e	; 46
    160e:	98 2f       	mov	r25, r24
    1610:	9c 70       	andi	r25, 0x0C	; 12
    1612:	89 2f       	mov	r24, r25
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	88 0f       	add	r24, r24
    1618:	99 1f       	adc	r25, r25
    161a:	82 2b       	or	r24, r18
    161c:	8e bd       	out	0x2e, r24	; 46
    161e:	08 95       	ret

00001620 <T1_voidStart>:
    1620:	8e b5       	in	r24, 0x2e	; 46
    1622:	88 7f       	andi	r24, 0xF8	; 248
    1624:	8e bd       	out	0x2e, r24	; 46
    1626:	8e b5       	in	r24, 0x2e	; 46
    1628:	82 60       	ori	r24, 0x02	; 2
    162a:	8e bd       	out	0x2e, r24	; 46
    162c:	08 95       	ret

0000162e <T1_voidSet_OutputCompareAReg>:
    162e:	9b bd       	out	0x2b, r25	; 43
    1630:	8a bd       	out	0x2a, r24	; 42
    1632:	08 95       	ret

00001634 <T1_voidSet_InputCapturReg>:
    1634:	97 bd       	out	0x27, r25	; 39
    1636:	86 bd       	out	0x26, r24	; 38
    1638:	08 95       	ret

0000163a <T1_voidSet_OC1AMode>:
    163a:	88 23       	and	r24, r24
    163c:	19 f0       	breq	.+6      	; 0x1644 <T1_voidSet_OC1AMode+0xa>
    163e:	91 b3       	in	r25, 0x11	; 17
    1640:	90 62       	ori	r25, 0x20	; 32
    1642:	91 bb       	out	0x11, r25	; 17
    1644:	9f b5       	in	r25, 0x2f	; 47
    1646:	9f 73       	andi	r25, 0x3F	; 63
    1648:	9f bd       	out	0x2f, r25	; 47
    164a:	2f b5       	in	r18, 0x2f	; 47
    164c:	30 e4       	ldi	r19, 0x40	; 64
    164e:	83 9f       	mul	r24, r19
    1650:	c0 01       	movw	r24, r0
    1652:	11 24       	eor	r1, r1
    1654:	82 2b       	or	r24, r18
    1656:	8f bd       	out	0x2f, r24	; 47
    1658:	08 95       	ret

0000165a <__vector_9>:
}

void __vector_9(void) __attribute__((signal));
void __vector_9(void)
{
    165a:	1f 92       	push	r1
    165c:	0f 92       	push	r0
    165e:	0f b6       	in	r0, 0x3f	; 63
    1660:	0f 92       	push	r0
    1662:	11 24       	eor	r1, r1
    1664:	2f 93       	push	r18
    1666:	3f 93       	push	r19
    1668:	4f 93       	push	r20
    166a:	5f 93       	push	r21
    166c:	6f 93       	push	r22
    166e:	7f 93       	push	r23
    1670:	8f 93       	push	r24
    1672:	9f 93       	push	r25
    1674:	af 93       	push	r26
    1676:	bf 93       	push	r27
    1678:	ef 93       	push	r30
    167a:	ff 93       	push	r31
    if (T1_OVF_CallBackFun != NULL)
    167c:	e0 91 3d 04 	lds	r30, 0x043D	; 0x80043d <T1_OVF_CallBackFun>
    1680:	f0 91 3e 04 	lds	r31, 0x043E	; 0x80043e <T1_OVF_CallBackFun+0x1>
    1684:	30 97       	sbiw	r30, 0x00	; 0
    1686:	09 f0       	breq	.+2      	; 0x168a <__vector_9+0x30>
    {
        T1_OVF_CallBackFun();
    1688:	09 95       	icall
    }
}
    168a:	ff 91       	pop	r31
    168c:	ef 91       	pop	r30
    168e:	bf 91       	pop	r27
    1690:	af 91       	pop	r26
    1692:	9f 91       	pop	r25
    1694:	8f 91       	pop	r24
    1696:	7f 91       	pop	r23
    1698:	6f 91       	pop	r22
    169a:	5f 91       	pop	r21
    169c:	4f 91       	pop	r20
    169e:	3f 91       	pop	r19
    16a0:	2f 91       	pop	r18
    16a2:	0f 90       	pop	r0
    16a4:	0f be       	out	0x3f, r0	; 63
    16a6:	0f 90       	pop	r0
    16a8:	1f 90       	pop	r1
    16aa:	18 95       	reti

000016ac <__vector_8>:

void __vector_8(void) __attribute__((signal));
void __vector_8(void)
{
    16ac:	1f 92       	push	r1
    16ae:	0f 92       	push	r0
    16b0:	0f b6       	in	r0, 0x3f	; 63
    16b2:	0f 92       	push	r0
    16b4:	11 24       	eor	r1, r1
    16b6:	2f 93       	push	r18
    16b8:	3f 93       	push	r19
    16ba:	4f 93       	push	r20
    16bc:	5f 93       	push	r21
    16be:	6f 93       	push	r22
    16c0:	7f 93       	push	r23
    16c2:	8f 93       	push	r24
    16c4:	9f 93       	push	r25
    16c6:	af 93       	push	r26
    16c8:	bf 93       	push	r27
    16ca:	ef 93       	push	r30
    16cc:	ff 93       	push	r31
    if (T1_OCB_CallBackFun != NULL)
    16ce:	e0 91 3b 04 	lds	r30, 0x043B	; 0x80043b <T1_OCB_CallBackFun>
    16d2:	f0 91 3c 04 	lds	r31, 0x043C	; 0x80043c <T1_OCB_CallBackFun+0x1>
    16d6:	30 97       	sbiw	r30, 0x00	; 0
    16d8:	09 f0       	breq	.+2      	; 0x16dc <__vector_8+0x30>
    {
        T1_OCB_CallBackFun();
    16da:	09 95       	icall
    }
}
    16dc:	ff 91       	pop	r31
    16de:	ef 91       	pop	r30
    16e0:	bf 91       	pop	r27
    16e2:	af 91       	pop	r26
    16e4:	9f 91       	pop	r25
    16e6:	8f 91       	pop	r24
    16e8:	7f 91       	pop	r23
    16ea:	6f 91       	pop	r22
    16ec:	5f 91       	pop	r21
    16ee:	4f 91       	pop	r20
    16f0:	3f 91       	pop	r19
    16f2:	2f 91       	pop	r18
    16f4:	0f 90       	pop	r0
    16f6:	0f be       	out	0x3f, r0	; 63
    16f8:	0f 90       	pop	r0
    16fa:	1f 90       	pop	r1
    16fc:	18 95       	reti

000016fe <__vector_7>:

void __vector_7(void) __attribute__((signal));
void __vector_7(void)
{
    16fe:	1f 92       	push	r1
    1700:	0f 92       	push	r0
    1702:	0f b6       	in	r0, 0x3f	; 63
    1704:	0f 92       	push	r0
    1706:	11 24       	eor	r1, r1
    1708:	2f 93       	push	r18
    170a:	3f 93       	push	r19
    170c:	4f 93       	push	r20
    170e:	5f 93       	push	r21
    1710:	6f 93       	push	r22
    1712:	7f 93       	push	r23
    1714:	8f 93       	push	r24
    1716:	9f 93       	push	r25
    1718:	af 93       	push	r26
    171a:	bf 93       	push	r27
    171c:	ef 93       	push	r30
    171e:	ff 93       	push	r31
    if (T1_OCA_CallBackFun != NULL)
    1720:	e0 91 3f 04 	lds	r30, 0x043F	; 0x80043f <T1_OCA_CallBackFun>
    1724:	f0 91 40 04 	lds	r31, 0x0440	; 0x800440 <T1_OCA_CallBackFun+0x1>
    1728:	30 97       	sbiw	r30, 0x00	; 0
    172a:	09 f0       	breq	.+2      	; 0x172e <__vector_7+0x30>
    {
        T1_OCA_CallBackFun();
    172c:	09 95       	icall
    }
}
    172e:	ff 91       	pop	r31
    1730:	ef 91       	pop	r30
    1732:	bf 91       	pop	r27
    1734:	af 91       	pop	r26
    1736:	9f 91       	pop	r25
    1738:	8f 91       	pop	r24
    173a:	7f 91       	pop	r23
    173c:	6f 91       	pop	r22
    173e:	5f 91       	pop	r21
    1740:	4f 91       	pop	r20
    1742:	3f 91       	pop	r19
    1744:	2f 91       	pop	r18
    1746:	0f 90       	pop	r0
    1748:	0f be       	out	0x3f, r0	; 63
    174a:	0f 90       	pop	r0
    174c:	1f 90       	pop	r1
    174e:	18 95       	reti

00001750 <T2_voidInit>:
{
    T2_OVF_CallBackFun = copyofCB;
}
void T2_voidSetCallbackOC(pf copyofCB)
{
    T2_OC_CallBackFun = copyofCB;
    1750:	85 b5       	in	r24, 0x25	; 37
    1752:	87 7f       	andi	r24, 0xF7	; 247
    1754:	85 bd       	out	0x25, r24	; 37
    1756:	85 b5       	in	r24, 0x25	; 37
    1758:	8f 7b       	andi	r24, 0xBF	; 191
    175a:	85 bd       	out	0x25, r24	; 37
    175c:	85 b5       	in	r24, 0x25	; 37
    175e:	85 bd       	out	0x25, r24	; 37
    1760:	08 95       	ret

00001762 <T2_voidEnableInteruptOV>:
    1762:	89 b7       	in	r24, 0x39	; 57
    1764:	80 64       	ori	r24, 0x40	; 64
    1766:	89 bf       	out	0x39, r24	; 57
    1768:	08 95       	ret

0000176a <T2_voidStart>:
    176a:	85 b5       	in	r24, 0x25	; 37
    176c:	88 7f       	andi	r24, 0xF8	; 248
    176e:	85 bd       	out	0x25, r24	; 37
    1770:	85 b5       	in	r24, 0x25	; 37
    1772:	86 60       	ori	r24, 0x06	; 6
    1774:	85 bd       	out	0x25, r24	; 37
    1776:	08 95       	ret

00001778 <T2_voidStop>:
    1778:	85 b5       	in	r24, 0x25	; 37
    177a:	88 7f       	andi	r24, 0xF8	; 248
    177c:	85 bd       	out	0x25, r24	; 37
    177e:	08 95       	ret

00001780 <T2_voidSetCallbackOV>:
    1780:	90 93 44 04 	sts	0x0444, r25	; 0x800444 <T2_OVF_CallBackFun+0x1>
    1784:	80 93 43 04 	sts	0x0443, r24	; 0x800443 <T2_OVF_CallBackFun>
    1788:	08 95       	ret

0000178a <__vector_4>:
}
void __vector_4(void) __attribute__((signal));
void __vector_4(void)
{
    178a:	1f 92       	push	r1
    178c:	0f 92       	push	r0
    178e:	0f b6       	in	r0, 0x3f	; 63
    1790:	0f 92       	push	r0
    1792:	11 24       	eor	r1, r1
    1794:	2f 93       	push	r18
    1796:	3f 93       	push	r19
    1798:	4f 93       	push	r20
    179a:	5f 93       	push	r21
    179c:	6f 93       	push	r22
    179e:	7f 93       	push	r23
    17a0:	8f 93       	push	r24
    17a2:	9f 93       	push	r25
    17a4:	af 93       	push	r26
    17a6:	bf 93       	push	r27
    17a8:	ef 93       	push	r30
    17aa:	ff 93       	push	r31
    if (T2_OC_CallBackFun != NULL)
    17ac:	e0 91 45 04 	lds	r30, 0x0445	; 0x800445 <T2_OC_CallBackFun>
    17b0:	f0 91 46 04 	lds	r31, 0x0446	; 0x800446 <T2_OC_CallBackFun+0x1>
    17b4:	30 97       	sbiw	r30, 0x00	; 0
    17b6:	09 f0       	breq	.+2      	; 0x17ba <__vector_4+0x30>
    {
        T2_OC_CallBackFun();
    17b8:	09 95       	icall
    }
}
    17ba:	ff 91       	pop	r31
    17bc:	ef 91       	pop	r30
    17be:	bf 91       	pop	r27
    17c0:	af 91       	pop	r26
    17c2:	9f 91       	pop	r25
    17c4:	8f 91       	pop	r24
    17c6:	7f 91       	pop	r23
    17c8:	6f 91       	pop	r22
    17ca:	5f 91       	pop	r21
    17cc:	4f 91       	pop	r20
    17ce:	3f 91       	pop	r19
    17d0:	2f 91       	pop	r18
    17d2:	0f 90       	pop	r0
    17d4:	0f be       	out	0x3f, r0	; 63
    17d6:	0f 90       	pop	r0
    17d8:	1f 90       	pop	r1
    17da:	18 95       	reti

000017dc <__vector_5>:

void __vector_5(void) __attribute__((signal));
void __vector_5(void)
{
    17dc:	1f 92       	push	r1
    17de:	0f 92       	push	r0
    17e0:	0f b6       	in	r0, 0x3f	; 63
    17e2:	0f 92       	push	r0
    17e4:	11 24       	eor	r1, r1
    17e6:	2f 93       	push	r18
    17e8:	3f 93       	push	r19
    17ea:	4f 93       	push	r20
    17ec:	5f 93       	push	r21
    17ee:	6f 93       	push	r22
    17f0:	7f 93       	push	r23
    17f2:	8f 93       	push	r24
    17f4:	9f 93       	push	r25
    17f6:	af 93       	push	r26
    17f8:	bf 93       	push	r27
    17fa:	ef 93       	push	r30
    17fc:	ff 93       	push	r31
    if (T2_OVF_CallBackFun != NULL)
    17fe:	e0 91 43 04 	lds	r30, 0x0443	; 0x800443 <T2_OVF_CallBackFun>
    1802:	f0 91 44 04 	lds	r31, 0x0444	; 0x800444 <T2_OVF_CallBackFun+0x1>
    1806:	30 97       	sbiw	r30, 0x00	; 0
    1808:	09 f0       	breq	.+2      	; 0x180c <__vector_5+0x30>
    {
        T2_OVF_CallBackFun();
    180a:	09 95       	icall
    }
}
    180c:	ff 91       	pop	r31
    180e:	ef 91       	pop	r30
    1810:	bf 91       	pop	r27
    1812:	af 91       	pop	r26
    1814:	9f 91       	pop	r25
    1816:	8f 91       	pop	r24
    1818:	7f 91       	pop	r23
    181a:	6f 91       	pop	r22
    181c:	5f 91       	pop	r21
    181e:	4f 91       	pop	r20
    1820:	3f 91       	pop	r19
    1822:	2f 91       	pop	r18
    1824:	0f 90       	pop	r0
    1826:	0f be       	out	0x3f, r0	; 63
    1828:	0f 90       	pop	r0
    182a:	1f 90       	pop	r1
    182c:	18 95       	reti

0000182e <UART_Init>:
void UART_UDRE_IEN(void (*callbackfun)())
{
    // enable UDRE
    SET_BIT(UCSRB, 5);
    // Set callback function
    UART_UDRE_CallBack = callbackfun;
    182e:	cf 93       	push	r28
    1830:	df 93       	push	r29
    1832:	cb e9       	ldi	r28, 0x9B	; 155
    1834:	d3 e0       	ldi	r29, 0x03	; 3
    1836:	8c 81       	ldd	r24, Y+4	; 0x04
    1838:	9d 81       	ldd	r25, Y+5	; 0x05
    183a:	ae 81       	ldd	r26, Y+6	; 0x06
    183c:	bf 81       	ldd	r27, Y+7	; 0x07
    183e:	88 0f       	add	r24, r24
    1840:	99 1f       	adc	r25, r25
    1842:	aa 1f       	adc	r26, r26
    1844:	bb 1f       	adc	r27, r27
    1846:	88 0f       	add	r24, r24
    1848:	99 1f       	adc	r25, r25
    184a:	aa 1f       	adc	r26, r26
    184c:	bb 1f       	adc	r27, r27
    184e:	9c 01       	movw	r18, r24
    1850:	ad 01       	movw	r20, r26
    1852:	22 0f       	add	r18, r18
    1854:	33 1f       	adc	r19, r19
    1856:	44 1f       	adc	r20, r20
    1858:	55 1f       	adc	r21, r21
    185a:	22 0f       	add	r18, r18
    185c:	33 1f       	adc	r19, r19
    185e:	44 1f       	adc	r20, r20
    1860:	55 1f       	adc	r21, r21
    1862:	60 e0       	ldi	r22, 0x00	; 0
    1864:	74 e2       	ldi	r23, 0x24	; 36
    1866:	84 ef       	ldi	r24, 0xF4	; 244
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <__udivmodsi4>
    186e:	21 50       	subi	r18, 0x01	; 1
    1870:	10 bc       	out	0x20, r1	; 32
    1872:	29 b9       	out	0x09, r18	; 9
    1874:	89 81       	ldd	r24, Y+1	; 0x01
    1876:	87 30       	cpi	r24, 0x07	; 7
    1878:	d1 f0       	breq	.+52     	; 0x18ae <UART_Init+0x80>
    187a:	28 f4       	brcc	.+10     	; 0x1886 <UART_Init+0x58>
    187c:	85 30       	cpi	r24, 0x05	; 5
    187e:	59 f0       	breq	.+22     	; 0x1896 <UART_Init+0x68>
    1880:	86 30       	cpi	r24, 0x06	; 6
    1882:	79 f0       	breq	.+30     	; 0x18a2 <UART_Init+0x74>
    1884:	26 c0       	rjmp	.+76     	; 0x18d2 <UART_Init+0xa4>
    1886:	88 30       	cpi	r24, 0x08	; 8
    1888:	19 f0       	breq	.+6      	; 0x1890 <UART_Init+0x62>
    188a:	89 30       	cpi	r24, 0x09	; 9
    188c:	e1 f0       	breq	.+56     	; 0x18c6 <UART_Init+0x98>
    188e:	21 c0       	rjmp	.+66     	; 0x18d2 <UART_Init+0xa4>
    1890:	96 e8       	ldi	r25, 0x86	; 134
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	20 c0       	rjmp	.+64     	; 0x18d6 <UART_Init+0xa8>
    1896:	8a b1       	in	r24, 0x0a	; 10
    1898:	8b 7f       	andi	r24, 0xFB	; 251
    189a:	8a b9       	out	0x0a, r24	; 10
    189c:	90 e8       	ldi	r25, 0x80	; 128
    189e:	81 e0       	ldi	r24, 0x01	; 1
    18a0:	1a c0       	rjmp	.+52     	; 0x18d6 <UART_Init+0xa8>
    18a2:	8a b1       	in	r24, 0x0a	; 10
    18a4:	8b 7f       	andi	r24, 0xFB	; 251
    18a6:	8a b9       	out	0x0a, r24	; 10
    18a8:	92 e8       	ldi	r25, 0x82	; 130
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	14 c0       	rjmp	.+40     	; 0x18d6 <UART_Init+0xa8>
    18ae:	80 b5       	in	r24, 0x20	; 32
    18b0:	8d 7f       	andi	r24, 0xFD	; 253
    18b2:	80 bd       	out	0x20, r24	; 32
    18b4:	80 b5       	in	r24, 0x20	; 32
    18b6:	84 60       	ori	r24, 0x04	; 4
    18b8:	80 bd       	out	0x20, r24	; 32
    18ba:	8a b1       	in	r24, 0x0a	; 10
    18bc:	8b 7f       	andi	r24, 0xFB	; 251
    18be:	8a b9       	out	0x0a, r24	; 10
    18c0:	90 e8       	ldi	r25, 0x80	; 128
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	08 c0       	rjmp	.+16     	; 0x18d6 <UART_Init+0xa8>
    18c6:	8a b1       	in	r24, 0x0a	; 10
    18c8:	84 60       	ori	r24, 0x04	; 4
    18ca:	8a b9       	out	0x0a, r24	; 10
    18cc:	96 e8       	ldi	r25, 0x86	; 134
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	02 c0       	rjmp	.+4      	; 0x18d6 <UART_Init+0xa8>
    18d2:	90 e8       	ldi	r25, 0x80	; 128
    18d4:	80 e0       	ldi	r24, 0x00	; 0
    18d6:	20 91 9d 03 	lds	r18, 0x039D	; 0x80039d <UART_Configuration+0x2>
    18da:	21 30       	cpi	r18, 0x01	; 1
    18dc:	31 f0       	breq	.+12     	; 0x18ea <UART_Init+0xbc>
    18de:	18 f0       	brcs	.+6      	; 0x18e6 <UART_Init+0xb8>
    18e0:	22 30       	cpi	r18, 0x02	; 2
    18e2:	31 f0       	breq	.+12     	; 0x18f0 <UART_Init+0xc2>
    18e4:	07 c0       	rjmp	.+14     	; 0x18f4 <UART_Init+0xc6>
    18e6:	9f 7c       	andi	r25, 0xCF	; 207
    18e8:	06 c0       	rjmp	.+12     	; 0x18f6 <UART_Init+0xc8>
    18ea:	9f 7e       	andi	r25, 0xEF	; 239
    18ec:	90 62       	ori	r25, 0x20	; 32
    18ee:	03 c0       	rjmp	.+6      	; 0x18f6 <UART_Init+0xc8>
    18f0:	90 63       	ori	r25, 0x30	; 48
    18f2:	01 c0       	rjmp	.+2      	; 0x18f6 <UART_Init+0xc8>
    18f4:	80 e0       	ldi	r24, 0x00	; 0
    18f6:	20 91 9e 03 	lds	r18, 0x039E	; 0x80039e <UART_Configuration+0x3>
    18fa:	21 30       	cpi	r18, 0x01	; 1
    18fc:	19 f0       	breq	.+6      	; 0x1904 <UART_Init+0xd6>
    18fe:	22 30       	cpi	r18, 0x02	; 2
    1900:	19 f0       	breq	.+6      	; 0x1908 <UART_Init+0xda>
    1902:	04 c0       	rjmp	.+8      	; 0x190c <UART_Init+0xde>
    1904:	97 7f       	andi	r25, 0xF7	; 247
    1906:	03 c0       	rjmp	.+6      	; 0x190e <UART_Init+0xe0>
    1908:	98 60       	ori	r25, 0x08	; 8
    190a:	01 c0       	rjmp	.+2      	; 0x190e <UART_Init+0xe0>
    190c:	80 e0       	ldi	r24, 0x00	; 0
    190e:	20 91 9b 03 	lds	r18, 0x039B	; 0x80039b <UART_Configuration>
    1912:	21 30       	cpi	r18, 0x01	; 1
    1914:	41 f0       	breq	.+16     	; 0x1926 <UART_Init+0xf8>
    1916:	18 f0       	brcs	.+6      	; 0x191e <UART_Init+0xf0>
    1918:	22 30       	cpi	r18, 0x02	; 2
    191a:	49 f0       	breq	.+18     	; 0x192e <UART_Init+0x100>
    191c:	0f c0       	rjmp	.+30     	; 0x193c <UART_Init+0x10e>
    191e:	2a b1       	in	r18, 0x0a	; 10
    1920:	20 61       	ori	r18, 0x10	; 16
    1922:	2a b9       	out	0x0a, r18	; 10
    1924:	0c c0       	rjmp	.+24     	; 0x193e <UART_Init+0x110>
    1926:	2a b1       	in	r18, 0x0a	; 10
    1928:	28 60       	ori	r18, 0x08	; 8
    192a:	2a b9       	out	0x0a, r18	; 10
    192c:	08 c0       	rjmp	.+16     	; 0x193e <UART_Init+0x110>
    192e:	2a b1       	in	r18, 0x0a	; 10
    1930:	28 60       	ori	r18, 0x08	; 8
    1932:	2a b9       	out	0x0a, r18	; 10
    1934:	2a b1       	in	r18, 0x0a	; 10
    1936:	20 61       	ori	r18, 0x10	; 16
    1938:	2a b9       	out	0x0a, r18	; 10
    193a:	01 c0       	rjmp	.+2      	; 0x193e <UART_Init+0x110>
    193c:	80 e0       	ldi	r24, 0x00	; 0
    193e:	90 bd       	out	0x20, r25	; 32
    1940:	df 91       	pop	r29
    1942:	cf 91       	pop	r28
    1944:	08 95       	ret

00001946 <UART_TransmitBusyWait>:
    1946:	5d 9b       	sbis	0x0b, 5	; 11
    1948:	fe cf       	rjmp	.-4      	; 0x1946 <UART_TransmitBusyWait>
    194a:	9a b1       	in	r25, 0x0a	; 10
    194c:	9a b9       	out	0x0a, r25	; 10
    194e:	8c b9       	out	0x0c, r24	; 12
    1950:	85 e0       	ldi	r24, 0x05	; 5
    1952:	08 95       	ret

00001954 <__vector_13>:
14	USART Data Register Empty	USART_UDRE_vect
15	USART Tx Complete			USART_TX_vect */

void __vector_13(void) __attribute__((signal));
void __vector_13(void)
{
    1954:	1f 92       	push	r1
    1956:	0f 92       	push	r0
    1958:	0f b6       	in	r0, 0x3f	; 63
    195a:	0f 92       	push	r0
    195c:	11 24       	eor	r1, r1
    195e:	2f 93       	push	r18
    1960:	3f 93       	push	r19
    1962:	4f 93       	push	r20
    1964:	5f 93       	push	r21
    1966:	6f 93       	push	r22
    1968:	7f 93       	push	r23
    196a:	8f 93       	push	r24
    196c:	9f 93       	push	r25
    196e:	af 93       	push	r26
    1970:	bf 93       	push	r27
    1972:	ef 93       	push	r30
    1974:	ff 93       	push	r31
    if (UART_RXC_CallBack != NULL)
    1976:	e0 91 15 05 	lds	r30, 0x0515	; 0x800515 <UART_RXC_CallBack>
    197a:	f0 91 16 05 	lds	r31, 0x0516	; 0x800516 <UART_RXC_CallBack+0x1>
    197e:	30 97       	sbiw	r30, 0x00	; 0
    1980:	09 f0       	breq	.+2      	; 0x1984 <__vector_13+0x30>
    {
        UART_RXC_CallBack();
    1982:	09 95       	icall
    }
}
    1984:	ff 91       	pop	r31
    1986:	ef 91       	pop	r30
    1988:	bf 91       	pop	r27
    198a:	af 91       	pop	r26
    198c:	9f 91       	pop	r25
    198e:	8f 91       	pop	r24
    1990:	7f 91       	pop	r23
    1992:	6f 91       	pop	r22
    1994:	5f 91       	pop	r21
    1996:	4f 91       	pop	r20
    1998:	3f 91       	pop	r19
    199a:	2f 91       	pop	r18
    199c:	0f 90       	pop	r0
    199e:	0f be       	out	0x3f, r0	; 63
    19a0:	0f 90       	pop	r0
    19a2:	1f 90       	pop	r1
    19a4:	18 95       	reti

000019a6 <__vector_14>:

void __vector_14(void) __attribute__((signal));
void __vector_14(void)
{
    19a6:	1f 92       	push	r1
    19a8:	0f 92       	push	r0
    19aa:	0f b6       	in	r0, 0x3f	; 63
    19ac:	0f 92       	push	r0
    19ae:	11 24       	eor	r1, r1
    19b0:	2f 93       	push	r18
    19b2:	3f 93       	push	r19
    19b4:	4f 93       	push	r20
    19b6:	5f 93       	push	r21
    19b8:	6f 93       	push	r22
    19ba:	7f 93       	push	r23
    19bc:	8f 93       	push	r24
    19be:	9f 93       	push	r25
    19c0:	af 93       	push	r26
    19c2:	bf 93       	push	r27
    19c4:	ef 93       	push	r30
    19c6:	ff 93       	push	r31
    if (UART_UDRE_CallBack != NULL)
    19c8:	e0 91 13 05 	lds	r30, 0x0513	; 0x800513 <UART_UDRE_CallBack>
    19cc:	f0 91 14 05 	lds	r31, 0x0514	; 0x800514 <UART_UDRE_CallBack+0x1>
    19d0:	30 97       	sbiw	r30, 0x00	; 0
    19d2:	09 f0       	breq	.+2      	; 0x19d6 <__vector_14+0x30>
    {
        UART_UDRE_CallBack();
    19d4:	09 95       	icall
    }
}
    19d6:	ff 91       	pop	r31
    19d8:	ef 91       	pop	r30
    19da:	bf 91       	pop	r27
    19dc:	af 91       	pop	r26
    19de:	9f 91       	pop	r25
    19e0:	8f 91       	pop	r24
    19e2:	7f 91       	pop	r23
    19e4:	6f 91       	pop	r22
    19e6:	5f 91       	pop	r21
    19e8:	4f 91       	pop	r20
    19ea:	3f 91       	pop	r19
    19ec:	2f 91       	pop	r18
    19ee:	0f 90       	pop	r0
    19f0:	0f be       	out	0x3f, r0	; 63
    19f2:	0f 90       	pop	r0
    19f4:	1f 90       	pop	r1
    19f6:	18 95       	reti

000019f8 <__vector_15>:

void __vector_15(void) __attribute__((signal));
void __vector_15(void)
{
    19f8:	1f 92       	push	r1
    19fa:	0f 92       	push	r0
    19fc:	0f b6       	in	r0, 0x3f	; 63
    19fe:	0f 92       	push	r0
    1a00:	11 24       	eor	r1, r1
    1a02:	2f 93       	push	r18
    1a04:	3f 93       	push	r19
    1a06:	4f 93       	push	r20
    1a08:	5f 93       	push	r21
    1a0a:	6f 93       	push	r22
    1a0c:	7f 93       	push	r23
    1a0e:	8f 93       	push	r24
    1a10:	9f 93       	push	r25
    1a12:	af 93       	push	r26
    1a14:	bf 93       	push	r27
    1a16:	ef 93       	push	r30
    1a18:	ff 93       	push	r31
    if (UART_TXC_CallBack != NULL)
    1a1a:	e0 91 47 04 	lds	r30, 0x0447	; 0x800447 <UART_TXC_CallBack>
    1a1e:	f0 91 48 04 	lds	r31, 0x0448	; 0x800448 <UART_TXC_CallBack+0x1>
    1a22:	30 97       	sbiw	r30, 0x00	; 0
    1a24:	09 f0       	breq	.+2      	; 0x1a28 <__vector_15+0x30>
    {
        UART_TXC_CallBack();
    1a26:	09 95       	icall
    }
    1a28:	ff 91       	pop	r31
    1a2a:	ef 91       	pop	r30
    1a2c:	bf 91       	pop	r27
    1a2e:	af 91       	pop	r26
    1a30:	9f 91       	pop	r25
    1a32:	8f 91       	pop	r24
    1a34:	7f 91       	pop	r23
    1a36:	6f 91       	pop	r22
    1a38:	5f 91       	pop	r21
    1a3a:	4f 91       	pop	r20
    1a3c:	3f 91       	pop	r19
    1a3e:	2f 91       	pop	r18
    1a40:	0f 90       	pop	r0
    1a42:	0f be       	out	0x3f, r0	; 63
    1a44:	0f 90       	pop	r0
    1a46:	1f 90       	pop	r1
    1a48:	18 95       	reti

00001a4a <TD_delay_us>:

#include "../MCAL/TIMER0/timer0_interface.h"
#include "TD_delay.h"

void TD_delay_us(u64 prd)
{
    1a4a:	cf 92       	push	r12
    1a4c:	df 92       	push	r13
    1a4e:	ef 92       	push	r14
    1a50:	ff 92       	push	r15
    1a52:	0f 93       	push	r16
    1a54:	1f 93       	push	r17
    1a56:	cf 93       	push	r28
    1a58:	df 93       	push	r29
    1a5a:	c2 2e       	mov	r12, r18
    1a5c:	d3 2e       	mov	r13, r19
    1a5e:	e4 2e       	mov	r14, r20
    1a60:	f5 2e       	mov	r15, r21
    1a62:	06 2f       	mov	r16, r22
    1a64:	17 2f       	mov	r17, r23
    1a66:	d8 2f       	mov	r29, r24
    1a68:	c9 2f       	mov	r28, r25

	T0_voidInit();
    1a6a:	0e 94 57 09 	call	0x12ae	; 0x12ae <T0_voidInit>
	T0_voidStart();
    1a6e:	0e 94 62 09 	call	0x12c4	; 0x12c4 <T0_voidStart>

	T0_voidWait_us(prd);
    1a72:	2c 2d       	mov	r18, r12
    1a74:	3d 2d       	mov	r19, r13
    1a76:	4e 2d       	mov	r20, r14
    1a78:	5f 2d       	mov	r21, r15
    1a7a:	60 2f       	mov	r22, r16
    1a7c:	71 2f       	mov	r23, r17
    1a7e:	8d 2f       	mov	r24, r29
    1a80:	9c 2f       	mov	r25, r28
    1a82:	0e 94 6d 09 	call	0x12da	; 0x12da <T0_voidWait_us>

	T0_voidStop();
    1a86:	0e 94 69 09 	call	0x12d2	; 0x12d2 <T0_voidStop>
}
    1a8a:	df 91       	pop	r29
    1a8c:	cf 91       	pop	r28
    1a8e:	1f 91       	pop	r17
    1a90:	0f 91       	pop	r16
    1a92:	ff 90       	pop	r15
    1a94:	ef 90       	pop	r14
    1a96:	df 90       	pop	r13
    1a98:	cf 90       	pop	r12
    1a9a:	08 95       	ret

00001a9c <TD_delay_ms>:

void TD_delay_ms(u64 prd)
{
    1a9c:	4f 92       	push	r4
    1a9e:	5f 92       	push	r5
    1aa0:	6f 92       	push	r6
    1aa2:	7f 92       	push	r7
    1aa4:	8f 92       	push	r8
    1aa6:	9f 92       	push	r9
    1aa8:	af 92       	push	r10
    1aaa:	bf 92       	push	r11
    1aac:	cf 92       	push	r12
    1aae:	df 92       	push	r13
    1ab0:	ef 92       	push	r14
    1ab2:	ff 92       	push	r15
    1ab4:	0f 93       	push	r16
    1ab6:	1f 93       	push	r17
    1ab8:	cf 93       	push	r28
    1aba:	df 93       	push	r29
    1abc:	42 2e       	mov	r4, r18
    1abe:	53 2e       	mov	r5, r19
    1ac0:	64 2e       	mov	r6, r20
    1ac2:	75 2e       	mov	r7, r21
    1ac4:	86 2e       	mov	r8, r22
    1ac6:	97 2e       	mov	r9, r23
    1ac8:	d8 2f       	mov	r29, r24
    1aca:	c9 2f       	mov	r28, r25

	T0_voidInit();
    1acc:	0e 94 57 09 	call	0x12ae	; 0x12ae <T0_voidInit>
	T0_voidStart();
    1ad0:	0e 94 62 09 	call	0x12c4	; 0x12c4 <T0_voidStart>

	T0_voidWait_us(prd * 1000);
    1ad4:	24 2d       	mov	r18, r4
    1ad6:	35 2d       	mov	r19, r5
    1ad8:	46 2d       	mov	r20, r6
    1ada:	57 2d       	mov	r21, r7
    1adc:	68 2d       	mov	r22, r8
    1ade:	79 2d       	mov	r23, r9
    1ae0:	8d 2f       	mov	r24, r29
    1ae2:	9c 2f       	mov	r25, r28
    1ae4:	02 e0       	ldi	r16, 0x02	; 2
    1ae6:	0e 94 83 10 	call	0x2106	; 0x2106 <__ashldi3>
    1aea:	a2 2e       	mov	r10, r18
    1aec:	b3 2e       	mov	r11, r19
    1aee:	c4 2e       	mov	r12, r20
    1af0:	d5 2e       	mov	r13, r21
    1af2:	e6 2e       	mov	r14, r22
    1af4:	f7 2e       	mov	r15, r23
    1af6:	e8 2f       	mov	r30, r24
    1af8:	19 2f       	mov	r17, r25
    1afa:	05 e0       	ldi	r16, 0x05	; 5
    1afc:	0e 94 83 10 	call	0x2106	; 0x2106 <__ashldi3>
    1b00:	0e 2f       	mov	r16, r30
    1b02:	0e 94 c3 10 	call	0x2186	; 0x2186 <__subdi3>
    1b06:	a4 2c       	mov	r10, r4
    1b08:	b5 2c       	mov	r11, r5
    1b0a:	c6 2c       	mov	r12, r6
    1b0c:	d7 2c       	mov	r13, r7
    1b0e:	e8 2c       	mov	r14, r8
    1b10:	f9 2c       	mov	r15, r9
    1b12:	0d 2f       	mov	r16, r29
    1b14:	1c 2f       	mov	r17, r28
    1b16:	0e 94 ba 10 	call	0x2174	; 0x2174 <__adddi3>
    1b1a:	03 e0       	ldi	r16, 0x03	; 3
    1b1c:	0e 94 83 10 	call	0x2106	; 0x2106 <__ashldi3>
    1b20:	0e 94 6d 09 	call	0x12da	; 0x12da <T0_voidWait_us>

	T0_voidStop();
    1b24:	0e 94 69 09 	call	0x12d2	; 0x12d2 <T0_voidStop>
    1b28:	df 91       	pop	r29
    1b2a:	cf 91       	pop	r28
    1b2c:	1f 91       	pop	r17
    1b2e:	0f 91       	pop	r16
    1b30:	ff 90       	pop	r15
    1b32:	ef 90       	pop	r14
    1b34:	df 90       	pop	r13
    1b36:	cf 90       	pop	r12
    1b38:	bf 90       	pop	r11
    1b3a:	af 90       	pop	r10
    1b3c:	9f 90       	pop	r9
    1b3e:	8f 90       	pop	r8
    1b40:	7f 90       	pop	r7
    1b42:	6f 90       	pop	r6
    1b44:	5f 90       	pop	r5
    1b46:	4f 90       	pop	r4
    1b48:	08 95       	ret

00001b4a <PWM1_voidInit_Channel_A>:
    Reg_Value = ((1000 - duty) * (TOP_VALUE + 1)) / 100;
#endif

#endif

    T1_voidSet_OutputCompareBReg(Reg_Value);
    1b4a:	8e e0       	ldi	r24, 0x0E	; 14
    1b4c:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <T1_voidInit>
    1b50:	82 e0       	ldi	r24, 0x02	; 2
    1b52:	0e 94 1d 0b 	call	0x163a	; 0x163a <T1_voidSet_OC1AMode>
    1b56:	8f e3       	ldi	r24, 0x3F	; 63
    1b58:	9c e9       	ldi	r25, 0x9C	; 156
    1b5a:	0e 94 1a 0b 	call	0x1634	; 0x1634 <T1_voidSet_InputCapturReg>
    1b5e:	08 95       	ret

00001b60 <PWM1_voidSetDuty_Channel_A>:
    1b60:	9c 01       	movw	r18, r24
    1b62:	a0 e4       	ldi	r26, 0x40	; 64
    1b64:	bc e9       	ldi	r27, 0x9C	; 156
    1b66:	0e 94 0a 10 	call	0x2014	; 0x2014 <__umulhisi3>
    1b6a:	28 ee       	ldi	r18, 0xE8	; 232
    1b6c:	33 e0       	ldi	r19, 0x03	; 3
    1b6e:	40 e0       	ldi	r20, 0x00	; 0
    1b70:	50 e0       	ldi	r21, 0x00	; 0
    1b72:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <__udivmodsi4>
    1b76:	c9 01       	movw	r24, r18
    1b78:	0e 94 17 0b 	call	0x162e	; 0x162e <T1_voidSet_OutputCompareAReg>
    1b7c:	08 95       	ret

00001b7e <PWM1_voidStart>:
}

void PWM1_voidStart()
{
    T1_voidStart();
    1b7e:	0e 94 10 0b 	call	0x1620	; 0x1620 <T1_voidStart>
    1b82:	08 95       	ret

00001b84 <__subsf3>:
    1b84:	50 58       	subi	r21, 0x80	; 128

00001b86 <__addsf3>:
    1b86:	bb 27       	eor	r27, r27
    1b88:	aa 27       	eor	r26, r26
    1b8a:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <__addsf3x>
    1b8e:	0c 94 ae 0f 	jmp	0x1f5c	; 0x1f5c <__fp_round>
    1b92:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <__fp_pscA>
    1b96:	38 f0       	brcs	.+14     	; 0x1ba6 <__addsf3+0x20>
    1b98:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <__fp_pscB>
    1b9c:	20 f0       	brcs	.+8      	; 0x1ba6 <__addsf3+0x20>
    1b9e:	39 f4       	brne	.+14     	; 0x1bae <__addsf3+0x28>
    1ba0:	9f 3f       	cpi	r25, 0xFF	; 255
    1ba2:	19 f4       	brne	.+6      	; 0x1baa <__addsf3+0x24>
    1ba4:	26 f4       	brtc	.+8      	; 0x1bae <__addsf3+0x28>
    1ba6:	0c 94 8d 0f 	jmp	0x1f1a	; 0x1f1a <__fp_nan>
    1baa:	0e f4       	brtc	.+2      	; 0x1bae <__addsf3+0x28>
    1bac:	e0 95       	com	r30
    1bae:	e7 fb       	bst	r30, 7
    1bb0:	0c 94 87 0f 	jmp	0x1f0e	; 0x1f0e <__fp_inf>

00001bb4 <__addsf3x>:
    1bb4:	e9 2f       	mov	r30, r25
    1bb6:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <__fp_split3>
    1bba:	58 f3       	brcs	.-42     	; 0x1b92 <__addsf3+0xc>
    1bbc:	ba 17       	cp	r27, r26
    1bbe:	62 07       	cpc	r22, r18
    1bc0:	73 07       	cpc	r23, r19
    1bc2:	84 07       	cpc	r24, r20
    1bc4:	95 07       	cpc	r25, r21
    1bc6:	20 f0       	brcs	.+8      	; 0x1bd0 <__addsf3x+0x1c>
    1bc8:	79 f4       	brne	.+30     	; 0x1be8 <__addsf3x+0x34>
    1bca:	a6 f5       	brtc	.+104    	; 0x1c34 <__addsf3x+0x80>
    1bcc:	0c 94 e1 0f 	jmp	0x1fc2	; 0x1fc2 <__fp_zero>
    1bd0:	0e f4       	brtc	.+2      	; 0x1bd4 <__addsf3x+0x20>
    1bd2:	e0 95       	com	r30
    1bd4:	0b 2e       	mov	r0, r27
    1bd6:	ba 2f       	mov	r27, r26
    1bd8:	a0 2d       	mov	r26, r0
    1bda:	0b 01       	movw	r0, r22
    1bdc:	b9 01       	movw	r22, r18
    1bde:	90 01       	movw	r18, r0
    1be0:	0c 01       	movw	r0, r24
    1be2:	ca 01       	movw	r24, r20
    1be4:	a0 01       	movw	r20, r0
    1be6:	11 24       	eor	r1, r1
    1be8:	ff 27       	eor	r31, r31
    1bea:	59 1b       	sub	r21, r25
    1bec:	99 f0       	breq	.+38     	; 0x1c14 <__addsf3x+0x60>
    1bee:	59 3f       	cpi	r21, 0xF9	; 249
    1bf0:	50 f4       	brcc	.+20     	; 0x1c06 <__addsf3x+0x52>
    1bf2:	50 3e       	cpi	r21, 0xE0	; 224
    1bf4:	68 f1       	brcs	.+90     	; 0x1c50 <__addsf3x+0x9c>
    1bf6:	1a 16       	cp	r1, r26
    1bf8:	f0 40       	sbci	r31, 0x00	; 0
    1bfa:	a2 2f       	mov	r26, r18
    1bfc:	23 2f       	mov	r18, r19
    1bfe:	34 2f       	mov	r19, r20
    1c00:	44 27       	eor	r20, r20
    1c02:	58 5f       	subi	r21, 0xF8	; 248
    1c04:	f3 cf       	rjmp	.-26     	; 0x1bec <__addsf3x+0x38>
    1c06:	46 95       	lsr	r20
    1c08:	37 95       	ror	r19
    1c0a:	27 95       	ror	r18
    1c0c:	a7 95       	ror	r26
    1c0e:	f0 40       	sbci	r31, 0x00	; 0
    1c10:	53 95       	inc	r21
    1c12:	c9 f7       	brne	.-14     	; 0x1c06 <__addsf3x+0x52>
    1c14:	7e f4       	brtc	.+30     	; 0x1c34 <__addsf3x+0x80>
    1c16:	1f 16       	cp	r1, r31
    1c18:	ba 0b       	sbc	r27, r26
    1c1a:	62 0b       	sbc	r22, r18
    1c1c:	73 0b       	sbc	r23, r19
    1c1e:	84 0b       	sbc	r24, r20
    1c20:	ba f0       	brmi	.+46     	; 0x1c50 <__addsf3x+0x9c>
    1c22:	91 50       	subi	r25, 0x01	; 1
    1c24:	a1 f0       	breq	.+40     	; 0x1c4e <__addsf3x+0x9a>
    1c26:	ff 0f       	add	r31, r31
    1c28:	bb 1f       	adc	r27, r27
    1c2a:	66 1f       	adc	r22, r22
    1c2c:	77 1f       	adc	r23, r23
    1c2e:	88 1f       	adc	r24, r24
    1c30:	c2 f7       	brpl	.-16     	; 0x1c22 <__addsf3x+0x6e>
    1c32:	0e c0       	rjmp	.+28     	; 0x1c50 <__addsf3x+0x9c>
    1c34:	ba 0f       	add	r27, r26
    1c36:	62 1f       	adc	r22, r18
    1c38:	73 1f       	adc	r23, r19
    1c3a:	84 1f       	adc	r24, r20
    1c3c:	48 f4       	brcc	.+18     	; 0x1c50 <__addsf3x+0x9c>
    1c3e:	87 95       	ror	r24
    1c40:	77 95       	ror	r23
    1c42:	67 95       	ror	r22
    1c44:	b7 95       	ror	r27
    1c46:	f7 95       	ror	r31
    1c48:	9e 3f       	cpi	r25, 0xFE	; 254
    1c4a:	08 f0       	brcs	.+2      	; 0x1c4e <__addsf3x+0x9a>
    1c4c:	b0 cf       	rjmp	.-160    	; 0x1bae <__addsf3+0x28>
    1c4e:	93 95       	inc	r25
    1c50:	88 0f       	add	r24, r24
    1c52:	08 f0       	brcs	.+2      	; 0x1c56 <__addsf3x+0xa2>
    1c54:	99 27       	eor	r25, r25
    1c56:	ee 0f       	add	r30, r30
    1c58:	97 95       	ror	r25
    1c5a:	87 95       	ror	r24
    1c5c:	08 95       	ret

00001c5e <__divsf3>:
    1c5e:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <__divsf3x>
    1c62:	0c 94 ae 0f 	jmp	0x1f5c	; 0x1f5c <__fp_round>
    1c66:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <__fp_pscB>
    1c6a:	58 f0       	brcs	.+22     	; 0x1c82 <__divsf3+0x24>
    1c6c:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <__fp_pscA>
    1c70:	40 f0       	brcs	.+16     	; 0x1c82 <__divsf3+0x24>
    1c72:	29 f4       	brne	.+10     	; 0x1c7e <__divsf3+0x20>
    1c74:	5f 3f       	cpi	r21, 0xFF	; 255
    1c76:	29 f0       	breq	.+10     	; 0x1c82 <__divsf3+0x24>
    1c78:	0c 94 87 0f 	jmp	0x1f0e	; 0x1f0e <__fp_inf>
    1c7c:	51 11       	cpse	r21, r1
    1c7e:	0c 94 e2 0f 	jmp	0x1fc4	; 0x1fc4 <__fp_szero>
    1c82:	0c 94 8d 0f 	jmp	0x1f1a	; 0x1f1a <__fp_nan>

00001c86 <__divsf3x>:
    1c86:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <__fp_split3>
    1c8a:	68 f3       	brcs	.-38     	; 0x1c66 <__divsf3+0x8>

00001c8c <__divsf3_pse>:
    1c8c:	99 23       	and	r25, r25
    1c8e:	b1 f3       	breq	.-20     	; 0x1c7c <__divsf3+0x1e>
    1c90:	55 23       	and	r21, r21
    1c92:	91 f3       	breq	.-28     	; 0x1c78 <__divsf3+0x1a>
    1c94:	95 1b       	sub	r25, r21
    1c96:	55 0b       	sbc	r21, r21
    1c98:	bb 27       	eor	r27, r27
    1c9a:	aa 27       	eor	r26, r26
    1c9c:	62 17       	cp	r22, r18
    1c9e:	73 07       	cpc	r23, r19
    1ca0:	84 07       	cpc	r24, r20
    1ca2:	38 f0       	brcs	.+14     	; 0x1cb2 <__divsf3_pse+0x26>
    1ca4:	9f 5f       	subi	r25, 0xFF	; 255
    1ca6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ca8:	22 0f       	add	r18, r18
    1caa:	33 1f       	adc	r19, r19
    1cac:	44 1f       	adc	r20, r20
    1cae:	aa 1f       	adc	r26, r26
    1cb0:	a9 f3       	breq	.-22     	; 0x1c9c <__divsf3_pse+0x10>
    1cb2:	35 d0       	rcall	.+106    	; 0x1d1e <__divsf3_pse+0x92>
    1cb4:	0e 2e       	mov	r0, r30
    1cb6:	3a f0       	brmi	.+14     	; 0x1cc6 <__divsf3_pse+0x3a>
    1cb8:	e0 e8       	ldi	r30, 0x80	; 128
    1cba:	32 d0       	rcall	.+100    	; 0x1d20 <__divsf3_pse+0x94>
    1cbc:	91 50       	subi	r25, 0x01	; 1
    1cbe:	50 40       	sbci	r21, 0x00	; 0
    1cc0:	e6 95       	lsr	r30
    1cc2:	00 1c       	adc	r0, r0
    1cc4:	ca f7       	brpl	.-14     	; 0x1cb8 <__divsf3_pse+0x2c>
    1cc6:	2b d0       	rcall	.+86     	; 0x1d1e <__divsf3_pse+0x92>
    1cc8:	fe 2f       	mov	r31, r30
    1cca:	29 d0       	rcall	.+82     	; 0x1d1e <__divsf3_pse+0x92>
    1ccc:	66 0f       	add	r22, r22
    1cce:	77 1f       	adc	r23, r23
    1cd0:	88 1f       	adc	r24, r24
    1cd2:	bb 1f       	adc	r27, r27
    1cd4:	26 17       	cp	r18, r22
    1cd6:	37 07       	cpc	r19, r23
    1cd8:	48 07       	cpc	r20, r24
    1cda:	ab 07       	cpc	r26, r27
    1cdc:	b0 e8       	ldi	r27, 0x80	; 128
    1cde:	09 f0       	breq	.+2      	; 0x1ce2 <__divsf3_pse+0x56>
    1ce0:	bb 0b       	sbc	r27, r27
    1ce2:	80 2d       	mov	r24, r0
    1ce4:	bf 01       	movw	r22, r30
    1ce6:	ff 27       	eor	r31, r31
    1ce8:	93 58       	subi	r25, 0x83	; 131
    1cea:	5f 4f       	sbci	r21, 0xFF	; 255
    1cec:	3a f0       	brmi	.+14     	; 0x1cfc <__divsf3_pse+0x70>
    1cee:	9e 3f       	cpi	r25, 0xFE	; 254
    1cf0:	51 05       	cpc	r21, r1
    1cf2:	78 f0       	brcs	.+30     	; 0x1d12 <__divsf3_pse+0x86>
    1cf4:	0c 94 87 0f 	jmp	0x1f0e	; 0x1f0e <__fp_inf>
    1cf8:	0c 94 e2 0f 	jmp	0x1fc4	; 0x1fc4 <__fp_szero>
    1cfc:	5f 3f       	cpi	r21, 0xFF	; 255
    1cfe:	e4 f3       	brlt	.-8      	; 0x1cf8 <__divsf3_pse+0x6c>
    1d00:	98 3e       	cpi	r25, 0xE8	; 232
    1d02:	d4 f3       	brlt	.-12     	; 0x1cf8 <__divsf3_pse+0x6c>
    1d04:	86 95       	lsr	r24
    1d06:	77 95       	ror	r23
    1d08:	67 95       	ror	r22
    1d0a:	b7 95       	ror	r27
    1d0c:	f7 95       	ror	r31
    1d0e:	9f 5f       	subi	r25, 0xFF	; 255
    1d10:	c9 f7       	brne	.-14     	; 0x1d04 <__divsf3_pse+0x78>
    1d12:	88 0f       	add	r24, r24
    1d14:	91 1d       	adc	r25, r1
    1d16:	96 95       	lsr	r25
    1d18:	87 95       	ror	r24
    1d1a:	97 f9       	bld	r25, 7
    1d1c:	08 95       	ret
    1d1e:	e1 e0       	ldi	r30, 0x01	; 1
    1d20:	66 0f       	add	r22, r22
    1d22:	77 1f       	adc	r23, r23
    1d24:	88 1f       	adc	r24, r24
    1d26:	bb 1f       	adc	r27, r27
    1d28:	62 17       	cp	r22, r18
    1d2a:	73 07       	cpc	r23, r19
    1d2c:	84 07       	cpc	r24, r20
    1d2e:	ba 07       	cpc	r27, r26
    1d30:	20 f0       	brcs	.+8      	; 0x1d3a <__divsf3_pse+0xae>
    1d32:	62 1b       	sub	r22, r18
    1d34:	73 0b       	sbc	r23, r19
    1d36:	84 0b       	sbc	r24, r20
    1d38:	ba 0b       	sbc	r27, r26
    1d3a:	ee 1f       	adc	r30, r30
    1d3c:	88 f7       	brcc	.-30     	; 0x1d20 <__divsf3_pse+0x94>
    1d3e:	e0 95       	com	r30
    1d40:	08 95       	ret

00001d42 <__fixsfdi>:
    1d42:	be e3       	ldi	r27, 0x3E	; 62
    1d44:	04 d0       	rcall	.+8      	; 0x1d4e <__fixunssfdi+0x2>
    1d46:	08 f4       	brcc	.+2      	; 0x1d4a <__fixsfdi+0x8>
    1d48:	90 e8       	ldi	r25, 0x80	; 128
    1d4a:	08 95       	ret

00001d4c <__fixunssfdi>:
    1d4c:	bf e3       	ldi	r27, 0x3F	; 63
    1d4e:	22 27       	eor	r18, r18
    1d50:	33 27       	eor	r19, r19
    1d52:	a9 01       	movw	r20, r18
    1d54:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <__fp_splitA>
    1d58:	60 f1       	brcs	.+88     	; 0x1db2 <__fixunssfdi+0x66>
    1d5a:	9f 57       	subi	r25, 0x7F	; 127
    1d5c:	48 f1       	brcs	.+82     	; 0x1db0 <__fixunssfdi+0x64>
    1d5e:	b9 17       	cp	r27, r25
    1d60:	40 f1       	brcs	.+80     	; 0x1db2 <__fixunssfdi+0x66>
    1d62:	bf e3       	ldi	r27, 0x3F	; 63
    1d64:	b9 1b       	sub	r27, r25
    1d66:	99 27       	eor	r25, r25
    1d68:	b8 50       	subi	r27, 0x08	; 8
    1d6a:	3a f4       	brpl	.+14     	; 0x1d7a <__fixunssfdi+0x2e>
    1d6c:	66 0f       	add	r22, r22
    1d6e:	77 1f       	adc	r23, r23
    1d70:	88 1f       	adc	r24, r24
    1d72:	99 1f       	adc	r25, r25
    1d74:	b3 95       	inc	r27
    1d76:	d2 f3       	brmi	.-12     	; 0x1d6c <__fixunssfdi+0x20>
    1d78:	16 c0       	rjmp	.+44     	; 0x1da6 <__fixunssfdi+0x5a>
    1d7a:	b8 50       	subi	r27, 0x08	; 8
    1d7c:	4a f0       	brmi	.+18     	; 0x1d90 <__fixunssfdi+0x44>
    1d7e:	23 2f       	mov	r18, r19
    1d80:	34 2f       	mov	r19, r20
    1d82:	45 2f       	mov	r20, r21
    1d84:	56 2f       	mov	r21, r22
    1d86:	67 2f       	mov	r22, r23
    1d88:	78 2f       	mov	r23, r24
    1d8a:	88 27       	eor	r24, r24
    1d8c:	b8 50       	subi	r27, 0x08	; 8
    1d8e:	ba f7       	brpl	.-18     	; 0x1d7e <__fixunssfdi+0x32>
    1d90:	b8 5f       	subi	r27, 0xF8	; 248
    1d92:	49 f0       	breq	.+18     	; 0x1da6 <__fixunssfdi+0x5a>
    1d94:	86 95       	lsr	r24
    1d96:	77 95       	ror	r23
    1d98:	67 95       	ror	r22
    1d9a:	57 95       	ror	r21
    1d9c:	47 95       	ror	r20
    1d9e:	37 95       	ror	r19
    1da0:	27 95       	ror	r18
    1da2:	ba 95       	dec	r27
    1da4:	b9 f7       	brne	.-18     	; 0x1d94 <__fixunssfdi+0x48>
    1da6:	16 f4       	brtc	.+4      	; 0x1dac <__fixunssfdi+0x60>
    1da8:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <__fp_negdi>
    1dac:	88 94       	clc
    1dae:	08 95       	ret
    1db0:	88 94       	clc
    1db2:	60 e0       	ldi	r22, 0x00	; 0
    1db4:	70 e0       	ldi	r23, 0x00	; 0
    1db6:	cb 01       	movw	r24, r22
    1db8:	08 95       	ret

00001dba <__fixunssfsi>:
    1dba:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <__fp_splitA>
    1dbe:	88 f0       	brcs	.+34     	; 0x1de2 <__fixunssfsi+0x28>
    1dc0:	9f 57       	subi	r25, 0x7F	; 127
    1dc2:	98 f0       	brcs	.+38     	; 0x1dea <__fixunssfsi+0x30>
    1dc4:	b9 2f       	mov	r27, r25
    1dc6:	99 27       	eor	r25, r25
    1dc8:	b7 51       	subi	r27, 0x17	; 23
    1dca:	b0 f0       	brcs	.+44     	; 0x1df8 <__fixunssfsi+0x3e>
    1dcc:	e1 f0       	breq	.+56     	; 0x1e06 <__fixunssfsi+0x4c>
    1dce:	66 0f       	add	r22, r22
    1dd0:	77 1f       	adc	r23, r23
    1dd2:	88 1f       	adc	r24, r24
    1dd4:	99 1f       	adc	r25, r25
    1dd6:	1a f0       	brmi	.+6      	; 0x1dde <__fixunssfsi+0x24>
    1dd8:	ba 95       	dec	r27
    1dda:	c9 f7       	brne	.-14     	; 0x1dce <__fixunssfsi+0x14>
    1ddc:	14 c0       	rjmp	.+40     	; 0x1e06 <__fixunssfsi+0x4c>
    1dde:	b1 30       	cpi	r27, 0x01	; 1
    1de0:	91 f0       	breq	.+36     	; 0x1e06 <__fixunssfsi+0x4c>
    1de2:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <__fp_zero>
    1de6:	b1 e0       	ldi	r27, 0x01	; 1
    1de8:	08 95       	ret
    1dea:	0c 94 e1 0f 	jmp	0x1fc2	; 0x1fc2 <__fp_zero>
    1dee:	67 2f       	mov	r22, r23
    1df0:	78 2f       	mov	r23, r24
    1df2:	88 27       	eor	r24, r24
    1df4:	b8 5f       	subi	r27, 0xF8	; 248
    1df6:	39 f0       	breq	.+14     	; 0x1e06 <__fixunssfsi+0x4c>
    1df8:	b9 3f       	cpi	r27, 0xF9	; 249
    1dfa:	cc f3       	brlt	.-14     	; 0x1dee <__fixunssfsi+0x34>
    1dfc:	86 95       	lsr	r24
    1dfe:	77 95       	ror	r23
    1e00:	67 95       	ror	r22
    1e02:	b3 95       	inc	r27
    1e04:	d9 f7       	brne	.-10     	; 0x1dfc <__fixunssfsi+0x42>
    1e06:	3e f4       	brtc	.+14     	; 0x1e16 <__fixunssfsi+0x5c>
    1e08:	90 95       	com	r25
    1e0a:	80 95       	com	r24
    1e0c:	70 95       	com	r23
    1e0e:	61 95       	neg	r22
    1e10:	7f 4f       	sbci	r23, 0xFF	; 255
    1e12:	8f 4f       	sbci	r24, 0xFF	; 255
    1e14:	9f 4f       	sbci	r25, 0xFF	; 255
    1e16:	08 95       	ret

00001e18 <__floatunsisf>:
    1e18:	e8 94       	clt
    1e1a:	09 c0       	rjmp	.+18     	; 0x1e2e <__floatsisf+0x12>

00001e1c <__floatsisf>:
    1e1c:	97 fb       	bst	r25, 7
    1e1e:	3e f4       	brtc	.+14     	; 0x1e2e <__floatsisf+0x12>
    1e20:	90 95       	com	r25
    1e22:	80 95       	com	r24
    1e24:	70 95       	com	r23
    1e26:	61 95       	neg	r22
    1e28:	7f 4f       	sbci	r23, 0xFF	; 255
    1e2a:	8f 4f       	sbci	r24, 0xFF	; 255
    1e2c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e2e:	99 23       	and	r25, r25
    1e30:	a9 f0       	breq	.+42     	; 0x1e5c <__floatsisf+0x40>
    1e32:	f9 2f       	mov	r31, r25
    1e34:	96 e9       	ldi	r25, 0x96	; 150
    1e36:	bb 27       	eor	r27, r27
    1e38:	93 95       	inc	r25
    1e3a:	f6 95       	lsr	r31
    1e3c:	87 95       	ror	r24
    1e3e:	77 95       	ror	r23
    1e40:	67 95       	ror	r22
    1e42:	b7 95       	ror	r27
    1e44:	f1 11       	cpse	r31, r1
    1e46:	f8 cf       	rjmp	.-16     	; 0x1e38 <__floatsisf+0x1c>
    1e48:	fa f4       	brpl	.+62     	; 0x1e88 <__floatsisf+0x6c>
    1e4a:	bb 0f       	add	r27, r27
    1e4c:	11 f4       	brne	.+4      	; 0x1e52 <__floatsisf+0x36>
    1e4e:	60 ff       	sbrs	r22, 0
    1e50:	1b c0       	rjmp	.+54     	; 0x1e88 <__floatsisf+0x6c>
    1e52:	6f 5f       	subi	r22, 0xFF	; 255
    1e54:	7f 4f       	sbci	r23, 0xFF	; 255
    1e56:	8f 4f       	sbci	r24, 0xFF	; 255
    1e58:	9f 4f       	sbci	r25, 0xFF	; 255
    1e5a:	16 c0       	rjmp	.+44     	; 0x1e88 <__floatsisf+0x6c>
    1e5c:	88 23       	and	r24, r24
    1e5e:	11 f0       	breq	.+4      	; 0x1e64 <__floatsisf+0x48>
    1e60:	96 e9       	ldi	r25, 0x96	; 150
    1e62:	11 c0       	rjmp	.+34     	; 0x1e86 <__floatsisf+0x6a>
    1e64:	77 23       	and	r23, r23
    1e66:	21 f0       	breq	.+8      	; 0x1e70 <__floatsisf+0x54>
    1e68:	9e e8       	ldi	r25, 0x8E	; 142
    1e6a:	87 2f       	mov	r24, r23
    1e6c:	76 2f       	mov	r23, r22
    1e6e:	05 c0       	rjmp	.+10     	; 0x1e7a <__floatsisf+0x5e>
    1e70:	66 23       	and	r22, r22
    1e72:	71 f0       	breq	.+28     	; 0x1e90 <__floatsisf+0x74>
    1e74:	96 e8       	ldi	r25, 0x86	; 134
    1e76:	86 2f       	mov	r24, r22
    1e78:	70 e0       	ldi	r23, 0x00	; 0
    1e7a:	60 e0       	ldi	r22, 0x00	; 0
    1e7c:	2a f0       	brmi	.+10     	; 0x1e88 <__floatsisf+0x6c>
    1e7e:	9a 95       	dec	r25
    1e80:	66 0f       	add	r22, r22
    1e82:	77 1f       	adc	r23, r23
    1e84:	88 1f       	adc	r24, r24
    1e86:	da f7       	brpl	.-10     	; 0x1e7e <__floatsisf+0x62>
    1e88:	88 0f       	add	r24, r24
    1e8a:	96 95       	lsr	r25
    1e8c:	87 95       	ror	r24
    1e8e:	97 f9       	bld	r25, 7
    1e90:	08 95       	ret

00001e92 <__floatundisf>:
    1e92:	e8 94       	clt

00001e94 <__fp_di2sf>:
    1e94:	f9 2f       	mov	r31, r25
    1e96:	96 eb       	ldi	r25, 0xB6	; 182
    1e98:	ff 23       	and	r31, r31
    1e9a:	81 f0       	breq	.+32     	; 0x1ebc <__fp_di2sf+0x28>
    1e9c:	12 16       	cp	r1, r18
    1e9e:	13 06       	cpc	r1, r19
    1ea0:	14 06       	cpc	r1, r20
    1ea2:	44 0b       	sbc	r20, r20
    1ea4:	93 95       	inc	r25
    1ea6:	f6 95       	lsr	r31
    1ea8:	87 95       	ror	r24
    1eaa:	77 95       	ror	r23
    1eac:	67 95       	ror	r22
    1eae:	57 95       	ror	r21
    1eb0:	40 40       	sbci	r20, 0x00	; 0
    1eb2:	ff 23       	and	r31, r31
    1eb4:	b9 f7       	brne	.-18     	; 0x1ea4 <__fp_di2sf+0x10>
    1eb6:	1b c0       	rjmp	.+54     	; 0x1eee <__fp_di2sf+0x5a>
    1eb8:	99 27       	eor	r25, r25
    1eba:	08 95       	ret
    1ebc:	88 23       	and	r24, r24
    1ebe:	51 f4       	brne	.+20     	; 0x1ed4 <__fp_di2sf+0x40>
    1ec0:	98 50       	subi	r25, 0x08	; 8
    1ec2:	d2 f7       	brpl	.-12     	; 0x1eb8 <__fp_di2sf+0x24>
    1ec4:	87 2b       	or	r24, r23
    1ec6:	76 2f       	mov	r23, r22
    1ec8:	65 2f       	mov	r22, r21
    1eca:	54 2f       	mov	r21, r20
    1ecc:	43 2f       	mov	r20, r19
    1ece:	32 2f       	mov	r19, r18
    1ed0:	20 e0       	ldi	r18, 0x00	; 0
    1ed2:	b1 f3       	breq	.-20     	; 0x1ec0 <__fp_di2sf+0x2c>
    1ed4:	12 16       	cp	r1, r18
    1ed6:	13 06       	cpc	r1, r19
    1ed8:	14 06       	cpc	r1, r20
    1eda:	44 0b       	sbc	r20, r20
    1edc:	88 23       	and	r24, r24
    1ede:	3a f0       	brmi	.+14     	; 0x1eee <__fp_di2sf+0x5a>
    1ee0:	9a 95       	dec	r25
    1ee2:	44 0f       	add	r20, r20
    1ee4:	55 1f       	adc	r21, r21
    1ee6:	66 1f       	adc	r22, r22
    1ee8:	77 1f       	adc	r23, r23
    1eea:	88 1f       	adc	r24, r24
    1eec:	ca f7       	brpl	.-14     	; 0x1ee0 <__fp_di2sf+0x4c>
    1eee:	55 23       	and	r21, r21
    1ef0:	4a f4       	brpl	.+18     	; 0x1f04 <__fp_di2sf+0x70>
    1ef2:	44 0f       	add	r20, r20
    1ef4:	55 1f       	adc	r21, r21
    1ef6:	11 f4       	brne	.+4      	; 0x1efc <__fp_di2sf+0x68>
    1ef8:	60 ff       	sbrs	r22, 0
    1efa:	04 c0       	rjmp	.+8      	; 0x1f04 <__fp_di2sf+0x70>
    1efc:	6f 5f       	subi	r22, 0xFF	; 255
    1efe:	7f 4f       	sbci	r23, 0xFF	; 255
    1f00:	8f 4f       	sbci	r24, 0xFF	; 255
    1f02:	9f 4f       	sbci	r25, 0xFF	; 255
    1f04:	88 0f       	add	r24, r24
    1f06:	96 95       	lsr	r25
    1f08:	87 95       	ror	r24
    1f0a:	97 f9       	bld	r25, 7
    1f0c:	08 95       	ret

00001f0e <__fp_inf>:
    1f0e:	97 f9       	bld	r25, 7
    1f10:	9f 67       	ori	r25, 0x7F	; 127
    1f12:	80 e8       	ldi	r24, 0x80	; 128
    1f14:	70 e0       	ldi	r23, 0x00	; 0
    1f16:	60 e0       	ldi	r22, 0x00	; 0
    1f18:	08 95       	ret

00001f1a <__fp_nan>:
    1f1a:	9f ef       	ldi	r25, 0xFF	; 255
    1f1c:	80 ec       	ldi	r24, 0xC0	; 192
    1f1e:	08 95       	ret

00001f20 <__fp_negdi>:
    1f20:	90 95       	com	r25
    1f22:	80 95       	com	r24
    1f24:	70 95       	com	r23
    1f26:	60 95       	com	r22
    1f28:	50 95       	com	r21
    1f2a:	40 95       	com	r20
    1f2c:	30 95       	com	r19
    1f2e:	21 95       	neg	r18
    1f30:	3f 4f       	sbci	r19, 0xFF	; 255
    1f32:	4f 4f       	sbci	r20, 0xFF	; 255
    1f34:	5f 4f       	sbci	r21, 0xFF	; 255
    1f36:	6f 4f       	sbci	r22, 0xFF	; 255
    1f38:	7f 4f       	sbci	r23, 0xFF	; 255
    1f3a:	8f 4f       	sbci	r24, 0xFF	; 255
    1f3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f3e:	08 95       	ret

00001f40 <__fp_pscA>:
    1f40:	00 24       	eor	r0, r0
    1f42:	0a 94       	dec	r0
    1f44:	16 16       	cp	r1, r22
    1f46:	17 06       	cpc	r1, r23
    1f48:	18 06       	cpc	r1, r24
    1f4a:	09 06       	cpc	r0, r25
    1f4c:	08 95       	ret

00001f4e <__fp_pscB>:
    1f4e:	00 24       	eor	r0, r0
    1f50:	0a 94       	dec	r0
    1f52:	12 16       	cp	r1, r18
    1f54:	13 06       	cpc	r1, r19
    1f56:	14 06       	cpc	r1, r20
    1f58:	05 06       	cpc	r0, r21
    1f5a:	08 95       	ret

00001f5c <__fp_round>:
    1f5c:	09 2e       	mov	r0, r25
    1f5e:	03 94       	inc	r0
    1f60:	00 0c       	add	r0, r0
    1f62:	11 f4       	brne	.+4      	; 0x1f68 <__fp_round+0xc>
    1f64:	88 23       	and	r24, r24
    1f66:	52 f0       	brmi	.+20     	; 0x1f7c <__fp_round+0x20>
    1f68:	bb 0f       	add	r27, r27
    1f6a:	40 f4       	brcc	.+16     	; 0x1f7c <__fp_round+0x20>
    1f6c:	bf 2b       	or	r27, r31
    1f6e:	11 f4       	brne	.+4      	; 0x1f74 <__fp_round+0x18>
    1f70:	60 ff       	sbrs	r22, 0
    1f72:	04 c0       	rjmp	.+8      	; 0x1f7c <__fp_round+0x20>
    1f74:	6f 5f       	subi	r22, 0xFF	; 255
    1f76:	7f 4f       	sbci	r23, 0xFF	; 255
    1f78:	8f 4f       	sbci	r24, 0xFF	; 255
    1f7a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f7c:	08 95       	ret

00001f7e <__fp_split3>:
    1f7e:	57 fd       	sbrc	r21, 7
    1f80:	90 58       	subi	r25, 0x80	; 128
    1f82:	44 0f       	add	r20, r20
    1f84:	55 1f       	adc	r21, r21
    1f86:	59 f0       	breq	.+22     	; 0x1f9e <__fp_splitA+0x10>
    1f88:	5f 3f       	cpi	r21, 0xFF	; 255
    1f8a:	71 f0       	breq	.+28     	; 0x1fa8 <__fp_splitA+0x1a>
    1f8c:	47 95       	ror	r20

00001f8e <__fp_splitA>:
    1f8e:	88 0f       	add	r24, r24
    1f90:	97 fb       	bst	r25, 7
    1f92:	99 1f       	adc	r25, r25
    1f94:	61 f0       	breq	.+24     	; 0x1fae <__fp_splitA+0x20>
    1f96:	9f 3f       	cpi	r25, 0xFF	; 255
    1f98:	79 f0       	breq	.+30     	; 0x1fb8 <__fp_splitA+0x2a>
    1f9a:	87 95       	ror	r24
    1f9c:	08 95       	ret
    1f9e:	12 16       	cp	r1, r18
    1fa0:	13 06       	cpc	r1, r19
    1fa2:	14 06       	cpc	r1, r20
    1fa4:	55 1f       	adc	r21, r21
    1fa6:	f2 cf       	rjmp	.-28     	; 0x1f8c <__fp_split3+0xe>
    1fa8:	46 95       	lsr	r20
    1faa:	f1 df       	rcall	.-30     	; 0x1f8e <__fp_splitA>
    1fac:	08 c0       	rjmp	.+16     	; 0x1fbe <__fp_splitA+0x30>
    1fae:	16 16       	cp	r1, r22
    1fb0:	17 06       	cpc	r1, r23
    1fb2:	18 06       	cpc	r1, r24
    1fb4:	99 1f       	adc	r25, r25
    1fb6:	f1 cf       	rjmp	.-30     	; 0x1f9a <__fp_splitA+0xc>
    1fb8:	86 95       	lsr	r24
    1fba:	71 05       	cpc	r23, r1
    1fbc:	61 05       	cpc	r22, r1
    1fbe:	08 94       	sec
    1fc0:	08 95       	ret

00001fc2 <__fp_zero>:
    1fc2:	e8 94       	clt

00001fc4 <__fp_szero>:
    1fc4:	bb 27       	eor	r27, r27
    1fc6:	66 27       	eor	r22, r22
    1fc8:	77 27       	eor	r23, r23
    1fca:	cb 01       	movw	r24, r22
    1fcc:	97 f9       	bld	r25, 7
    1fce:	08 95       	ret

00001fd0 <__udivmodsi4>:
    1fd0:	a1 e2       	ldi	r26, 0x21	; 33
    1fd2:	1a 2e       	mov	r1, r26
    1fd4:	aa 1b       	sub	r26, r26
    1fd6:	bb 1b       	sub	r27, r27
    1fd8:	fd 01       	movw	r30, r26
    1fda:	0d c0       	rjmp	.+26     	; 0x1ff6 <__udivmodsi4_ep>

00001fdc <__udivmodsi4_loop>:
    1fdc:	aa 1f       	adc	r26, r26
    1fde:	bb 1f       	adc	r27, r27
    1fe0:	ee 1f       	adc	r30, r30
    1fe2:	ff 1f       	adc	r31, r31
    1fe4:	a2 17       	cp	r26, r18
    1fe6:	b3 07       	cpc	r27, r19
    1fe8:	e4 07       	cpc	r30, r20
    1fea:	f5 07       	cpc	r31, r21
    1fec:	20 f0       	brcs	.+8      	; 0x1ff6 <__udivmodsi4_ep>
    1fee:	a2 1b       	sub	r26, r18
    1ff0:	b3 0b       	sbc	r27, r19
    1ff2:	e4 0b       	sbc	r30, r20
    1ff4:	f5 0b       	sbc	r31, r21

00001ff6 <__udivmodsi4_ep>:
    1ff6:	66 1f       	adc	r22, r22
    1ff8:	77 1f       	adc	r23, r23
    1ffa:	88 1f       	adc	r24, r24
    1ffc:	99 1f       	adc	r25, r25
    1ffe:	1a 94       	dec	r1
    2000:	69 f7       	brne	.-38     	; 0x1fdc <__udivmodsi4_loop>
    2002:	60 95       	com	r22
    2004:	70 95       	com	r23
    2006:	80 95       	com	r24
    2008:	90 95       	com	r25
    200a:	9b 01       	movw	r18, r22
    200c:	ac 01       	movw	r20, r24
    200e:	bd 01       	movw	r22, r26
    2010:	cf 01       	movw	r24, r30
    2012:	08 95       	ret

00002014 <__umulhisi3>:
    2014:	a2 9f       	mul	r26, r18
    2016:	b0 01       	movw	r22, r0
    2018:	b3 9f       	mul	r27, r19
    201a:	c0 01       	movw	r24, r0
    201c:	a3 9f       	mul	r26, r19
    201e:	70 0d       	add	r23, r0
    2020:	81 1d       	adc	r24, r1
    2022:	11 24       	eor	r1, r1
    2024:	91 1d       	adc	r25, r1
    2026:	b2 9f       	mul	r27, r18
    2028:	70 0d       	add	r23, r0
    202a:	81 1d       	adc	r24, r1
    202c:	11 24       	eor	r1, r1
    202e:	91 1d       	adc	r25, r1
    2030:	08 95       	ret

00002032 <__muluhisi3>:
    2032:	0e 94 0a 10 	call	0x2014	; 0x2014 <__umulhisi3>
    2036:	a5 9f       	mul	r26, r21
    2038:	90 0d       	add	r25, r0
    203a:	b4 9f       	mul	r27, r20
    203c:	90 0d       	add	r25, r0
    203e:	a4 9f       	mul	r26, r20
    2040:	80 0d       	add	r24, r0
    2042:	91 1d       	adc	r25, r1
    2044:	11 24       	eor	r1, r1
    2046:	08 95       	ret

00002048 <__umoddi3>:
    2048:	68 94       	set
    204a:	01 c0       	rjmp	.+2      	; 0x204e <__udivdi3_umoddi3>

0000204c <__udivdi3>:
    204c:	e8 94       	clt

0000204e <__udivdi3_umoddi3>:
    204e:	8f 92       	push	r8
    2050:	9f 92       	push	r9
    2052:	cf 93       	push	r28
    2054:	df 93       	push	r29
    2056:	0e 94 32 10 	call	0x2064	; 0x2064 <__udivmod64>
    205a:	df 91       	pop	r29
    205c:	cf 91       	pop	r28
    205e:	9f 90       	pop	r9
    2060:	8f 90       	pop	r8
    2062:	08 95       	ret

00002064 <__udivmod64>:
    2064:	88 24       	eor	r8, r8
    2066:	99 24       	eor	r9, r9
    2068:	f4 01       	movw	r30, r8
    206a:	e4 01       	movw	r28, r8
    206c:	b0 e4       	ldi	r27, 0x40	; 64
    206e:	9f 93       	push	r25
    2070:	aa 27       	eor	r26, r26
    2072:	9a 15       	cp	r25, r10
    2074:	8b 04       	cpc	r8, r11
    2076:	9c 04       	cpc	r9, r12
    2078:	ed 05       	cpc	r30, r13
    207a:	fe 05       	cpc	r31, r14
    207c:	cf 05       	cpc	r28, r15
    207e:	d0 07       	cpc	r29, r16
    2080:	a1 07       	cpc	r26, r17
    2082:	98 f4       	brcc	.+38     	; 0x20aa <__udivmod64+0x46>
    2084:	ad 2f       	mov	r26, r29
    2086:	dc 2f       	mov	r29, r28
    2088:	cf 2f       	mov	r28, r31
    208a:	fe 2f       	mov	r31, r30
    208c:	e9 2d       	mov	r30, r9
    208e:	98 2c       	mov	r9, r8
    2090:	89 2e       	mov	r8, r25
    2092:	98 2f       	mov	r25, r24
    2094:	87 2f       	mov	r24, r23
    2096:	76 2f       	mov	r23, r22
    2098:	65 2f       	mov	r22, r21
    209a:	54 2f       	mov	r21, r20
    209c:	43 2f       	mov	r20, r19
    209e:	32 2f       	mov	r19, r18
    20a0:	22 27       	eor	r18, r18
    20a2:	b8 50       	subi	r27, 0x08	; 8
    20a4:	31 f7       	brne	.-52     	; 0x2072 <__udivmod64+0xe>
    20a6:	bf 91       	pop	r27
    20a8:	27 c0       	rjmp	.+78     	; 0x20f8 <__udivmod64+0x94>
    20aa:	1b 2e       	mov	r1, r27
    20ac:	bf 91       	pop	r27
    20ae:	bb 27       	eor	r27, r27
    20b0:	22 0f       	add	r18, r18
    20b2:	33 1f       	adc	r19, r19
    20b4:	44 1f       	adc	r20, r20
    20b6:	55 1f       	adc	r21, r21
    20b8:	66 1f       	adc	r22, r22
    20ba:	77 1f       	adc	r23, r23
    20bc:	88 1f       	adc	r24, r24
    20be:	99 1f       	adc	r25, r25
    20c0:	88 1c       	adc	r8, r8
    20c2:	99 1c       	adc	r9, r9
    20c4:	ee 1f       	adc	r30, r30
    20c6:	ff 1f       	adc	r31, r31
    20c8:	cc 1f       	adc	r28, r28
    20ca:	dd 1f       	adc	r29, r29
    20cc:	aa 1f       	adc	r26, r26
    20ce:	bb 1f       	adc	r27, r27
    20d0:	8a 14       	cp	r8, r10
    20d2:	9b 04       	cpc	r9, r11
    20d4:	ec 05       	cpc	r30, r12
    20d6:	fd 05       	cpc	r31, r13
    20d8:	ce 05       	cpc	r28, r14
    20da:	df 05       	cpc	r29, r15
    20dc:	a0 07       	cpc	r26, r16
    20de:	b1 07       	cpc	r27, r17
    20e0:	48 f0       	brcs	.+18     	; 0x20f4 <__udivmod64+0x90>
    20e2:	8a 18       	sub	r8, r10
    20e4:	9b 08       	sbc	r9, r11
    20e6:	ec 09       	sbc	r30, r12
    20e8:	fd 09       	sbc	r31, r13
    20ea:	ce 09       	sbc	r28, r14
    20ec:	df 09       	sbc	r29, r15
    20ee:	a0 0b       	sbc	r26, r16
    20f0:	b1 0b       	sbc	r27, r17
    20f2:	21 60       	ori	r18, 0x01	; 1
    20f4:	1a 94       	dec	r1
    20f6:	e1 f6       	brne	.-72     	; 0x20b0 <__udivmod64+0x4c>
    20f8:	2e f4       	brtc	.+10     	; 0x2104 <__udivmod64+0xa0>
    20fa:	94 01       	movw	r18, r8
    20fc:	af 01       	movw	r20, r30
    20fe:	be 01       	movw	r22, r28
    2100:	cd 01       	movw	r24, r26
    2102:	00 0c       	add	r0, r0
    2104:	08 95       	ret

00002106 <__ashldi3>:
    2106:	0f 93       	push	r16
    2108:	08 30       	cpi	r16, 0x08	; 8
    210a:	90 f0       	brcs	.+36     	; 0x2130 <__ashldi3+0x2a>
    210c:	98 2f       	mov	r25, r24
    210e:	87 2f       	mov	r24, r23
    2110:	76 2f       	mov	r23, r22
    2112:	65 2f       	mov	r22, r21
    2114:	54 2f       	mov	r21, r20
    2116:	43 2f       	mov	r20, r19
    2118:	32 2f       	mov	r19, r18
    211a:	22 27       	eor	r18, r18
    211c:	08 50       	subi	r16, 0x08	; 8
    211e:	f4 cf       	rjmp	.-24     	; 0x2108 <__ashldi3+0x2>
    2120:	22 0f       	add	r18, r18
    2122:	33 1f       	adc	r19, r19
    2124:	44 1f       	adc	r20, r20
    2126:	55 1f       	adc	r21, r21
    2128:	66 1f       	adc	r22, r22
    212a:	77 1f       	adc	r23, r23
    212c:	88 1f       	adc	r24, r24
    212e:	99 1f       	adc	r25, r25
    2130:	0a 95       	dec	r16
    2132:	b2 f7       	brpl	.-20     	; 0x2120 <__ashldi3+0x1a>
    2134:	0f 91       	pop	r16
    2136:	08 95       	ret

00002138 <__ashrdi3>:
    2138:	97 fb       	bst	r25, 7
    213a:	10 f8       	bld	r1, 0

0000213c <__lshrdi3>:
    213c:	16 94       	lsr	r1
    213e:	00 08       	sbc	r0, r0
    2140:	0f 93       	push	r16
    2142:	08 30       	cpi	r16, 0x08	; 8
    2144:	98 f0       	brcs	.+38     	; 0x216c <__lshrdi3+0x30>
    2146:	08 50       	subi	r16, 0x08	; 8
    2148:	23 2f       	mov	r18, r19
    214a:	34 2f       	mov	r19, r20
    214c:	45 2f       	mov	r20, r21
    214e:	56 2f       	mov	r21, r22
    2150:	67 2f       	mov	r22, r23
    2152:	78 2f       	mov	r23, r24
    2154:	89 2f       	mov	r24, r25
    2156:	90 2d       	mov	r25, r0
    2158:	f4 cf       	rjmp	.-24     	; 0x2142 <__lshrdi3+0x6>
    215a:	05 94       	asr	r0
    215c:	97 95       	ror	r25
    215e:	87 95       	ror	r24
    2160:	77 95       	ror	r23
    2162:	67 95       	ror	r22
    2164:	57 95       	ror	r21
    2166:	47 95       	ror	r20
    2168:	37 95       	ror	r19
    216a:	27 95       	ror	r18
    216c:	0a 95       	dec	r16
    216e:	aa f7       	brpl	.-22     	; 0x215a <__lshrdi3+0x1e>
    2170:	0f 91       	pop	r16
    2172:	08 95       	ret

00002174 <__adddi3>:
    2174:	2a 0d       	add	r18, r10
    2176:	3b 1d       	adc	r19, r11
    2178:	4c 1d       	adc	r20, r12
    217a:	5d 1d       	adc	r21, r13
    217c:	6e 1d       	adc	r22, r14
    217e:	7f 1d       	adc	r23, r15
    2180:	80 1f       	adc	r24, r16
    2182:	91 1f       	adc	r25, r17
    2184:	08 95       	ret

00002186 <__subdi3>:
    2186:	2a 19       	sub	r18, r10
    2188:	3b 09       	sbc	r19, r11
    218a:	4c 09       	sbc	r20, r12
    218c:	5d 09       	sbc	r21, r13
    218e:	6e 09       	sbc	r22, r14
    2190:	7f 09       	sbc	r23, r15
    2192:	80 0b       	sbc	r24, r16
    2194:	91 0b       	sbc	r25, r17
    2196:	08 95       	ret

00002198 <__cmpdi2>:
    2198:	2a 15       	cp	r18, r10
    219a:	3b 05       	cpc	r19, r11
    219c:	4c 05       	cpc	r20, r12
    219e:	5d 05       	cpc	r21, r13
    21a0:	6e 05       	cpc	r22, r14
    21a2:	7f 05       	cpc	r23, r15
    21a4:	80 07       	cpc	r24, r16
    21a6:	91 07       	cpc	r25, r17
    21a8:	08 95       	ret

000021aa <memcmp>:
    21aa:	fb 01       	movw	r30, r22
    21ac:	dc 01       	movw	r26, r24
    21ae:	04 c0       	rjmp	.+8      	; 0x21b8 <memcmp+0xe>
    21b0:	8d 91       	ld	r24, X+
    21b2:	01 90       	ld	r0, Z+
    21b4:	80 19       	sub	r24, r0
    21b6:	21 f4       	brne	.+8      	; 0x21c0 <memcmp+0x16>
    21b8:	41 50       	subi	r20, 0x01	; 1
    21ba:	50 40       	sbci	r21, 0x00	; 0
    21bc:	c8 f7       	brcc	.-14     	; 0x21b0 <memcmp+0x6>
    21be:	88 1b       	sub	r24, r24
    21c0:	99 0b       	sbc	r25, r25
    21c2:	08 95       	ret

000021c4 <_exit>:
    21c4:	f8 94       	cli

000021c6 <__stop_program>:
    21c6:	ff cf       	rjmp	.-2      	; 0x21c6 <__stop_program>
