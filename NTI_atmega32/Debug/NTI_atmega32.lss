
NTI_atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f7c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b8  00800060  00002f7c  00003010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000678  00800118  00800118  000030c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000030c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000030f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007c0  00000000  00000000  00003134  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007e51  00000000  00000000  000038f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001d86  00000000  00000000  0000b745  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000477b  00000000  00000000  0000d4cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001840  00000000  00000000  00011c48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002ab3  00000000  00000000  00013488  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007819  00000000  00000000  00015f3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000710  00000000  00000000  0001d754  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 ec 05 	jmp	0xbd8	; 0xbd8 <__vector_1>
       8:	0c 94 13 06 	jmp	0xc26	; 0xc26 <__vector_2>
       c:	0c 94 3a 06 	jmp	0xc74	; 0xc74 <__vector_3>
      10:	0c 94 da 06 	jmp	0xdb4	; 0xdb4 <__vector_4>
      14:	0c 94 03 07 	jmp	0xe06	; 0xe06 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 4d 0b 	jmp	0x169a	; 0x169a <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 88 06 	jmp	0xd10	; 0xd10 <__vector_10>
      2c:	0c 94 b1 06 	jmp	0xd62	; 0xd62 <__vector_11>
      30:	0c 94 61 06 	jmp	0xcc2	; 0xcc2 <__vector_12>
      34:	0c 94 2c 07 	jmp	0xe58	; 0xe58 <__vector_13>
      38:	0c 94 55 07 	jmp	0xeaa	; 0xeaa <__vector_14>
      3c:	0c 94 7e 07 	jmp	0xefc	; 0xefc <__vector_15>
      40:	0c 94 ba 04 	jmp	0x974	; 0x974 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e7       	ldi	r30, 0x7C	; 124
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 31       	cpi	r26, 0x18	; 24
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	27 e0       	ldi	r18, 0x07	; 7
      78:	a8 e1       	ldi	r26, 0x18	; 24
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 39       	cpi	r26, 0x90	; 144
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3f 04 	call	0x87e	; 0x87e <main>
      8a:	0c 94 bc 17 	jmp	0x2f78	; 0x2f78 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <KeyPad_init>:
 *   		default state to it according to connection
 *   		and init columns as input
 *   @retval none
 */
void KeyPad_init()
{
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	cf 93       	push	r28
      9c:	df 93       	push	r29
	u8 index_1 = 0,index_2 = 0;


	for (index_1 = 0; index_1 < KeypadsCount; index_1++)
      9e:	e1 2c       	mov	r14, r1
      a0:	28 c0       	rjmp	.+80     	; 0xf2 <KeyPad_init+0x60>
	{
		for (index_2 = 0; index_2 < 4; index_2++)
		{
			/* Init rows and columns*/
			dio_vidConfigChannel(Keypads[index_1].rows[index_2].bport ,
      a2:	cf 2d       	mov	r28, r15
      a4:	d0 e0       	ldi	r29, 0x00	; 0
      a6:	ce 01       	movw	r24, r28
      a8:	88 0f       	add	r24, r24
      aa:	99 1f       	adc	r25, r25
      ac:	c8 0f       	add	r28, r24
      ae:	d9 1f       	adc	r29, r25
      b0:	89 e1       	ldi	r24, 0x19	; 25
      b2:	e8 9e       	mul	r14, r24
      b4:	80 01       	movw	r16, r0
      b6:	11 24       	eor	r1, r1
      b8:	c0 0f       	add	r28, r16
      ba:	d1 1f       	adc	r29, r17
      bc:	cf 58       	subi	r28, 0x8F	; 143
      be:	df 4f       	sbci	r29, 0xFF	; 255
      c0:	41 e0       	ldi	r20, 0x01	; 1
      c2:	69 81       	ldd	r22, Y+1	; 0x01
      c4:	88 81       	ld	r24, Y
      c6:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <dio_vidConfigChannel>
			Keypads[index_1].rows[index_2].bchannel,OUTPUT);
			dio_vidConfigChannel(Keypads[index_1].cols[index_2].bport ,
      ca:	8c 85       	ldd	r24, Y+12	; 0x0c
      cc:	40 e0       	ldi	r20, 0x00	; 0
      ce:	68 2f       	mov	r22, r24
      d0:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <dio_vidConfigChannel>
			Keypads[index_1].cols[index_2].bport,INPUT);

			/* Write default state to rows pins according to HW connections */
			dio_vidWriteChannel(Keypads[index_1].rows[index_2].bport ,
      d4:	f8 01       	movw	r30, r16
      d6:	ef 58       	subi	r30, 0x8F	; 143
      d8:	ff 4f       	sbci	r31, 0xFF	; 255
      da:	40 8d       	ldd	r20, Z+24	; 0x18
      dc:	69 81       	ldd	r22, Y+1	; 0x01
      de:	88 81       	ld	r24, Y
      e0:	0e 94 50 05 	call	0xaa0	; 0xaa0 <dio_vidWriteChannel>
	u8 index_1 = 0,index_2 = 0;


	for (index_1 = 0; index_1 < KeypadsCount; index_1++)
	{
		for (index_2 = 0; index_2 < 4; index_2++)
      e4:	f3 94       	inc	r15
      e6:	01 c0       	rjmp	.+2      	; 0xea <KeyPad_init+0x58>
      e8:	f1 2c       	mov	r15, r1
      ea:	83 e0       	ldi	r24, 0x03	; 3
      ec:	8f 15       	cp	r24, r15
      ee:	c8 f6       	brcc	.-78     	; 0xa2 <KeyPad_init+0x10>
void KeyPad_init()
{
	u8 index_1 = 0,index_2 = 0;


	for (index_1 = 0; index_1 < KeypadsCount; index_1++)
      f0:	e3 94       	inc	r14
      f2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
      f6:	e8 16       	cp	r14, r24
      f8:	b8 f3       	brcs	.-18     	; 0xe8 <KeyPad_init+0x56>
			/* Write default state to rows pins according to HW connections */
			dio_vidWriteChannel(Keypads[index_1].rows[index_2].bport ,
			Keypads[index_1].rows[index_2].bchannel,Keypads[index_1].defState);
		}
	}
}
      fa:	df 91       	pop	r29
      fc:	cf 91       	pop	r28
      fe:	1f 91       	pop	r17
     100:	0f 91       	pop	r16
     102:	ff 90       	pop	r15
     104:	ef 90       	pop	r14
     106:	08 95       	ret

00000108 <GetKeyPressed>:
 *   @param [out]- char of key which is pressed
 *   @brief  Get Key pressed or not and key row and column
 *   @retval key pressing status
 */
KeyStatus_t GetKeyPressed(u8 * ch, Keypad_t Keypad_index)
{
     108:	7f 92       	push	r7
     10a:	8f 92       	push	r8
     10c:	9f 92       	push	r9
     10e:	af 92       	push	r10
     110:	bf 92       	push	r11
     112:	cf 92       	push	r12
     114:	df 92       	push	r13
     116:	ef 92       	push	r14
     118:	ff 92       	push	r15
     11a:	0f 93       	push	r16
     11c:	1f 93       	push	r17
     11e:	cf 93       	push	r28
     120:	df 93       	push	r29
     122:	6c 01       	movw	r12, r24
	u8 rowindex = 0, colindex = 0, breakFlag = 0;
	dio_level_t drive_state = STD_LOW;


	/*Check drive state by inverting default state*/
	if (STD_LOW == Keypads[Keypad_index].defState)
     124:	06 2f       	mov	r16, r22
     126:	10 e0       	ldi	r17, 0x00	; 0
     128:	89 e1       	ldi	r24, 0x19	; 25
     12a:	80 9f       	mul	r24, r16
     12c:	f0 01       	movw	r30, r0
     12e:	81 9f       	mul	r24, r17
     130:	f0 0d       	add	r31, r0
     132:	11 24       	eor	r1, r1
     134:	ef 58       	subi	r30, 0x8F	; 143
     136:	ff 4f       	sbci	r31, 0xFF	; 255
     138:	80 8d       	ldd	r24, Z+24	; 0x18
     13a:	81 11       	cpse	r24, r1
     13c:	03 c0       	rjmp	.+6      	; 0x144 <GetKeyPressed+0x3c>
	{
		drive_state = STD_HIGH;
     13e:	aa 24       	eor	r10, r10
     140:	a3 94       	inc	r10
     142:	01 c0       	rjmp	.+2      	; 0x146 <GetKeyPressed+0x3e>
 */
KeyStatus_t GetKeyPressed(u8 * ch, Keypad_t Keypad_index)
{
	KeyStatus_t pressstatus = KEY_NOT_PRESSED;
	u8 rowindex = 0, colindex = 0, breakFlag = 0;
	dio_level_t drive_state = STD_LOW;
     144:	a1 2c       	mov	r10, r1
 *   @retval key pressing status
 */
KeyStatus_t GetKeyPressed(u8 * ch, Keypad_t Keypad_index)
{
	KeyStatus_t pressstatus = KEY_NOT_PRESSED;
	u8 rowindex = 0, colindex = 0, breakFlag = 0;
     146:	81 2c       	mov	r8, r1
	{
		drive_state = STD_LOW;
	}

	/*monitor rows by drive state and check column status */
	for (rowindex = 0; rowindex < 4; rowindex++)
     148:	91 2c       	mov	r9, r1
 *   @brief  Get Key pressed or not and key row and column
 *   @retval key pressing status
 */
KeyStatus_t GetKeyPressed(u8 * ch, Keypad_t Keypad_index)
{
	KeyStatus_t pressstatus = KEY_NOT_PRESSED;
     14a:	71 2c       	mov	r7, r1
	{
		drive_state = STD_LOW;
	}

	/*monitor rows by drive state and check column status */
	for (rowindex = 0; rowindex < 4; rowindex++)
     14c:	75 c0       	rjmp	.+234    	; 0x238 <GetKeyPressed+0x130>
	{
		/*monitor rows by drive state*/
		dio_vidWriteChannel(Keypads[Keypad_index].rows[rowindex].bport,
     14e:	e9 2c       	mov	r14, r9
     150:	f1 2c       	mov	r15, r1
     152:	f7 01       	movw	r30, r14
     154:	ee 0f       	add	r30, r30
     156:	ff 1f       	adc	r31, r31
     158:	ee 0d       	add	r30, r14
     15a:	ff 1d       	adc	r31, r15
     15c:	29 e1       	ldi	r18, 0x19	; 25
     15e:	20 9f       	mul	r18, r16
     160:	c0 01       	movw	r24, r0
     162:	21 9f       	mul	r18, r17
     164:	90 0d       	add	r25, r0
     166:	11 24       	eor	r1, r1
     168:	e8 0f       	add	r30, r24
     16a:	f9 1f       	adc	r31, r25
     16c:	ef 58       	subi	r30, 0x8F	; 143
     16e:	ff 4f       	sbci	r31, 0xFF	; 255
     170:	4a 2d       	mov	r20, r10
     172:	61 81       	ldd	r22, Z+1	; 0x01
     174:	80 81       	ld	r24, Z
     176:	0e 94 50 05 	call	0xaa0	; 0xaa0 <dio_vidWriteChannel>
		Keypads[Keypad_index].rows[rowindex].bchannel,drive_state);
		

		/*check column status */
		for (colindex = 0; colindex < 4; colindex++)
     17a:	b1 2c       	mov	r11, r1
     17c:	3d c0       	rjmp	.+122    	; 0x1f8 <GetKeyPressed+0xf0>
		{
			if (drive_state == dio_dioLevelReadChannel(Keypads[Keypad_index].cols[colindex].bport,
     17e:	cb 2d       	mov	r28, r11
     180:	d0 e0       	ldi	r29, 0x00	; 0
     182:	fe 01       	movw	r30, r28
     184:	ee 0f       	add	r30, r30
     186:	ff 1f       	adc	r31, r31
     188:	ec 0f       	add	r30, r28
     18a:	fd 1f       	adc	r31, r29
     18c:	29 e1       	ldi	r18, 0x19	; 25
     18e:	20 9f       	mul	r18, r16
     190:	c0 01       	movw	r24, r0
     192:	21 9f       	mul	r18, r17
     194:	90 0d       	add	r25, r0
     196:	11 24       	eor	r1, r1
     198:	e8 0f       	add	r30, r24
     19a:	f9 1f       	adc	r31, r25
     19c:	ef 58       	subi	r30, 0x8F	; 143
     19e:	ff 4f       	sbci	r31, 0xFF	; 255
     1a0:	65 85       	ldd	r22, Z+13	; 0x0d
     1a2:	84 85       	ldd	r24, Z+12	; 0x0c
     1a4:	0e 94 bd 05 	call	0xb7a	; 0xb7a <dio_dioLevelReadChannel>
     1a8:	a8 12       	cpse	r10, r24
     1aa:	25 c0       	rjmp	.+74     	; 0x1f6 <GetKeyPressed+0xee>
			Keypads[Keypad_index].cols[colindex].bchannel ))
			{
				pressstatus = KEY_PRESSED;
				*ch = KeypadChars[rowindex][colindex];
     1ac:	f7 01       	movw	r30, r14
     1ae:	ee 0f       	add	r30, r30
     1b0:	ff 1f       	adc	r31, r31
     1b2:	ee 0f       	add	r30, r30
     1b4:	ff 1f       	adc	r31, r31
     1b6:	ef 59       	subi	r30, 0x9F	; 159
     1b8:	ff 4f       	sbci	r31, 0xFF	; 255
     1ba:	ec 0f       	add	r30, r28
     1bc:	fd 1f       	adc	r31, r29
     1be:	80 81       	ld	r24, Z
     1c0:	f6 01       	movw	r30, r12
     1c2:	80 83       	st	Z, r24
				breakFlag = 1;
				/*Busy Wait Until Key is OFF */
				while(drive_state ==  dio_dioLevelReadChannel(Keypads[Keypad_index].cols[colindex].bport,
     1c4:	fe 01       	movw	r30, r28
     1c6:	ee 0f       	add	r30, r30
     1c8:	ff 1f       	adc	r31, r31
     1ca:	ec 0f       	add	r30, r28
     1cc:	fd 1f       	adc	r31, r29
     1ce:	29 e1       	ldi	r18, 0x19	; 25
     1d0:	20 9f       	mul	r18, r16
     1d2:	c0 01       	movw	r24, r0
     1d4:	21 9f       	mul	r18, r17
     1d6:	90 0d       	add	r25, r0
     1d8:	11 24       	eor	r1, r1
     1da:	e8 0f       	add	r30, r24
     1dc:	f9 1f       	adc	r31, r25
     1de:	ef 58       	subi	r30, 0x8F	; 143
     1e0:	ff 4f       	sbci	r31, 0xFF	; 255
     1e2:	65 85       	ldd	r22, Z+13	; 0x0d
     1e4:	84 85       	ldd	r24, Z+12	; 0x0c
     1e6:	0e 94 bd 05 	call	0xb7a	; 0xb7a <dio_dioLevelReadChannel>
     1ea:	a8 16       	cp	r10, r24
     1ec:	59 f3       	breq	.-42     	; 0x1c4 <GetKeyPressed+0xbc>
			if (drive_state == dio_dioLevelReadChannel(Keypads[Keypad_index].cols[colindex].bport,
			Keypads[Keypad_index].cols[colindex].bchannel ))
			{
				pressstatus = KEY_PRESSED;
				*ch = KeypadChars[rowindex][colindex];
				breakFlag = 1;
     1ee:	88 24       	eor	r8, r8
     1f0:	83 94       	inc	r8
		for (colindex = 0; colindex < 4; colindex++)
		{
			if (drive_state == dio_dioLevelReadChannel(Keypads[Keypad_index].cols[colindex].bport,
			Keypads[Keypad_index].cols[colindex].bchannel ))
			{
				pressstatus = KEY_PRESSED;
     1f2:	77 24       	eor	r7, r7
     1f4:	73 94       	inc	r7
		dio_vidWriteChannel(Keypads[Keypad_index].rows[rowindex].bport,
		Keypads[Keypad_index].rows[rowindex].bchannel,drive_state);
		

		/*check column status */
		for (colindex = 0; colindex < 4; colindex++)
     1f6:	b3 94       	inc	r11
     1f8:	f3 e0       	ldi	r31, 0x03	; 3
     1fa:	fb 15       	cp	r31, r11
     1fc:	08 f0       	brcs	.+2      	; 0x200 <GetKeyPressed+0xf8>
     1fe:	bf cf       	rjmp	.-130    	; 0x17e <GetKeyPressed+0x76>
				while(drive_state ==  dio_dioLevelReadChannel(Keypads[Keypad_index].cols[colindex].bport,
				Keypads[Keypad_index].cols[colindex].bchannel ));
			}
		}
		/* return row state again to default state */
		dio_vidWriteChannel(Keypads[Keypad_index].rows[rowindex].bport,
     200:	89 e1       	ldi	r24, 0x19	; 25
     202:	80 9f       	mul	r24, r16
     204:	f0 01       	movw	r30, r0
     206:	81 9f       	mul	r24, r17
     208:	f0 0d       	add	r31, r0
     20a:	11 24       	eor	r1, r1
     20c:	df 01       	movw	r26, r30
     20e:	af 58       	subi	r26, 0x8F	; 143
     210:	bf 4f       	sbci	r27, 0xFF	; 255
     212:	c7 01       	movw	r24, r14
     214:	88 0f       	add	r24, r24
     216:	99 1f       	adc	r25, r25
     218:	e8 0e       	add	r14, r24
     21a:	f9 1e       	adc	r15, r25
     21c:	ee 0d       	add	r30, r14
     21e:	ff 1d       	adc	r31, r15
     220:	ef 58       	subi	r30, 0x8F	; 143
     222:	ff 4f       	sbci	r31, 0xFF	; 255
     224:	58 96       	adiw	r26, 0x18	; 24
     226:	4c 91       	ld	r20, X
     228:	61 81       	ldd	r22, Z+1	; 0x01
     22a:	80 81       	ld	r24, Z
     22c:	0e 94 50 05 	call	0xaa0	; 0xaa0 <dio_vidWriteChannel>
		Keypads[Keypad_index].rows[rowindex].bchannel,Keypads[Keypad_index].defState );
		
		if(breakFlag == 1)
     230:	81 e0       	ldi	r24, 0x01	; 1
     232:	88 16       	cp	r8, r24
     234:	29 f0       	breq	.+10     	; 0x240 <GetKeyPressed+0x138>
	{
		drive_state = STD_LOW;
	}

	/*monitor rows by drive state and check column status */
	for (rowindex = 0; rowindex < 4; rowindex++)
     236:	93 94       	inc	r9
     238:	e3 e0       	ldi	r30, 0x03	; 3
     23a:	e9 15       	cp	r30, r9
     23c:	08 f0       	brcs	.+2      	; 0x240 <GetKeyPressed+0x138>
     23e:	87 cf       	rjmp	.-242    	; 0x14e <GetKeyPressed+0x46>
	}


	return pressstatus ;

}
     240:	87 2d       	mov	r24, r7
     242:	df 91       	pop	r29
     244:	cf 91       	pop	r28
     246:	1f 91       	pop	r17
     248:	0f 91       	pop	r16
     24a:	ff 90       	pop	r15
     24c:	ef 90       	pop	r14
     24e:	df 90       	pop	r13
     250:	cf 90       	pop	r12
     252:	bf 90       	pop	r11
     254:	af 90       	pop	r10
     256:	9f 90       	pop	r9
     258:	8f 90       	pop	r8
     25a:	7f 90       	pop	r7
     25c:	08 95       	ret

0000025e <LCD_lcd_kick>:
void LCD_WriteChar(u8 ch, u8 row, u8 col)
{
	LCD_GoToXY(row,col);
	LCD_WriteData(ch);
	
}
     25e:	41 e0       	ldi	r20, 0x01	; 1
     260:	62 e0       	ldi	r22, 0x02	; 2
     262:	80 e0       	ldi	r24, 0x00	; 0
     264:	0e 94 50 05 	call	0xaa0	; 0xaa0 <dio_vidWriteChannel>
     268:	8f e9       	ldi	r24, 0x9F	; 159
     26a:	9f e0       	ldi	r25, 0x0F	; 15
     26c:	01 97       	sbiw	r24, 0x01	; 1
     26e:	f1 f7       	brne	.-4      	; 0x26c <LCD_lcd_kick+0xe>
     270:	00 c0       	rjmp	.+0      	; 0x272 <LCD_lcd_kick+0x14>
     272:	00 00       	nop
     274:	40 e0       	ldi	r20, 0x00	; 0
     276:	62 e0       	ldi	r22, 0x02	; 2
     278:	80 e0       	ldi	r24, 0x00	; 0
     27a:	0e 94 50 05 	call	0xaa0	; 0xaa0 <dio_vidWriteChannel>
     27e:	8f e9       	ldi	r24, 0x9F	; 159
     280:	9f e0       	ldi	r25, 0x0F	; 15
     282:	01 97       	sbiw	r24, 0x01	; 1
     284:	f1 f7       	brne	.-4      	; 0x282 <LCD_lcd_kick+0x24>
     286:	00 c0       	rjmp	.+0      	; 0x288 <LCD_lcd_kick+0x2a>
     288:	00 00       	nop
     28a:	08 95       	ret

0000028c <LCD_SendCommand>:
     28c:	cf 93       	push	r28
     28e:	c8 2f       	mov	r28, r24
     290:	40 e0       	ldi	r20, 0x00	; 0
     292:	63 e0       	ldi	r22, 0x03	; 3
     294:	80 e0       	ldi	r24, 0x00	; 0
     296:	0e 94 50 05 	call	0xaa0	; 0xaa0 <dio_vidWriteChannel>
     29a:	40 e0       	ldi	r20, 0x00	; 0
     29c:	69 e0       	ldi	r22, 0x09	; 9
     29e:	80 e0       	ldi	r24, 0x00	; 0
     2a0:	0e 94 50 05 	call	0xaa0	; 0xaa0 <dio_vidWriteChannel>
     2a4:	c4 fb       	bst	r28, 4
     2a6:	44 27       	eor	r20, r20
     2a8:	40 f9       	bld	r20, 0
     2aa:	60 e0       	ldi	r22, 0x00	; 0
     2ac:	81 e0       	ldi	r24, 0x01	; 1
     2ae:	0e 94 50 05 	call	0xaa0	; 0xaa0 <dio_vidWriteChannel>
     2b2:	c5 fb       	bst	r28, 5
     2b4:	44 27       	eor	r20, r20
     2b6:	40 f9       	bld	r20, 0
     2b8:	61 e0       	ldi	r22, 0x01	; 1
     2ba:	81 e0       	ldi	r24, 0x01	; 1
     2bc:	0e 94 50 05 	call	0xaa0	; 0xaa0 <dio_vidWriteChannel>
     2c0:	c6 fb       	bst	r28, 6
     2c2:	44 27       	eor	r20, r20
     2c4:	40 f9       	bld	r20, 0
     2c6:	62 e0       	ldi	r22, 0x02	; 2
     2c8:	81 e0       	ldi	r24, 0x01	; 1
     2ca:	0e 94 50 05 	call	0xaa0	; 0xaa0 <dio_vidWriteChannel>
     2ce:	4c 2f       	mov	r20, r28
     2d0:	44 1f       	adc	r20, r20
     2d2:	44 27       	eor	r20, r20
     2d4:	44 1f       	adc	r20, r20
     2d6:	64 e0       	ldi	r22, 0x04	; 4
     2d8:	81 e0       	ldi	r24, 0x01	; 1
     2da:	0e 94 50 05 	call	0xaa0	; 0xaa0 <dio_vidWriteChannel>
     2de:	0e 94 2f 01 	call	0x25e	; 0x25e <LCD_lcd_kick>
     2e2:	4c 2f       	mov	r20, r28
     2e4:	41 70       	andi	r20, 0x01	; 1
     2e6:	60 e0       	ldi	r22, 0x00	; 0
     2e8:	81 e0       	ldi	r24, 0x01	; 1
     2ea:	0e 94 50 05 	call	0xaa0	; 0xaa0 <dio_vidWriteChannel>
     2ee:	c1 fb       	bst	r28, 1
     2f0:	44 27       	eor	r20, r20
     2f2:	40 f9       	bld	r20, 0
     2f4:	61 e0       	ldi	r22, 0x01	; 1
     2f6:	81 e0       	ldi	r24, 0x01	; 1
     2f8:	0e 94 50 05 	call	0xaa0	; 0xaa0 <dio_vidWriteChannel>
     2fc:	c2 fb       	bst	r28, 2
     2fe:	44 27       	eor	r20, r20
     300:	40 f9       	bld	r20, 0
     302:	62 e0       	ldi	r22, 0x02	; 2
     304:	81 e0       	ldi	r24, 0x01	; 1
     306:	0e 94 50 05 	call	0xaa0	; 0xaa0 <dio_vidWriteChannel>
     30a:	c3 fb       	bst	r28, 3
     30c:	44 27       	eor	r20, r20
     30e:	40 f9       	bld	r20, 0
     310:	64 e0       	ldi	r22, 0x04	; 4
     312:	81 e0       	ldi	r24, 0x01	; 1
     314:	0e 94 50 05 	call	0xaa0	; 0xaa0 <dio_vidWriteChannel>
     318:	0e 94 2f 01 	call	0x25e	; 0x25e <LCD_lcd_kick>
     31c:	cf 91       	pop	r28
     31e:	08 95       	ret

00000320 <LCD_WriteData>:
     320:	cf 93       	push	r28
     322:	c8 2f       	mov	r28, r24
     324:	41 e0       	ldi	r20, 0x01	; 1
     326:	63 e0       	ldi	r22, 0x03	; 3
     328:	80 e0       	ldi	r24, 0x00	; 0
     32a:	0e 94 50 05 	call	0xaa0	; 0xaa0 <dio_vidWriteChannel>
     32e:	40 e0       	ldi	r20, 0x00	; 0
     330:	69 e0       	ldi	r22, 0x09	; 9
     332:	80 e0       	ldi	r24, 0x00	; 0
     334:	0e 94 50 05 	call	0xaa0	; 0xaa0 <dio_vidWriteChannel>
     338:	c4 fb       	bst	r28, 4
     33a:	44 27       	eor	r20, r20
     33c:	40 f9       	bld	r20, 0
     33e:	60 e0       	ldi	r22, 0x00	; 0
     340:	81 e0       	ldi	r24, 0x01	; 1
     342:	0e 94 50 05 	call	0xaa0	; 0xaa0 <dio_vidWriteChannel>
     346:	c5 fb       	bst	r28, 5
     348:	44 27       	eor	r20, r20
     34a:	40 f9       	bld	r20, 0
     34c:	61 e0       	ldi	r22, 0x01	; 1
     34e:	81 e0       	ldi	r24, 0x01	; 1
     350:	0e 94 50 05 	call	0xaa0	; 0xaa0 <dio_vidWriteChannel>
     354:	c6 fb       	bst	r28, 6
     356:	44 27       	eor	r20, r20
     358:	40 f9       	bld	r20, 0
     35a:	62 e0       	ldi	r22, 0x02	; 2
     35c:	81 e0       	ldi	r24, 0x01	; 1
     35e:	0e 94 50 05 	call	0xaa0	; 0xaa0 <dio_vidWriteChannel>
     362:	4c 2f       	mov	r20, r28
     364:	44 1f       	adc	r20, r20
     366:	44 27       	eor	r20, r20
     368:	44 1f       	adc	r20, r20
     36a:	64 e0       	ldi	r22, 0x04	; 4
     36c:	81 e0       	ldi	r24, 0x01	; 1
     36e:	0e 94 50 05 	call	0xaa0	; 0xaa0 <dio_vidWriteChannel>
     372:	0e 94 2f 01 	call	0x25e	; 0x25e <LCD_lcd_kick>
     376:	4c 2f       	mov	r20, r28
     378:	41 70       	andi	r20, 0x01	; 1
     37a:	60 e0       	ldi	r22, 0x00	; 0
     37c:	81 e0       	ldi	r24, 0x01	; 1
     37e:	0e 94 50 05 	call	0xaa0	; 0xaa0 <dio_vidWriteChannel>
     382:	c1 fb       	bst	r28, 1
     384:	44 27       	eor	r20, r20
     386:	40 f9       	bld	r20, 0
     388:	61 e0       	ldi	r22, 0x01	; 1
     38a:	81 e0       	ldi	r24, 0x01	; 1
     38c:	0e 94 50 05 	call	0xaa0	; 0xaa0 <dio_vidWriteChannel>
     390:	c2 fb       	bst	r28, 2
     392:	44 27       	eor	r20, r20
     394:	40 f9       	bld	r20, 0
     396:	62 e0       	ldi	r22, 0x02	; 2
     398:	81 e0       	ldi	r24, 0x01	; 1
     39a:	0e 94 50 05 	call	0xaa0	; 0xaa0 <dio_vidWriteChannel>
     39e:	c3 fb       	bst	r28, 3
     3a0:	44 27       	eor	r20, r20
     3a2:	40 f9       	bld	r20, 0
     3a4:	64 e0       	ldi	r22, 0x04	; 4
     3a6:	81 e0       	ldi	r24, 0x01	; 1
     3a8:	0e 94 50 05 	call	0xaa0	; 0xaa0 <dio_vidWriteChannel>
     3ac:	0e 94 2f 01 	call	0x25e	; 0x25e <LCD_lcd_kick>
     3b0:	cf 91       	pop	r28
     3b2:	08 95       	ret

000003b4 <LCD_Init>:
     3b4:	41 e0       	ldi	r20, 0x01	; 1
     3b6:	63 e0       	ldi	r22, 0x03	; 3
     3b8:	80 e0       	ldi	r24, 0x00	; 0
     3ba:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <dio_vidConfigChannel>
     3be:	41 e0       	ldi	r20, 0x01	; 1
     3c0:	62 e0       	ldi	r22, 0x02	; 2
     3c2:	80 e0       	ldi	r24, 0x00	; 0
     3c4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <dio_vidConfigChannel>
     3c8:	41 e0       	ldi	r20, 0x01	; 1
     3ca:	69 e0       	ldi	r22, 0x09	; 9
     3cc:	80 e0       	ldi	r24, 0x00	; 0
     3ce:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <dio_vidConfigChannel>
     3d2:	41 e0       	ldi	r20, 0x01	; 1
     3d4:	60 e0       	ldi	r22, 0x00	; 0
     3d6:	81 e0       	ldi	r24, 0x01	; 1
     3d8:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <dio_vidConfigChannel>
     3dc:	41 e0       	ldi	r20, 0x01	; 1
     3de:	61 e0       	ldi	r22, 0x01	; 1
     3e0:	81 e0       	ldi	r24, 0x01	; 1
     3e2:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <dio_vidConfigChannel>
     3e6:	41 e0       	ldi	r20, 0x01	; 1
     3e8:	62 e0       	ldi	r22, 0x02	; 2
     3ea:	81 e0       	ldi	r24, 0x01	; 1
     3ec:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <dio_vidConfigChannel>
     3f0:	41 e0       	ldi	r20, 0x01	; 1
     3f2:	64 e0       	ldi	r22, 0x04	; 4
     3f4:	81 e0       	ldi	r24, 0x01	; 1
     3f6:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <dio_vidConfigChannel>
     3fa:	81 e0       	ldi	r24, 0x01	; 1
     3fc:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_SendCommand>
     400:	82 e0       	ldi	r24, 0x02	; 2
     402:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_SendCommand>
     406:	88 e2       	ldi	r24, 0x28	; 40
     408:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_SendCommand>
     40c:	86 e0       	ldi	r24, 0x06	; 6
     40e:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_SendCommand>
     412:	8f e0       	ldi	r24, 0x0F	; 15
     414:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_SendCommand>
     418:	08 95       	ret

0000041a <LCD_ClearDisplay>:
     41a:	81 e0       	ldi	r24, 0x01	; 1
     41c:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_SendCommand>
     420:	8f e3       	ldi	r24, 0x3F	; 63
     422:	9c e9       	ldi	r25, 0x9C	; 156
     424:	01 97       	sbiw	r24, 0x01	; 1
     426:	f1 f7       	brne	.-4      	; 0x424 <LCD_ClearDisplay+0xa>
     428:	00 c0       	rjmp	.+0      	; 0x42a <LCD_ClearDisplay+0x10>
     42a:	00 00       	nop
     42c:	82 e0       	ldi	r24, 0x02	; 2
     42e:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_SendCommand>
     432:	8f e3       	ldi	r24, 0x3F	; 63
     434:	9c e9       	ldi	r25, 0x9C	; 156
     436:	01 97       	sbiw	r24, 0x01	; 1
     438:	f1 f7       	brne	.-4      	; 0x436 <LCD_ClearDisplay+0x1c>
     43a:	00 c0       	rjmp	.+0      	; 0x43c <LCD_ClearDisplay+0x22>
     43c:	00 00       	nop
     43e:	08 95       	ret

00000440 <LCD_GoToXY>:
     440:	81 11       	cpse	r24, r1
     442:	05 c0       	rjmp	.+10     	; 0x44e <LCD_GoToXY+0xe>
     444:	80 e8       	ldi	r24, 0x80	; 128
     446:	86 0f       	add	r24, r22
     448:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_SendCommand>
     44c:	08 95       	ret
     44e:	81 30       	cpi	r24, 0x01	; 1
     450:	29 f4       	brne	.+10     	; 0x45c <LCD_GoToXY+0x1c>
     452:	80 ec       	ldi	r24, 0xC0	; 192
     454:	86 0f       	add	r24, r22
     456:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_SendCommand>
     45a:	08 95       	ret
     45c:	82 30       	cpi	r24, 0x02	; 2
     45e:	29 f4       	brne	.+10     	; 0x46a <LCD_GoToXY+0x2a>
     460:	84 e9       	ldi	r24, 0x94	; 148
     462:	86 0f       	add	r24, r22
     464:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_SendCommand>
     468:	08 95       	ret
     46a:	83 30       	cpi	r24, 0x03	; 3
     46c:	21 f4       	brne	.+8      	; 0x476 <LCD_GoToXY+0x36>
     46e:	84 ed       	ldi	r24, 0xD4	; 212
     470:	86 0f       	add	r24, r22
     472:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_SendCommand>
     476:	08 95       	ret

00000478 <LCD_WriteString>:

}


void LCD_WriteString(char *str)
{
     478:	0f 93       	push	r16
     47a:	1f 93       	push	r17
     47c:	cf 93       	push	r28
     47e:	8c 01       	movw	r16, r24

	for (u8 index = 0; str[index] ; index++)
     480:	c0 e0       	ldi	r28, 0x00	; 0
     482:	03 c0       	rjmp	.+6      	; 0x48a <LCD_WriteString+0x12>
	{
		LCD_WriteData(str[index]);
     484:	0e 94 90 01 	call	0x320	; 0x320 <LCD_WriteData>


void LCD_WriteString(char *str)
{

	for (u8 index = 0; str[index] ; index++)
     488:	cf 5f       	subi	r28, 0xFF	; 255
     48a:	f8 01       	movw	r30, r16
     48c:	ec 0f       	add	r30, r28
     48e:	f1 1d       	adc	r31, r1
     490:	80 81       	ld	r24, Z
     492:	81 11       	cpse	r24, r1
     494:	f7 cf       	rjmp	.-18     	; 0x484 <LCD_WriteString+0xc>
	{
		LCD_WriteData(str[index]);
		
	}
}
     496:	cf 91       	pop	r28
     498:	1f 91       	pop	r17
     49a:	0f 91       	pop	r16
     49c:	08 95       	ret

0000049e <getPassword>:

BaseType_t calEquationReturned;
TaskHandle_t calEquationHandle = NULL;

void getPassword(void *ptr)
{
     49e:	cf 93       	push	r28
     4a0:	df 93       	push	r29
     4a2:	1f 92       	push	r1
     4a4:	cd b7       	in	r28, 0x3d	; 61
     4a6:	de b7       	in	r29, 0x3e	; 62
	u8 pass;
	static u8 index = 0;

	while (1)
	{
		vTaskSuspend(getEquationHandle);
     4a8:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <getEquationHandle>
     4ac:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <getEquationHandle+0x1>
     4b0:	0e 94 ff 13 	call	0x27fe	; 0x27fe <vTaskSuspend>
		vTaskSuspend(CheckPasswordHandle);
     4b4:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <CheckPasswordHandle>
     4b8:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <CheckPasswordHandle+0x1>
     4bc:	0e 94 ff 13 	call	0x27fe	; 0x27fe <vTaskSuspend>
		vTaskSuspend(calEquationHandle);
     4c0:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <calEquationHandle>
     4c4:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <calEquationHandle+0x1>
     4c8:	0e 94 ff 13 	call	0x27fe	; 0x27fe <vTaskSuspend>

		/* Take Password from keypad*/
		xSemaphoreTake(LCDSemaphore, 10);
     4cc:	6a e0       	ldi	r22, 0x0A	; 10
     4ce:	70 e0       	ldi	r23, 0x00	; 0
     4d0:	80 91 6b 07 	lds	r24, 0x076B	; 0x80076b <LCDSemaphore>
     4d4:	90 91 6c 07 	lds	r25, 0x076C	; 0x80076c <LCDSemaphore+0x1>
     4d8:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <xQueueSemaphoreTake>
		if (index == 0)
     4dc:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
     4e0:	81 11       	cpse	r24, r1
     4e2:	06 c0       	rjmp	.+12     	; 0x4f0 <getPassword+0x52>
		{
			LCD_ClearDisplay();
     4e4:	0e 94 0d 02 	call	0x41a	; 0x41a <LCD_ClearDisplay>
			LCD_WriteString("Enter Password :");
     4e8:	81 e9       	ldi	r24, 0x91	; 145
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	0e 94 3c 02 	call	0x478	; 0x478 <LCD_WriteString>
		}

		xSemaphoreTake(keypadSemaphore, 10);
     4f0:	6a e0       	ldi	r22, 0x0A	; 10
     4f2:	70 e0       	ldi	r23, 0x00	; 0
     4f4:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <keypadSemaphore>
     4f8:	90 91 71 07 	lds	r25, 0x0771	; 0x800771 <keypadSemaphore+0x1>
     4fc:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <xQueueSemaphoreTake>
		while (GetKeyPressed(&pass, 0) != KEY_PRESSED)
     500:	60 e0       	ldi	r22, 0x00	; 0
     502:	ce 01       	movw	r24, r28
     504:	01 96       	adiw	r24, 0x01	; 1
     506:	0e 94 84 00 	call	0x108	; 0x108 <GetKeyPressed>
     50a:	81 30       	cpi	r24, 0x01	; 1
     50c:	c9 f7       	brne	.-14     	; 0x500 <getPassword+0x62>
			;
		xSemaphoreGive(keypadSemaphore);
     50e:	20 e0       	ldi	r18, 0x00	; 0
     510:	40 e0       	ldi	r20, 0x00	; 0
     512:	50 e0       	ldi	r21, 0x00	; 0
     514:	60 e0       	ldi	r22, 0x00	; 0
     516:	70 e0       	ldi	r23, 0x00	; 0
     518:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <keypadSemaphore>
     51c:	90 91 71 07 	lds	r25, 0x0771	; 0x800771 <keypadSemaphore+0x1>
     520:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <xQueueGenericSend>
		LCD_GoToXY(1, index + 5);
     524:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <__data_end>
     528:	6b 5f       	subi	r22, 0xFB	; 251
     52a:	81 e0       	ldi	r24, 0x01	; 1
     52c:	0e 94 20 02 	call	0x440	; 0x440 <LCD_GoToXY>
		LCD_WriteData(pass);
     530:	89 81       	ldd	r24, Y+1	; 0x01
     532:	0e 94 90 01 	call	0x320	; 0x320 <LCD_WriteData>
		xSemaphoreGive(LCDSemaphore);
     536:	20 e0       	ldi	r18, 0x00	; 0
     538:	40 e0       	ldi	r20, 0x00	; 0
     53a:	50 e0       	ldi	r21, 0x00	; 0
     53c:	60 e0       	ldi	r22, 0x00	; 0
     53e:	70 e0       	ldi	r23, 0x00	; 0
     540:	80 91 6b 07 	lds	r24, 0x076B	; 0x80076b <LCDSemaphore>
     544:	90 91 6c 07 	lds	r25, 0x076C	; 0x80076c <LCDSemaphore+0x1>
     548:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <xQueueGenericSend>

		index++;
     54c:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
     550:	8f 5f       	subi	r24, 0xFF	; 255
     552:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
		xQueueSend(passwordQ, &pass, 10);
     556:	20 e0       	ldi	r18, 0x00	; 0
     558:	4a e0       	ldi	r20, 0x0A	; 10
     55a:	50 e0       	ldi	r21, 0x00	; 0
     55c:	be 01       	movw	r22, r28
     55e:	6f 5f       	subi	r22, 0xFF	; 255
     560:	7f 4f       	sbci	r23, 0xFF	; 255
     562:	80 91 72 07 	lds	r24, 0x0772	; 0x800772 <passwordQ>
     566:	90 91 73 07 	lds	r25, 0x0773	; 0x800773 <passwordQ+0x1>
     56a:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <xQueueGenericSend>

		if (index >= 6)
     56e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
     572:	86 30       	cpi	r24, 0x06	; 6
     574:	70 f0       	brcs	.+28     	; 0x592 <getPassword+0xf4>
		{

			vTaskResume(CheckPasswordHandle);
     576:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <CheckPasswordHandle>
     57a:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <CheckPasswordHandle+0x1>
     57e:	0e 94 0e 11 	call	0x221c	; 0x221c <vTaskResume>
			index = 0;
     582:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <__data_end>

			vTaskSuspend(getPasswordHandle);
     586:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <getPasswordHandle>
     58a:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <getPasswordHandle+0x1>
     58e:	0e 94 ff 13 	call	0x27fe	; 0x27fe <vTaskSuspend>
		}

		vTaskDelay(200);
     592:	88 ec       	ldi	r24, 0xC8	; 200
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	0e 94 95 13 	call	0x272a	; 0x272a <vTaskDelay>
	}
     59a:	86 cf       	rjmp	.-244    	; 0x4a8 <getPassword+0xa>

0000059c <getEquation>:
		vTaskDelay(1000);
	}
}

void getEquation(void *ptr)
{
     59c:	cf 93       	push	r28
     59e:	df 93       	push	r29
     5a0:	1f 92       	push	r1
     5a2:	cd b7       	in	r28, 0x3d	; 61
     5a4:	de b7       	in	r29, 0x3e	; 62

	u8 index = 0;
     5a6:	10 e0       	ldi	r17, 0x00	; 0
	u8 temp;
	while (1)
	{
		xSemaphoreTake(LCDSemaphore, 10);
     5a8:	6a e0       	ldi	r22, 0x0A	; 10
     5aa:	70 e0       	ldi	r23, 0x00	; 0
     5ac:	80 91 6b 07 	lds	r24, 0x076B	; 0x80076b <LCDSemaphore>
     5b0:	90 91 6c 07 	lds	r25, 0x076C	; 0x80076c <LCDSemaphore+0x1>
     5b4:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <xQueueSemaphoreTake>
		xSemaphoreTake(keypadSemaphore, 10);
     5b8:	6a e0       	ldi	r22, 0x0A	; 10
     5ba:	70 e0       	ldi	r23, 0x00	; 0
     5bc:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <keypadSemaphore>
     5c0:	90 91 71 07 	lds	r25, 0x0771	; 0x800771 <keypadSemaphore+0x1>
     5c4:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <xQueueSemaphoreTake>

		if (index == 0)
     5c8:	11 11       	cpse	r17, r1
     5ca:	0a c0       	rjmp	.+20     	; 0x5e0 <getEquation+0x44>
		{
			LCD_ClearDisplay();
     5cc:	0e 94 0d 02 	call	0x41a	; 0x41a <LCD_ClearDisplay>
			LCD_WriteString(" Enter Equation ");
     5d0:	82 ea       	ldi	r24, 0xA2	; 162
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	0e 94 3c 02 	call	0x478	; 0x478 <LCD_WriteString>
			LCD_GoToXY(1, 0);
     5d8:	60 e0       	ldi	r22, 0x00	; 0
     5da:	81 e0       	ldi	r24, 0x01	; 1
     5dc:	0e 94 20 02 	call	0x440	; 0x440 <LCD_GoToXY>
		}
		while (GetKeyPressed(&temp, 0) != KEY_PRESSED)
     5e0:	60 e0       	ldi	r22, 0x00	; 0
     5e2:	ce 01       	movw	r24, r28
     5e4:	01 96       	adiw	r24, 0x01	; 1
     5e6:	0e 94 84 00 	call	0x108	; 0x108 <GetKeyPressed>
     5ea:	81 30       	cpi	r24, 0x01	; 1
     5ec:	c9 f7       	brne	.-14     	; 0x5e0 <getEquation+0x44>
			;
		LCD_WriteData(temp);
     5ee:	89 81       	ldd	r24, Y+1	; 0x01
     5f0:	0e 94 90 01 	call	0x320	; 0x320 <LCD_WriteData>
		index++;
     5f4:	1f 5f       	subi	r17, 0xFF	; 255
		xQueueSend(equationQ, &temp, 10);
     5f6:	20 e0       	ldi	r18, 0x00	; 0
     5f8:	4a e0       	ldi	r20, 0x0A	; 10
     5fa:	50 e0       	ldi	r21, 0x00	; 0
     5fc:	be 01       	movw	r22, r28
     5fe:	6f 5f       	subi	r22, 0xFF	; 255
     600:	7f 4f       	sbci	r23, 0xFF	; 255
     602:	80 91 75 07 	lds	r24, 0x0775	; 0x800775 <equationQ>
     606:	90 91 76 07 	lds	r25, 0x0776	; 0x800776 <equationQ+0x1>
     60a:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <xQueueGenericSend>

		xSemaphoreGive(keypadSemaphore);
     60e:	20 e0       	ldi	r18, 0x00	; 0
     610:	40 e0       	ldi	r20, 0x00	; 0
     612:	50 e0       	ldi	r21, 0x00	; 0
     614:	60 e0       	ldi	r22, 0x00	; 0
     616:	70 e0       	ldi	r23, 0x00	; 0
     618:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <keypadSemaphore>
     61c:	90 91 71 07 	lds	r25, 0x0771	; 0x800771 <keypadSemaphore+0x1>
     620:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <xQueueGenericSend>

		xSemaphoreGive(LCDSemaphore);
     624:	20 e0       	ldi	r18, 0x00	; 0
     626:	40 e0       	ldi	r20, 0x00	; 0
     628:	50 e0       	ldi	r21, 0x00	; 0
     62a:	60 e0       	ldi	r22, 0x00	; 0
     62c:	70 e0       	ldi	r23, 0x00	; 0
     62e:	80 91 6b 07 	lds	r24, 0x076B	; 0x80076b <LCDSemaphore>
     632:	90 91 6c 07 	lds	r25, 0x076C	; 0x80076c <LCDSemaphore+0x1>
     636:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <xQueueGenericSend>

		if (index == 4)
     63a:	14 30       	cpi	r17, 0x04	; 4
     63c:	39 f4       	brne	.+14     	; 0x64c <getEquation+0xb0>
		{
			vTaskResume(calEquationHandle);
     63e:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <calEquationHandle>
     642:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <calEquationHandle+0x1>
     646:	0e 94 0e 11 	call	0x221c	; 0x221c <vTaskResume>
			index = 0;
     64a:	10 e0       	ldi	r17, 0x00	; 0
		}
		vTaskDelay(1000);
     64c:	88 ee       	ldi	r24, 0xE8	; 232
     64e:	93 e0       	ldi	r25, 0x03	; 3
     650:	0e 94 95 13 	call	0x272a	; 0x272a <vTaskDelay>
	}
     654:	a9 cf       	rjmp	.-174    	; 0x5a8 <getEquation+0xc>

00000656 <calEquation>:
}

void calEquation(void *ptr)
{
     656:	cf 93       	push	r28
     658:	df 93       	push	r29
     65a:	cd b7       	in	r28, 0x3d	; 61
     65c:	de b7       	in	r29, 0x3e	; 62
     65e:	27 97       	sbiw	r28, 0x07	; 7
     660:	0f b6       	in	r0, 0x3f	; 63
     662:	f8 94       	cli
     664:	de bf       	out	0x3e, r29	; 62
     666:	0f be       	out	0x3f, r0	; 63
     668:	cd bf       	out	0x3d, r28	; 61
	u8 EquationArr[6], temp;
	while (1)
	{
		for (u8 i = 0; i < 4; i++)
     66a:	f1 2c       	mov	r15, r1
     66c:	12 c0       	rjmp	.+36     	; 0x692 <calEquation+0x3c>
		{
			EquationArr[i] = xQueueReceive(equationQ, &EquationArr[i], 10);
     66e:	01 e0       	ldi	r16, 0x01	; 1
     670:	10 e0       	ldi	r17, 0x00	; 0
     672:	0c 0f       	add	r16, r28
     674:	1d 1f       	adc	r17, r29
     676:	0f 0d       	add	r16, r15
     678:	11 1d       	adc	r17, r1
     67a:	4a e0       	ldi	r20, 0x0A	; 10
     67c:	50 e0       	ldi	r21, 0x00	; 0
     67e:	b8 01       	movw	r22, r16
     680:	80 91 75 07 	lds	r24, 0x0775	; 0x800775 <equationQ>
     684:	90 91 76 07 	lds	r25, 0x0776	; 0x800776 <equationQ+0x1>
     688:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <xQueueReceive>
     68c:	f8 01       	movw	r30, r16
     68e:	80 83       	st	Z, r24
void calEquation(void *ptr)
{
	u8 EquationArr[6], temp;
	while (1)
	{
		for (u8 i = 0; i < 4; i++)
     690:	f3 94       	inc	r15
     692:	f3 e0       	ldi	r31, 0x03	; 3
     694:	ff 15       	cp	r31, r15
     696:	58 f7       	brcc	.-42     	; 0x66e <calEquation+0x18>
		{
			EquationArr[i] = xQueueReceive(equationQ, &EquationArr[i], 10);
		}
			LCD_WriteData(EquationArr[0]);
     698:	89 81       	ldd	r24, Y+1	; 0x01
     69a:	0e 94 90 01 	call	0x320	; 0x320 <LCD_WriteData>
			

		switch (EquationArr[1])
     69e:	8a 81       	ldd	r24, Y+2	; 0x02
     6a0:	82 34       	cpi	r24, 0x42	; 66
     6a2:	51 f0       	breq	.+20     	; 0x6b8 <calEquation+0x62>
     6a4:	83 34       	cpi	r24, 0x43	; 67
     6a6:	71 f0       	breq	.+28     	; 0x6c4 <calEquation+0x6e>
     6a8:	81 34       	cpi	r24, 0x41	; 65
     6aa:	a1 f4       	brne	.+40     	; 0x6d4 <calEquation+0x7e>
		{
		case 'A':

			LCD_WriteData(EquationArr[0] + EquationArr[2]);
     6ac:	99 81       	ldd	r25, Y+1	; 0x01
     6ae:	8b 81       	ldd	r24, Y+3	; 0x03
     6b0:	89 0f       	add	r24, r25
     6b2:	0e 94 90 01 	call	0x320	; 0x320 <LCD_WriteData>

			break;
     6b6:	17 c0       	rjmp	.+46     	; 0x6e6 <calEquation+0x90>
		case 'B':

			LCD_WriteData(EquationArr[0] - EquationArr[2] );
     6b8:	89 81       	ldd	r24, Y+1	; 0x01
     6ba:	9b 81       	ldd	r25, Y+3	; 0x03
     6bc:	89 1b       	sub	r24, r25
     6be:	0e 94 90 01 	call	0x320	; 0x320 <LCD_WriteData>

			break;
     6c2:	11 c0       	rjmp	.+34     	; 0x6e6 <calEquation+0x90>
		case 'C':

			LCD_WriteData((EquationArr[0] * EquationArr[2]) );
     6c4:	99 81       	ldd	r25, Y+1	; 0x01
     6c6:	8b 81       	ldd	r24, Y+3	; 0x03
     6c8:	98 9f       	mul	r25, r24
     6ca:	80 2d       	mov	r24, r0
     6cc:	11 24       	eor	r1, r1
     6ce:	0e 94 90 01 	call	0x320	; 0x320 <LCD_WriteData>

			break;
     6d2:	09 c0       	rjmp	.+18     	; 0x6e6 <calEquation+0x90>

		default:

			LCD_ClearDisplay();
     6d4:	0e 94 0d 02 	call	0x41a	; 0x41a <LCD_ClearDisplay>
			LCD_WriteString("Try again  ");
     6d8:	83 eb       	ldi	r24, 0xB3	; 179
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	0e 94 3c 02 	call	0x478	; 0x478 <LCD_WriteString>
			LCD_WriteData(EquationArr[1]);
     6e0:	8a 81       	ldd	r24, Y+2	; 0x02
     6e2:	0e 94 90 01 	call	0x320	; 0x320 <LCD_WriteData>

			break;
		}

		xSemaphoreTake(keypadSemaphore, 10);
     6e6:	6a e0       	ldi	r22, 0x0A	; 10
     6e8:	70 e0       	ldi	r23, 0x00	; 0
     6ea:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <keypadSemaphore>
     6ee:	90 91 71 07 	lds	r25, 0x0771	; 0x800771 <keypadSemaphore+0x1>
     6f2:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <xQueueSemaphoreTake>
		while (GetKeyPressed(&temp, 0) != KEY_PRESSED)
     6f6:	60 e0       	ldi	r22, 0x00	; 0
     6f8:	ce 01       	movw	r24, r28
     6fa:	07 96       	adiw	r24, 0x07	; 7
     6fc:	0e 94 84 00 	call	0x108	; 0x108 <GetKeyPressed>
     700:	81 30       	cpi	r24, 0x01	; 1
     702:	c9 f7       	brne	.-14     	; 0x6f6 <calEquation+0xa0>
			;
		vTaskResume(getEquationHandle);
     704:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <getEquationHandle>
     708:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <getEquationHandle+0x1>
     70c:	0e 94 0e 11 	call	0x221c	; 0x221c <vTaskResume>
		xSemaphoreGive(keypadSemaphore);
     710:	20 e0       	ldi	r18, 0x00	; 0
     712:	40 e0       	ldi	r20, 0x00	; 0
     714:	50 e0       	ldi	r21, 0x00	; 0
     716:	60 e0       	ldi	r22, 0x00	; 0
     718:	70 e0       	ldi	r23, 0x00	; 0
     71a:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <keypadSemaphore>
     71e:	90 91 71 07 	lds	r25, 0x0771	; 0x800771 <keypadSemaphore+0x1>
     722:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <xQueueGenericSend>

		vTaskDelay(1000);
     726:	88 ee       	ldi	r24, 0xE8	; 232
     728:	93 e0       	ldi	r25, 0x03	; 3
     72a:	0e 94 95 13 	call	0x272a	; 0x272a <vTaskDelay>
	}
     72e:	9d cf       	rjmp	.-198    	; 0x66a <calEquation+0x14>

00000730 <checkPassword>:
		vTaskDelay(200);
	}
}

void checkPassword(void *ptr)
{
     730:	cf 93       	push	r28
     732:	df 93       	push	r29
     734:	1f 92       	push	r1
     736:	cd b7       	in	r28, 0x3d	; 61
     738:	de b7       	in	r29, 0x3e	; 62

	char temp;
	u8 index = 0, flag = 0;
	while (1)
	{
		vTaskSuspend(calEquationHandle);
     73a:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <calEquationHandle>
     73e:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <calEquationHandle+0x1>
     742:	0e 94 ff 13 	call	0x27fe	; 0x27fe <vTaskSuspend>

		LCD_ClearDisplay();
     746:	0e 94 0d 02 	call	0x41a	; 0x41a <LCD_ClearDisplay>

		for (index = 0; index < 6; index++)
     74a:	10 e0       	ldi	r17, 0x00	; 0
     74c:	26 c0       	rjmp	.+76     	; 0x79a <checkPassword+0x6a>
		{
			xQueueReceive(passwordQ, &temp, 10);
     74e:	4a e0       	ldi	r20, 0x0A	; 10
     750:	50 e0       	ldi	r21, 0x00	; 0
     752:	be 01       	movw	r22, r28
     754:	6f 5f       	subi	r22, 0xFF	; 255
     756:	7f 4f       	sbci	r23, 0xFF	; 255
     758:	80 91 72 07 	lds	r24, 0x0772	; 0x800772 <passwordQ>
     75c:	90 91 73 07 	lds	r25, 0x0773	; 0x800773 <passwordQ+0x1>
     760:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <xQueueReceive>

			if (Password[index] == (temp - 48))
     764:	e1 2f       	mov	r30, r17
     766:	f0 e0       	ldi	r31, 0x00	; 0
     768:	e6 57       	subi	r30, 0x76	; 118
     76a:	ff 4f       	sbci	r31, 0xFF	; 255
     76c:	20 81       	ld	r18, Z
     76e:	30 e0       	ldi	r19, 0x00	; 0
     770:	89 81       	ldd	r24, Y+1	; 0x01
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	c0 97       	sbiw	r24, 0x30	; 48
     776:	28 17       	cp	r18, r24
     778:	39 07       	cpc	r19, r25
     77a:	71 f4       	brne	.+28     	; 0x798 <checkPassword+0x68>
			{

				flag++;
				xEventGroupSetBits(CheckPasswordEventHandle, (1 << index));
     77c:	61 e0       	ldi	r22, 0x01	; 1
     77e:	70 e0       	ldi	r23, 0x00	; 0
     780:	01 2e       	mov	r0, r17
     782:	02 c0       	rjmp	.+4      	; 0x788 <checkPassword+0x58>
     784:	66 0f       	add	r22, r22
     786:	77 1f       	adc	r23, r23
     788:	0a 94       	dec	r0
     78a:	e2 f7       	brpl	.-8      	; 0x784 <checkPassword+0x54>
     78c:	80 91 77 07 	lds	r24, 0x0777	; 0x800777 <CheckPasswordEventHandle>
     790:	90 91 78 07 	lds	r25, 0x0778	; 0x800778 <CheckPasswordEventHandle+0x1>
     794:	0e 94 c9 07 	call	0xf92	; 0xf92 <xEventGroupSetBits>
	{
		vTaskSuspend(calEquationHandle);

		LCD_ClearDisplay();

		for (index = 0; index < 6; index++)
     798:	1f 5f       	subi	r17, 0xFF	; 255
     79a:	16 30       	cpi	r17, 0x06	; 6
     79c:	c0 f2       	brcs	.-80     	; 0x74e <checkPassword+0x1e>
			else
			{
			}
		}

		if (xEventGroupGetBits(CheckPasswordEventHandle) == 0x3F)
     79e:	60 e0       	ldi	r22, 0x00	; 0
     7a0:	70 e0       	ldi	r23, 0x00	; 0
     7a2:	80 91 77 07 	lds	r24, 0x0777	; 0x800777 <CheckPasswordEventHandle>
     7a6:	90 91 78 07 	lds	r25, 0x0778	; 0x800778 <CheckPasswordEventHandle+0x1>
     7aa:	0e 94 ba 07 	call	0xf74	; 0xf74 <xEventGroupClearBits>
     7ae:	cf 97       	sbiw	r24, 0x3f	; 63
     7b0:	81 f5       	brne	.+96     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
		// if (flag >= 5)
		{
			/* true password message */
			xSemaphoreTake(LCDSemaphore, 10);
     7b2:	6a e0       	ldi	r22, 0x0A	; 10
     7b4:	70 e0       	ldi	r23, 0x00	; 0
     7b6:	80 91 6b 07 	lds	r24, 0x076B	; 0x80076b <LCDSemaphore>
     7ba:	90 91 6c 07 	lds	r25, 0x076C	; 0x80076c <LCDSemaphore+0x1>
     7be:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <xQueueSemaphoreTake>
			vTaskDelay(500);
     7c2:	84 ef       	ldi	r24, 0xF4	; 244
     7c4:	91 e0       	ldi	r25, 0x01	; 1
     7c6:	0e 94 95 13 	call	0x272a	; 0x272a <vTaskDelay>
			LCD_ClearDisplay();
     7ca:	0e 94 0d 02 	call	0x41a	; 0x41a <LCD_ClearDisplay>
			LCD_WriteString("True Password :");
     7ce:	8f eb       	ldi	r24, 0xBF	; 191
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	0e 94 3c 02 	call	0x478	; 0x478 <LCD_WriteString>

			xSemaphoreGive(LCDSemaphore);
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	40 e0       	ldi	r20, 0x00	; 0
     7da:	50 e0       	ldi	r21, 0x00	; 0
     7dc:	60 e0       	ldi	r22, 0x00	; 0
     7de:	70 e0       	ldi	r23, 0x00	; 0
     7e0:	80 91 6b 07 	lds	r24, 0x076B	; 0x80076b <LCDSemaphore>
     7e4:	90 91 6c 07 	lds	r25, 0x076C	; 0x80076c <LCDSemaphore+0x1>
     7e8:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <xQueueGenericSend>
			xEventGroupClearBits(CheckPasswordEventHandle, 0x3F);
     7ec:	6f e3       	ldi	r22, 0x3F	; 63
     7ee:	70 e0       	ldi	r23, 0x00	; 0
     7f0:	80 91 77 07 	lds	r24, 0x0777	; 0x800777 <CheckPasswordEventHandle>
     7f4:	90 91 78 07 	lds	r25, 0x0778	; 0x800778 <CheckPasswordEventHandle+0x1>
     7f8:	0e 94 ba 07 	call	0xf74	; 0xf74 <xEventGroupClearBits>

			vTaskDelay(1000);
     7fc:	88 ee       	ldi	r24, 0xE8	; 232
     7fe:	93 e0       	ldi	r25, 0x03	; 3
     800:	0e 94 95 13 	call	0x272a	; 0x272a <vTaskDelay>
			vTaskResume(getEquationHandle);
     804:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <getEquationHandle>
     808:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <getEquationHandle+0x1>
     80c:	0e 94 0e 11 	call	0x221c	; 0x221c <vTaskResume>
     810:	2b c0       	rjmp	.+86     	; 0x868 <__stack+0x9>
			flag = 0;
		}
		else
		{
			/* wrong password message */
			xSemaphoreTake(LCDSemaphore, 10);
     812:	6a e0       	ldi	r22, 0x0A	; 10
     814:	70 e0       	ldi	r23, 0x00	; 0
     816:	80 91 6b 07 	lds	r24, 0x076B	; 0x80076b <LCDSemaphore>
     81a:	90 91 6c 07 	lds	r25, 0x076C	; 0x80076c <LCDSemaphore+0x1>
     81e:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <xQueueSemaphoreTake>
			LCD_ClearDisplay();
     822:	0e 94 0d 02 	call	0x41a	; 0x41a <LCD_ClearDisplay>
			LCD_WriteString("Wrong Password :");
     826:	8f ec       	ldi	r24, 0xCF	; 207
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	0e 94 3c 02 	call	0x478	; 0x478 <LCD_WriteString>
			xSemaphoreGive(LCDSemaphore);
     82e:	20 e0       	ldi	r18, 0x00	; 0
     830:	40 e0       	ldi	r20, 0x00	; 0
     832:	50 e0       	ldi	r21, 0x00	; 0
     834:	60 e0       	ldi	r22, 0x00	; 0
     836:	70 e0       	ldi	r23, 0x00	; 0
     838:	80 91 6b 07 	lds	r24, 0x076B	; 0x80076b <LCDSemaphore>
     83c:	90 91 6c 07 	lds	r25, 0x076C	; 0x80076c <LCDSemaphore+0x1>
     840:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <xQueueGenericSend>

			xEventGroupClearBits(CheckPasswordEventHandle, 0x3F);
     844:	6f e3       	ldi	r22, 0x3F	; 63
     846:	70 e0       	ldi	r23, 0x00	; 0
     848:	80 91 77 07 	lds	r24, 0x0777	; 0x800777 <CheckPasswordEventHandle>
     84c:	90 91 78 07 	lds	r25, 0x0778	; 0x800778 <CheckPasswordEventHandle+0x1>
     850:	0e 94 ba 07 	call	0xf74	; 0xf74 <xEventGroupClearBits>

			vTaskDelay(1000);
     854:	88 ee       	ldi	r24, 0xE8	; 232
     856:	93 e0       	ldi	r25, 0x03	; 3
     858:	0e 94 95 13 	call	0x272a	; 0x272a <vTaskDelay>

			vTaskResume(getPasswordHandle);
     85c:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <getPasswordHandle>
     860:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <getPasswordHandle+0x1>
     864:	0e 94 0e 11 	call	0x221c	; 0x221c <vTaskResume>
		}
		vTaskSuspend(CheckPasswordHandle);
     868:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <CheckPasswordHandle>
     86c:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <CheckPasswordHandle+0x1>
     870:	0e 94 ff 13 	call	0x27fe	; 0x27fe <vTaskSuspend>

		vTaskDelay(1000);
     874:	88 ee       	ldi	r24, 0xE8	; 232
     876:	93 e0       	ldi	r25, 0x03	; 3
     878:	0e 94 95 13 	call	0x272a	; 0x272a <vTaskDelay>
	}
     87c:	5e cf       	rjmp	.-324    	; 0x73a <checkPassword+0xa>

0000087e <main>:
}

int main()
{

	LCD_Init();
     87e:	0e 94 da 01 	call	0x3b4	; 0x3b4 <LCD_Init>
	KeyPad_init();
     882:	0e 94 49 00 	call	0x92	; 0x92 <KeyPad_init>

	/* Create the task, storing the handle. */
	CheckPasswordReturned = xTaskCreate(
     886:	0f 2e       	mov	r0, r31
     888:	ff e1       	ldi	r31, 0x1F	; 31
     88a:	ef 2e       	mov	r14, r31
     88c:	f1 e0       	ldi	r31, 0x01	; 1
     88e:	ff 2e       	mov	r15, r31
     890:	f0 2d       	mov	r31, r0
     892:	02 e0       	ldi	r16, 0x02	; 2
     894:	21 e0       	ldi	r18, 0x01	; 1
     896:	30 e0       	ldi	r19, 0x00	; 0
     898:	44 e6       	ldi	r20, 0x64	; 100
     89a:	50 e0       	ldi	r21, 0x00	; 0
     89c:	60 ee       	ldi	r22, 0xE0	; 224
     89e:	70 e0       	ldi	r23, 0x00	; 0
     8a0:	88 e9       	ldi	r24, 0x98	; 152
     8a2:	93 e0       	ldi	r25, 0x03	; 3
     8a4:	0e 94 b5 10 	call	0x216a	; 0x216a <xTaskCreate>
     8a8:	80 93 74 07 	sts	0x0774, r24	; 0x800774 <CheckPasswordReturned>
		(void *)1,			   /* Parameter passed into the task. */
		2,					   /* Priority at which the task is created. */
		&CheckPasswordHandle); /* Used to pass out the created task's handle. */

	/* Create the task, storing the handle. */
	getPasswordReturned = xTaskCreate(
     8ac:	0f 2e       	mov	r0, r31
     8ae:	fd e1       	ldi	r31, 0x1D	; 29
     8b0:	ef 2e       	mov	r14, r31
     8b2:	f1 e0       	ldi	r31, 0x01	; 1
     8b4:	ff 2e       	mov	r15, r31
     8b6:	f0 2d       	mov	r31, r0
     8b8:	21 e0       	ldi	r18, 0x01	; 1
     8ba:	30 e0       	ldi	r19, 0x00	; 0
     8bc:	44 e6       	ldi	r20, 0x64	; 100
     8be:	50 e0       	ldi	r21, 0x00	; 0
     8c0:	6e ee       	ldi	r22, 0xEE	; 238
     8c2:	70 e0       	ldi	r23, 0x00	; 0
     8c4:	8f e4       	ldi	r24, 0x4F	; 79
     8c6:	92 e0       	ldi	r25, 0x02	; 2
     8c8:	0e 94 b5 10 	call	0x216a	; 0x216a <xTaskCreate>
     8cc:	80 93 6f 07 	sts	0x076F, r24	; 0x80076f <getPasswordReturned>
		(void *)1,			 /* Parameter passed into the task. */
		2,					 /* Priority at which the task is created. */
		&getPasswordHandle); /* Used to pass out the created task's handle. */

	/* Create the task, storing the handle. */
	getEquationReturned = xTaskCreate(
     8d0:	0f 2e       	mov	r0, r31
     8d2:	fb e1       	ldi	r31, 0x1B	; 27
     8d4:	ef 2e       	mov	r14, r31
     8d6:	f1 e0       	ldi	r31, 0x01	; 1
     8d8:	ff 2e       	mov	r15, r31
     8da:	f0 2d       	mov	r31, r0
     8dc:	01 e0       	ldi	r16, 0x01	; 1
     8de:	21 e0       	ldi	r18, 0x01	; 1
     8e0:	30 e0       	ldi	r19, 0x00	; 0
     8e2:	44 e6       	ldi	r20, 0x64	; 100
     8e4:	50 e0       	ldi	r21, 0x00	; 0
     8e6:	6a ef       	ldi	r22, 0xFA	; 250
     8e8:	70 e0       	ldi	r23, 0x00	; 0
     8ea:	8e ec       	ldi	r24, 0xCE	; 206
     8ec:	92 e0       	ldi	r25, 0x02	; 2
     8ee:	0e 94 b5 10 	call	0x216a	; 0x216a <xTaskCreate>
     8f2:	80 93 6e 07 	sts	0x076E, r24	; 0x80076e <getEquationReturned>
		(void *)1,			 /* Parameter passed into the task. */
		1,					 /* Priority at which the task is created. */
		&getEquationHandle); /* Used to pass out the created task's handle. */

	/* Create the task, storing the handle. */
	calEquationReturned = xTaskCreate(
     8f6:	0f 2e       	mov	r0, r31
     8f8:	f9 e1       	ldi	r31, 0x19	; 25
     8fa:	ef 2e       	mov	r14, r31
     8fc:	f1 e0       	ldi	r31, 0x01	; 1
     8fe:	ff 2e       	mov	r15, r31
     900:	f0 2d       	mov	r31, r0
     902:	21 e0       	ldi	r18, 0x01	; 1
     904:	30 e0       	ldi	r19, 0x00	; 0
     906:	44 e6       	ldi	r20, 0x64	; 100
     908:	50 e0       	ldi	r21, 0x00	; 0
     90a:	67 e0       	ldi	r22, 0x07	; 7
     90c:	71 e0       	ldi	r23, 0x01	; 1
     90e:	8b e2       	ldi	r24, 0x2B	; 43
     910:	93 e0       	ldi	r25, 0x03	; 3
     912:	0e 94 b5 10 	call	0x216a	; 0x216a <xTaskCreate>
     916:	80 93 6d 07 	sts	0x076D, r24	; 0x80076d <calEquationReturned>
		(void *)1,			 /* Parameter passed into the task. */
		1,					 /* Priority at which the task is created. */
		&calEquationHandle); /* Used to pass out the created task's handle. */

	/* creat Queue*/
	passwordQ = xQueueCreate(6, 1);
     91a:	40 e0       	ldi	r20, 0x00	; 0
     91c:	61 e0       	ldi	r22, 0x01	; 1
     91e:	86 e0       	ldi	r24, 0x06	; 6
     920:	0e 94 9b 0c 	call	0x1936	; 0x1936 <xQueueGenericCreate>
     924:	90 93 73 07 	sts	0x0773, r25	; 0x800773 <passwordQ+0x1>
     928:	80 93 72 07 	sts	0x0772, r24	; 0x800772 <passwordQ>
	equationQ = xQueueCreate(4, 1);
     92c:	40 e0       	ldi	r20, 0x00	; 0
     92e:	61 e0       	ldi	r22, 0x01	; 1
     930:	84 e0       	ldi	r24, 0x04	; 4
     932:	0e 94 9b 0c 	call	0x1936	; 0x1936 <xQueueGenericCreate>
     936:	90 93 76 07 	sts	0x0776, r25	; 0x800776 <equationQ+0x1>
     93a:	80 93 75 07 	sts	0x0775, r24	; 0x800775 <equationQ>

	/*Create semphores*/
	keypadSemaphore = xSemaphoreCreateBinary();
     93e:	43 e0       	ldi	r20, 0x03	; 3
     940:	60 e0       	ldi	r22, 0x00	; 0
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	0e 94 9b 0c 	call	0x1936	; 0x1936 <xQueueGenericCreate>
     948:	90 93 71 07 	sts	0x0771, r25	; 0x800771 <keypadSemaphore+0x1>
     94c:	80 93 70 07 	sts	0x0770, r24	; 0x800770 <keypadSemaphore>
	LCDSemaphore = xSemaphoreCreateBinary();
     950:	43 e0       	ldi	r20, 0x03	; 3
     952:	60 e0       	ldi	r22, 0x00	; 0
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	0e 94 9b 0c 	call	0x1936	; 0x1936 <xQueueGenericCreate>
     95a:	90 93 6c 07 	sts	0x076C, r25	; 0x80076c <LCDSemaphore+0x1>
     95e:	80 93 6b 07 	sts	0x076B, r24	; 0x80076b <LCDSemaphore>
	/* Creat event Group */
	CheckPasswordEventHandle = xEventGroupCreate();
     962:	0e 94 a7 07 	call	0xf4e	; 0xf4e <xEventGroupCreate>
     966:	90 93 78 07 	sts	0x0778, r25	; 0x800778 <CheckPasswordEventHandle+0x1>
     96a:	80 93 77 07 	sts	0x0777, r24	; 0x800777 <CheckPasswordEventHandle>

	vTaskStartScheduler();
     96e:	0e 94 74 11 	call	0x22e8	; 0x22e8 <vTaskStartScheduler>
     972:	ff cf       	rjmp	.-2      	; 0x972 <main+0xf4>

00000974 <__vector_16>:
}

/* vector of ADC interrupt */
void __vector_16(void) __attribute__((signal, used));
void __vector_16(void)
{
     974:	1f 92       	push	r1
     976:	0f 92       	push	r0
     978:	0f b6       	in	r0, 0x3f	; 63
     97a:	0f 92       	push	r0
     97c:	11 24       	eor	r1, r1
     97e:	2f 93       	push	r18
     980:	3f 93       	push	r19
     982:	4f 93       	push	r20
     984:	5f 93       	push	r21
     986:	6f 93       	push	r22
     988:	7f 93       	push	r23
     98a:	8f 93       	push	r24
     98c:	9f 93       	push	r25
     98e:	af 93       	push	r26
     990:	bf 93       	push	r27
     992:	ef 93       	push	r30
     994:	ff 93       	push	r31
	if (GP_ADC_Callback != NULL)
     996:	e0 91 79 07 	lds	r30, 0x0779	; 0x800779 <GP_ADC_Callback>
     99a:	f0 91 7a 07 	lds	r31, 0x077A	; 0x80077a <GP_ADC_Callback+0x1>
     99e:	30 97       	sbiw	r30, 0x00	; 0
     9a0:	09 f0       	breq	.+2      	; 0x9a4 <__vector_16+0x30>
	{
		GP_ADC_Callback();
     9a2:	09 95       	icall
	}
}
     9a4:	ff 91       	pop	r31
     9a6:	ef 91       	pop	r30
     9a8:	bf 91       	pop	r27
     9aa:	af 91       	pop	r26
     9ac:	9f 91       	pop	r25
     9ae:	8f 91       	pop	r24
     9b0:	7f 91       	pop	r23
     9b2:	6f 91       	pop	r22
     9b4:	5f 91       	pop	r21
     9b6:	4f 91       	pop	r20
     9b8:	3f 91       	pop	r19
     9ba:	2f 91       	pop	r18
     9bc:	0f 90       	pop	r0
     9be:	0f be       	out	0x3f, r0	; 63
     9c0:	0f 90       	pop	r0
     9c2:	1f 90       	pop	r1
     9c4:	18 95       	reti

000009c6 <dio_vidConfigChannel>:
	case DIO_PORTC:
		FLIP_BIT(PORTC,channel);
		break;

	case DIO_PORTD:
		FLIP_BIT(PORTD,channel);
     9c6:	81 30       	cpi	r24, 0x01	; 1
     9c8:	01 f1       	breq	.+64     	; 0xa0a <dio_vidConfigChannel+0x44>
     9ca:	30 f0       	brcs	.+12     	; 0x9d8 <dio_vidConfigChannel+0x12>
     9cc:	82 30       	cpi	r24, 0x02	; 2
     9ce:	b1 f1       	breq	.+108    	; 0xa3c <dio_vidConfigChannel+0x76>
     9d0:	83 30       	cpi	r24, 0x03	; 3
     9d2:	09 f4       	brne	.+2      	; 0x9d6 <dio_vidConfigChannel+0x10>
     9d4:	4c c0       	rjmp	.+152    	; 0xa6e <dio_vidConfigChannel+0xa8>
     9d6:	08 95       	ret
     9d8:	41 30       	cpi	r20, 0x01	; 1
     9da:	59 f4       	brne	.+22     	; 0x9f2 <dio_vidConfigChannel+0x2c>
     9dc:	2a b3       	in	r18, 0x1a	; 26
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	02 c0       	rjmp	.+4      	; 0x9e8 <dio_vidConfigChannel+0x22>
     9e4:	88 0f       	add	r24, r24
     9e6:	99 1f       	adc	r25, r25
     9e8:	6a 95       	dec	r22
     9ea:	e2 f7       	brpl	.-8      	; 0x9e4 <dio_vidConfigChannel+0x1e>
     9ec:	82 2b       	or	r24, r18
     9ee:	8a bb       	out	0x1a, r24	; 26
     9f0:	08 95       	ret
     9f2:	2a b3       	in	r18, 0x1a	; 26
     9f4:	81 e0       	ldi	r24, 0x01	; 1
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	02 c0       	rjmp	.+4      	; 0x9fe <dio_vidConfigChannel+0x38>
     9fa:	88 0f       	add	r24, r24
     9fc:	99 1f       	adc	r25, r25
     9fe:	6a 95       	dec	r22
     a00:	e2 f7       	brpl	.-8      	; 0x9fa <dio_vidConfigChannel+0x34>
     a02:	80 95       	com	r24
     a04:	82 23       	and	r24, r18
     a06:	8a bb       	out	0x1a, r24	; 26
     a08:	08 95       	ret
     a0a:	41 30       	cpi	r20, 0x01	; 1
     a0c:	59 f4       	brne	.+22     	; 0xa24 <dio_vidConfigChannel+0x5e>
     a0e:	27 b3       	in	r18, 0x17	; 23
     a10:	81 e0       	ldi	r24, 0x01	; 1
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	02 c0       	rjmp	.+4      	; 0xa1a <dio_vidConfigChannel+0x54>
     a16:	88 0f       	add	r24, r24
     a18:	99 1f       	adc	r25, r25
     a1a:	6a 95       	dec	r22
     a1c:	e2 f7       	brpl	.-8      	; 0xa16 <dio_vidConfigChannel+0x50>
     a1e:	82 2b       	or	r24, r18
     a20:	87 bb       	out	0x17, r24	; 23
     a22:	08 95       	ret
     a24:	27 b3       	in	r18, 0x17	; 23
     a26:	81 e0       	ldi	r24, 0x01	; 1
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	02 c0       	rjmp	.+4      	; 0xa30 <dio_vidConfigChannel+0x6a>
     a2c:	88 0f       	add	r24, r24
     a2e:	99 1f       	adc	r25, r25
     a30:	6a 95       	dec	r22
     a32:	e2 f7       	brpl	.-8      	; 0xa2c <dio_vidConfigChannel+0x66>
     a34:	80 95       	com	r24
     a36:	82 23       	and	r24, r18
     a38:	87 bb       	out	0x17, r24	; 23
     a3a:	08 95       	ret
     a3c:	41 30       	cpi	r20, 0x01	; 1
     a3e:	59 f4       	brne	.+22     	; 0xa56 <dio_vidConfigChannel+0x90>
     a40:	24 b3       	in	r18, 0x14	; 20
     a42:	81 e0       	ldi	r24, 0x01	; 1
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	02 c0       	rjmp	.+4      	; 0xa4c <dio_vidConfigChannel+0x86>
     a48:	88 0f       	add	r24, r24
     a4a:	99 1f       	adc	r25, r25
     a4c:	6a 95       	dec	r22
     a4e:	e2 f7       	brpl	.-8      	; 0xa48 <dio_vidConfigChannel+0x82>
     a50:	82 2b       	or	r24, r18
     a52:	84 bb       	out	0x14, r24	; 20
     a54:	08 95       	ret
     a56:	24 b3       	in	r18, 0x14	; 20
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	02 c0       	rjmp	.+4      	; 0xa62 <dio_vidConfigChannel+0x9c>
     a5e:	88 0f       	add	r24, r24
     a60:	99 1f       	adc	r25, r25
     a62:	6a 95       	dec	r22
     a64:	e2 f7       	brpl	.-8      	; 0xa5e <dio_vidConfigChannel+0x98>
     a66:	80 95       	com	r24
     a68:	82 23       	and	r24, r18
     a6a:	84 bb       	out	0x14, r24	; 20
     a6c:	08 95       	ret
     a6e:	41 30       	cpi	r20, 0x01	; 1
     a70:	59 f4       	brne	.+22     	; 0xa88 <dio_vidConfigChannel+0xc2>
     a72:	21 b3       	in	r18, 0x11	; 17
     a74:	81 e0       	ldi	r24, 0x01	; 1
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	02 c0       	rjmp	.+4      	; 0xa7e <dio_vidConfigChannel+0xb8>
     a7a:	88 0f       	add	r24, r24
     a7c:	99 1f       	adc	r25, r25
     a7e:	6a 95       	dec	r22
     a80:	e2 f7       	brpl	.-8      	; 0xa7a <dio_vidConfigChannel+0xb4>
     a82:	82 2b       	or	r24, r18
     a84:	81 bb       	out	0x11, r24	; 17
     a86:	08 95       	ret
     a88:	21 b3       	in	r18, 0x11	; 17
     a8a:	81 e0       	ldi	r24, 0x01	; 1
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	02 c0       	rjmp	.+4      	; 0xa94 <dio_vidConfigChannel+0xce>
     a90:	88 0f       	add	r24, r24
     a92:	99 1f       	adc	r25, r25
     a94:	6a 95       	dec	r22
     a96:	e2 f7       	brpl	.-8      	; 0xa90 <dio_vidConfigChannel+0xca>
     a98:	80 95       	com	r24
     a9a:	82 23       	and	r24, r18
     a9c:	81 bb       	out	0x11, r24	; 17
     a9e:	08 95       	ret

00000aa0 <dio_vidWriteChannel>:
     aa0:	81 30       	cpi	r24, 0x01	; 1
     aa2:	01 f1       	breq	.+64     	; 0xae4 <dio_vidWriteChannel+0x44>
     aa4:	30 f0       	brcs	.+12     	; 0xab2 <dio_vidWriteChannel+0x12>
     aa6:	82 30       	cpi	r24, 0x02	; 2
     aa8:	b1 f1       	breq	.+108    	; 0xb16 <dio_vidWriteChannel+0x76>
     aaa:	83 30       	cpi	r24, 0x03	; 3
     aac:	09 f4       	brne	.+2      	; 0xab0 <dio_vidWriteChannel+0x10>
     aae:	4c c0       	rjmp	.+152    	; 0xb48 <dio_vidWriteChannel+0xa8>
     ab0:	08 95       	ret
     ab2:	41 11       	cpse	r20, r1
     ab4:	0c c0       	rjmp	.+24     	; 0xace <dio_vidWriteChannel+0x2e>
     ab6:	2b b3       	in	r18, 0x1b	; 27
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	02 c0       	rjmp	.+4      	; 0xac2 <dio_vidWriteChannel+0x22>
     abe:	88 0f       	add	r24, r24
     ac0:	99 1f       	adc	r25, r25
     ac2:	6a 95       	dec	r22
     ac4:	e2 f7       	brpl	.-8      	; 0xabe <dio_vidWriteChannel+0x1e>
     ac6:	80 95       	com	r24
     ac8:	82 23       	and	r24, r18
     aca:	8b bb       	out	0x1b, r24	; 27
     acc:	08 95       	ret
     ace:	2b b3       	in	r18, 0x1b	; 27
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	02 c0       	rjmp	.+4      	; 0xada <dio_vidWriteChannel+0x3a>
     ad6:	88 0f       	add	r24, r24
     ad8:	99 1f       	adc	r25, r25
     ada:	6a 95       	dec	r22
     adc:	e2 f7       	brpl	.-8      	; 0xad6 <dio_vidWriteChannel+0x36>
     ade:	82 2b       	or	r24, r18
     ae0:	8b bb       	out	0x1b, r24	; 27
     ae2:	08 95       	ret
     ae4:	41 11       	cpse	r20, r1
     ae6:	0c c0       	rjmp	.+24     	; 0xb00 <dio_vidWriteChannel+0x60>
     ae8:	28 b3       	in	r18, 0x18	; 24
     aea:	81 e0       	ldi	r24, 0x01	; 1
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	02 c0       	rjmp	.+4      	; 0xaf4 <dio_vidWriteChannel+0x54>
     af0:	88 0f       	add	r24, r24
     af2:	99 1f       	adc	r25, r25
     af4:	6a 95       	dec	r22
     af6:	e2 f7       	brpl	.-8      	; 0xaf0 <dio_vidWriteChannel+0x50>
     af8:	80 95       	com	r24
     afa:	82 23       	and	r24, r18
     afc:	88 bb       	out	0x18, r24	; 24
     afe:	08 95       	ret
     b00:	28 b3       	in	r18, 0x18	; 24
     b02:	81 e0       	ldi	r24, 0x01	; 1
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	02 c0       	rjmp	.+4      	; 0xb0c <dio_vidWriteChannel+0x6c>
     b08:	88 0f       	add	r24, r24
     b0a:	99 1f       	adc	r25, r25
     b0c:	6a 95       	dec	r22
     b0e:	e2 f7       	brpl	.-8      	; 0xb08 <dio_vidWriteChannel+0x68>
     b10:	82 2b       	or	r24, r18
     b12:	88 bb       	out	0x18, r24	; 24
     b14:	08 95       	ret
     b16:	41 11       	cpse	r20, r1
     b18:	0c c0       	rjmp	.+24     	; 0xb32 <dio_vidWriteChannel+0x92>
     b1a:	25 b3       	in	r18, 0x15	; 21
     b1c:	81 e0       	ldi	r24, 0x01	; 1
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	02 c0       	rjmp	.+4      	; 0xb26 <dio_vidWriteChannel+0x86>
     b22:	88 0f       	add	r24, r24
     b24:	99 1f       	adc	r25, r25
     b26:	6a 95       	dec	r22
     b28:	e2 f7       	brpl	.-8      	; 0xb22 <dio_vidWriteChannel+0x82>
     b2a:	80 95       	com	r24
     b2c:	82 23       	and	r24, r18
     b2e:	85 bb       	out	0x15, r24	; 21
     b30:	08 95       	ret
     b32:	25 b3       	in	r18, 0x15	; 21
     b34:	81 e0       	ldi	r24, 0x01	; 1
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	02 c0       	rjmp	.+4      	; 0xb3e <dio_vidWriteChannel+0x9e>
     b3a:	88 0f       	add	r24, r24
     b3c:	99 1f       	adc	r25, r25
     b3e:	6a 95       	dec	r22
     b40:	e2 f7       	brpl	.-8      	; 0xb3a <dio_vidWriteChannel+0x9a>
     b42:	82 2b       	or	r24, r18
     b44:	85 bb       	out	0x15, r24	; 21
     b46:	08 95       	ret
     b48:	41 11       	cpse	r20, r1
     b4a:	0c c0       	rjmp	.+24     	; 0xb64 <dio_vidWriteChannel+0xc4>
     b4c:	22 b3       	in	r18, 0x12	; 18
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	02 c0       	rjmp	.+4      	; 0xb58 <dio_vidWriteChannel+0xb8>
     b54:	88 0f       	add	r24, r24
     b56:	99 1f       	adc	r25, r25
     b58:	6a 95       	dec	r22
     b5a:	e2 f7       	brpl	.-8      	; 0xb54 <dio_vidWriteChannel+0xb4>
     b5c:	80 95       	com	r24
     b5e:	82 23       	and	r24, r18
     b60:	82 bb       	out	0x12, r24	; 18
     b62:	08 95       	ret
     b64:	22 b3       	in	r18, 0x12	; 18
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	02 c0       	rjmp	.+4      	; 0xb70 <dio_vidWriteChannel+0xd0>
     b6c:	88 0f       	add	r24, r24
     b6e:	99 1f       	adc	r25, r25
     b70:	6a 95       	dec	r22
     b72:	e2 f7       	brpl	.-8      	; 0xb6c <dio_vidWriteChannel+0xcc>
     b74:	82 2b       	or	r24, r18
     b76:	82 bb       	out	0x12, r24	; 18
     b78:	08 95       	ret

00000b7a <dio_dioLevelReadChannel>:
* \Return value:   : loc_pinRead   -> IO channel level                           
*******************************************************************************/
dio_level_t dio_dioLevelReadChannel(dio_portId_t port, dio_channelId_t channel)
{
	dio_level_t loc_pinRead = STD_LOW;
	switch (port)
     b7a:	81 30       	cpi	r24, 0x01	; 1
     b7c:	79 f0       	breq	.+30     	; 0xb9c <dio_dioLevelReadChannel+0x22>
     b7e:	28 f0       	brcs	.+10     	; 0xb8a <dio_dioLevelReadChannel+0x10>
     b80:	82 30       	cpi	r24, 0x02	; 2
     b82:	a9 f0       	breq	.+42     	; 0xbae <dio_dioLevelReadChannel+0x34>
     b84:	83 30       	cpi	r24, 0x03	; 3
     b86:	e9 f0       	breq	.+58     	; 0xbc2 <dio_dioLevelReadChannel+0x48>
     b88:	25 c0       	rjmp	.+74     	; 0xbd4 <dio_dioLevelReadChannel+0x5a>
	{
	 case DIO_PORTA:
		loc_pinRead = CHECK_BIT(PINA, channel);
     b8a:	89 b3       	in	r24, 0x19	; 25
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	02 c0       	rjmp	.+4      	; 0xb94 <dio_dioLevelReadChannel+0x1a>
     b90:	95 95       	asr	r25
     b92:	87 95       	ror	r24
     b94:	6a 95       	dec	r22
     b96:	e2 f7       	brpl	.-8      	; 0xb90 <dio_dioLevelReadChannel+0x16>
     b98:	81 70       	andi	r24, 0x01	; 1
		break;
     b9a:	08 95       	ret

	 case DIO_PORTB:
		loc_pinRead = CHECK_BIT(PINB, channel);
     b9c:	86 b3       	in	r24, 0x16	; 22
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	02 c0       	rjmp	.+4      	; 0xba6 <dio_dioLevelReadChannel+0x2c>
     ba2:	95 95       	asr	r25
     ba4:	87 95       	ror	r24
     ba6:	6a 95       	dec	r22
     ba8:	e2 f7       	brpl	.-8      	; 0xba2 <dio_dioLevelReadChannel+0x28>
     baa:	81 70       	andi	r24, 0x01	; 1
		break;
     bac:	08 95       	ret

	 case DIO_PORTC:
		loc_pinRead = CHECK_BIT(PINC, channel);
     bae:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <ucHeap+0x264>
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	02 c0       	rjmp	.+4      	; 0xbba <dio_dioLevelReadChannel+0x40>
     bb6:	95 95       	asr	r25
     bb8:	87 95       	ror	r24
     bba:	6a 95       	dec	r22
     bbc:	e2 f7       	brpl	.-8      	; 0xbb6 <dio_dioLevelReadChannel+0x3c>
     bbe:	81 70       	andi	r24, 0x01	; 1
		break;
     bc0:	08 95       	ret

	 case DIO_PORTD:
		loc_pinRead = CHECK_BIT(PIND, channel);
     bc2:	80 b3       	in	r24, 0x10	; 16
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	02 c0       	rjmp	.+4      	; 0xbcc <dio_dioLevelReadChannel+0x52>
     bc8:	95 95       	asr	r25
     bca:	87 95       	ror	r24
     bcc:	6a 95       	dec	r22
     bce:	e2 f7       	brpl	.-8      	; 0xbc8 <dio_dioLevelReadChannel+0x4e>
     bd0:	81 70       	andi	r24, 0x01	; 1
		break;
     bd2:	08 95       	ret
					 channel  -> MC channel ID
* \Return value:   : loc_pinRead   -> IO channel level                           
*******************************************************************************/
dio_level_t dio_dioLevelReadChannel(dio_portId_t port, dio_channelId_t channel)
{
	dio_level_t loc_pinRead = STD_LOW;
     bd4:	80 e0       	ldi	r24, 0x00	; 0
	 case DIO_PORTD:
		loc_pinRead = CHECK_BIT(PIND, channel);
		break;
    }
	return loc_pinRead;
}
     bd6:	08 95       	ret

00000bd8 <__vector_1>:
void __vector_1(void) __attribute__((signal, used));
void __vector_2(void) __attribute__((signal, used));
void __vector_3(void) __attribute__((signal, used));

void __vector_1(void)
{
     bd8:	1f 92       	push	r1
     bda:	0f 92       	push	r0
     bdc:	0f b6       	in	r0, 0x3f	; 63
     bde:	0f 92       	push	r0
     be0:	11 24       	eor	r1, r1
     be2:	2f 93       	push	r18
     be4:	3f 93       	push	r19
     be6:	4f 93       	push	r20
     be8:	5f 93       	push	r21
     bea:	6f 93       	push	r22
     bec:	7f 93       	push	r23
     bee:	8f 93       	push	r24
     bf0:	9f 93       	push	r25
     bf2:	af 93       	push	r26
     bf4:	bf 93       	push	r27
     bf6:	ef 93       	push	r30
     bf8:	ff 93       	push	r31
	EXTI0_callback();
     bfa:	e0 91 7f 07 	lds	r30, 0x077F	; 0x80077f <EXTI0_callback>
     bfe:	f0 91 80 07 	lds	r31, 0x0780	; 0x800780 <EXTI0_callback+0x1>
     c02:	09 95       	icall
}
     c04:	ff 91       	pop	r31
     c06:	ef 91       	pop	r30
     c08:	bf 91       	pop	r27
     c0a:	af 91       	pop	r26
     c0c:	9f 91       	pop	r25
     c0e:	8f 91       	pop	r24
     c10:	7f 91       	pop	r23
     c12:	6f 91       	pop	r22
     c14:	5f 91       	pop	r21
     c16:	4f 91       	pop	r20
     c18:	3f 91       	pop	r19
     c1a:	2f 91       	pop	r18
     c1c:	0f 90       	pop	r0
     c1e:	0f be       	out	0x3f, r0	; 63
     c20:	0f 90       	pop	r0
     c22:	1f 90       	pop	r1
     c24:	18 95       	reti

00000c26 <__vector_2>:

void __vector_2(void)
{
     c26:	1f 92       	push	r1
     c28:	0f 92       	push	r0
     c2a:	0f b6       	in	r0, 0x3f	; 63
     c2c:	0f 92       	push	r0
     c2e:	11 24       	eor	r1, r1
     c30:	2f 93       	push	r18
     c32:	3f 93       	push	r19
     c34:	4f 93       	push	r20
     c36:	5f 93       	push	r21
     c38:	6f 93       	push	r22
     c3a:	7f 93       	push	r23
     c3c:	8f 93       	push	r24
     c3e:	9f 93       	push	r25
     c40:	af 93       	push	r26
     c42:	bf 93       	push	r27
     c44:	ef 93       	push	r30
     c46:	ff 93       	push	r31
	EXTI1_callback();
     c48:	e0 91 7b 07 	lds	r30, 0x077B	; 0x80077b <EXTI1_callback>
     c4c:	f0 91 7c 07 	lds	r31, 0x077C	; 0x80077c <EXTI1_callback+0x1>
     c50:	09 95       	icall
}
     c52:	ff 91       	pop	r31
     c54:	ef 91       	pop	r30
     c56:	bf 91       	pop	r27
     c58:	af 91       	pop	r26
     c5a:	9f 91       	pop	r25
     c5c:	8f 91       	pop	r24
     c5e:	7f 91       	pop	r23
     c60:	6f 91       	pop	r22
     c62:	5f 91       	pop	r21
     c64:	4f 91       	pop	r20
     c66:	3f 91       	pop	r19
     c68:	2f 91       	pop	r18
     c6a:	0f 90       	pop	r0
     c6c:	0f be       	out	0x3f, r0	; 63
     c6e:	0f 90       	pop	r0
     c70:	1f 90       	pop	r1
     c72:	18 95       	reti

00000c74 <__vector_3>:

void __vector_3(void)
{
     c74:	1f 92       	push	r1
     c76:	0f 92       	push	r0
     c78:	0f b6       	in	r0, 0x3f	; 63
     c7a:	0f 92       	push	r0
     c7c:	11 24       	eor	r1, r1
     c7e:	2f 93       	push	r18
     c80:	3f 93       	push	r19
     c82:	4f 93       	push	r20
     c84:	5f 93       	push	r21
     c86:	6f 93       	push	r22
     c88:	7f 93       	push	r23
     c8a:	8f 93       	push	r24
     c8c:	9f 93       	push	r25
     c8e:	af 93       	push	r26
     c90:	bf 93       	push	r27
     c92:	ef 93       	push	r30
     c94:	ff 93       	push	r31
	EXTI2_callback();
     c96:	e0 91 7d 07 	lds	r30, 0x077D	; 0x80077d <EXTI2_callback>
     c9a:	f0 91 7e 07 	lds	r31, 0x077E	; 0x80077e <EXTI2_callback+0x1>
     c9e:	09 95       	icall
     ca0:	ff 91       	pop	r31
     ca2:	ef 91       	pop	r30
     ca4:	bf 91       	pop	r27
     ca6:	af 91       	pop	r26
     ca8:	9f 91       	pop	r25
     caa:	8f 91       	pop	r24
     cac:	7f 91       	pop	r23
     cae:	6f 91       	pop	r22
     cb0:	5f 91       	pop	r21
     cb2:	4f 91       	pop	r20
     cb4:	3f 91       	pop	r19
     cb6:	2f 91       	pop	r18
     cb8:	0f 90       	pop	r0
     cba:	0f be       	out	0x3f, r0	; 63
     cbc:	0f 90       	pop	r0
     cbe:	1f 90       	pop	r1
     cc0:	18 95       	reti

00000cc2 <__vector_12>:


/* SPI Transmission/reception complete ISR */
void __vector_12 (void) __attribute__((signal));
void __vector_12 (void)
{
     cc2:	1f 92       	push	r1
     cc4:	0f 92       	push	r0
     cc6:	0f b6       	in	r0, 0x3f	; 63
     cc8:	0f 92       	push	r0
     cca:	11 24       	eor	r1, r1
     ccc:	2f 93       	push	r18
     cce:	3f 93       	push	r19
     cd0:	4f 93       	push	r20
     cd2:	5f 93       	push	r21
     cd4:	6f 93       	push	r22
     cd6:	7f 93       	push	r23
     cd8:	8f 93       	push	r24
     cda:	9f 93       	push	r25
     cdc:	af 93       	push	r26
     cde:	bf 93       	push	r27
     ce0:	ef 93       	push	r30
     ce2:	ff 93       	push	r31
	

	/* call back function */
	GP_SPI_CallBack();
     ce4:	e0 91 69 07 	lds	r30, 0x0769	; 0x800769 <GP_SPI_CallBack>
     ce8:	f0 91 6a 07 	lds	r31, 0x076A	; 0x80076a <GP_SPI_CallBack+0x1>
     cec:	09 95       	icall
}
     cee:	ff 91       	pop	r31
     cf0:	ef 91       	pop	r30
     cf2:	bf 91       	pop	r27
     cf4:	af 91       	pop	r26
     cf6:	9f 91       	pop	r25
     cf8:	8f 91       	pop	r24
     cfa:	7f 91       	pop	r23
     cfc:	6f 91       	pop	r22
     cfe:	5f 91       	pop	r21
     d00:	4f 91       	pop	r20
     d02:	3f 91       	pop	r19
     d04:	2f 91       	pop	r18
     d06:	0f 90       	pop	r0
     d08:	0f be       	out	0x3f, r0	; 63
     d0a:	0f 90       	pop	r0
     d0c:	1f 90       	pop	r1
     d0e:	18 95       	reti

00000d10 <__vector_10>:

    /* Set mode of OC0 pin mode
       COM01 bit5   COM00 bit4  in RCCR0
     */
    TCCR0 &= ~(0x30);
    TCCR0 |= ((MODE << 4) & 0x30);
     d10:	1f 92       	push	r1
     d12:	0f 92       	push	r0
     d14:	0f b6       	in	r0, 0x3f	; 63
     d16:	0f 92       	push	r0
     d18:	11 24       	eor	r1, r1
     d1a:	2f 93       	push	r18
     d1c:	3f 93       	push	r19
     d1e:	4f 93       	push	r20
     d20:	5f 93       	push	r21
     d22:	6f 93       	push	r22
     d24:	7f 93       	push	r23
     d26:	8f 93       	push	r24
     d28:	9f 93       	push	r25
     d2a:	af 93       	push	r26
     d2c:	bf 93       	push	r27
     d2e:	ef 93       	push	r30
     d30:	ff 93       	push	r31
     d32:	e0 91 81 07 	lds	r30, 0x0781	; 0x800781 <T0_OC_CallBackFun>
     d36:	f0 91 82 07 	lds	r31, 0x0782	; 0x800782 <T0_OC_CallBackFun+0x1>
     d3a:	30 97       	sbiw	r30, 0x00	; 0
     d3c:	09 f0       	breq	.+2      	; 0xd40 <__vector_10+0x30>
     d3e:	09 95       	icall
     d40:	ff 91       	pop	r31
     d42:	ef 91       	pop	r30
     d44:	bf 91       	pop	r27
     d46:	af 91       	pop	r26
     d48:	9f 91       	pop	r25
     d4a:	8f 91       	pop	r24
     d4c:	7f 91       	pop	r23
     d4e:	6f 91       	pop	r22
     d50:	5f 91       	pop	r21
     d52:	4f 91       	pop	r20
     d54:	3f 91       	pop	r19
     d56:	2f 91       	pop	r18
     d58:	0f 90       	pop	r0
     d5a:	0f be       	out	0x3f, r0	; 63
     d5c:	0f 90       	pop	r0
     d5e:	1f 90       	pop	r1
     d60:	18 95       	reti

00000d62 <__vector_11>:
}
void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
     d62:	1f 92       	push	r1
     d64:	0f 92       	push	r0
     d66:	0f b6       	in	r0, 0x3f	; 63
     d68:	0f 92       	push	r0
     d6a:	11 24       	eor	r1, r1
     d6c:	2f 93       	push	r18
     d6e:	3f 93       	push	r19
     d70:	4f 93       	push	r20
     d72:	5f 93       	push	r21
     d74:	6f 93       	push	r22
     d76:	7f 93       	push	r23
     d78:	8f 93       	push	r24
     d7a:	9f 93       	push	r25
     d7c:	af 93       	push	r26
     d7e:	bf 93       	push	r27
     d80:	ef 93       	push	r30
     d82:	ff 93       	push	r31
    if (T0_OVF_CallBackFun != NULL)
     d84:	e0 91 83 07 	lds	r30, 0x0783	; 0x800783 <T0_OVF_CallBackFun>
     d88:	f0 91 84 07 	lds	r31, 0x0784	; 0x800784 <T0_OVF_CallBackFun+0x1>
     d8c:	30 97       	sbiw	r30, 0x00	; 0
     d8e:	09 f0       	breq	.+2      	; 0xd92 <__vector_11+0x30>
    {
        T0_OVF_CallBackFun();
     d90:	09 95       	icall
    }
}
     d92:	ff 91       	pop	r31
     d94:	ef 91       	pop	r30
     d96:	bf 91       	pop	r27
     d98:	af 91       	pop	r26
     d9a:	9f 91       	pop	r25
     d9c:	8f 91       	pop	r24
     d9e:	7f 91       	pop	r23
     da0:	6f 91       	pop	r22
     da2:	5f 91       	pop	r21
     da4:	4f 91       	pop	r20
     da6:	3f 91       	pop	r19
     da8:	2f 91       	pop	r18
     daa:	0f 90       	pop	r0
     dac:	0f be       	out	0x3f, r0	; 63
     dae:	0f 90       	pop	r0
     db0:	1f 90       	pop	r1
     db2:	18 95       	reti

00000db4 <__vector_4>:
{
    T2_OC_CallBackFun = copyofCB;
}
void __vector_4(void) __attribute__((signal));
void __vector_4(void)
{
     db4:	1f 92       	push	r1
     db6:	0f 92       	push	r0
     db8:	0f b6       	in	r0, 0x3f	; 63
     dba:	0f 92       	push	r0
     dbc:	11 24       	eor	r1, r1
     dbe:	2f 93       	push	r18
     dc0:	3f 93       	push	r19
     dc2:	4f 93       	push	r20
     dc4:	5f 93       	push	r21
     dc6:	6f 93       	push	r22
     dc8:	7f 93       	push	r23
     dca:	8f 93       	push	r24
     dcc:	9f 93       	push	r25
     dce:	af 93       	push	r26
     dd0:	bf 93       	push	r27
     dd2:	ef 93       	push	r30
     dd4:	ff 93       	push	r31
    if (T2_OC_CallBackFun != NULL)
     dd6:	e0 91 87 07 	lds	r30, 0x0787	; 0x800787 <T2_OC_CallBackFun>
     dda:	f0 91 88 07 	lds	r31, 0x0788	; 0x800788 <T2_OC_CallBackFun+0x1>
     dde:	30 97       	sbiw	r30, 0x00	; 0
     de0:	09 f0       	breq	.+2      	; 0xde4 <__vector_4+0x30>
    {
        T2_OC_CallBackFun();
     de2:	09 95       	icall
    }
}
     de4:	ff 91       	pop	r31
     de6:	ef 91       	pop	r30
     de8:	bf 91       	pop	r27
     dea:	af 91       	pop	r26
     dec:	9f 91       	pop	r25
     dee:	8f 91       	pop	r24
     df0:	7f 91       	pop	r23
     df2:	6f 91       	pop	r22
     df4:	5f 91       	pop	r21
     df6:	4f 91       	pop	r20
     df8:	3f 91       	pop	r19
     dfa:	2f 91       	pop	r18
     dfc:	0f 90       	pop	r0
     dfe:	0f be       	out	0x3f, r0	; 63
     e00:	0f 90       	pop	r0
     e02:	1f 90       	pop	r1
     e04:	18 95       	reti

00000e06 <__vector_5>:

void __vector_5(void) __attribute__((signal));
void __vector_5(void)
{
     e06:	1f 92       	push	r1
     e08:	0f 92       	push	r0
     e0a:	0f b6       	in	r0, 0x3f	; 63
     e0c:	0f 92       	push	r0
     e0e:	11 24       	eor	r1, r1
     e10:	2f 93       	push	r18
     e12:	3f 93       	push	r19
     e14:	4f 93       	push	r20
     e16:	5f 93       	push	r21
     e18:	6f 93       	push	r22
     e1a:	7f 93       	push	r23
     e1c:	8f 93       	push	r24
     e1e:	9f 93       	push	r25
     e20:	af 93       	push	r26
     e22:	bf 93       	push	r27
     e24:	ef 93       	push	r30
     e26:	ff 93       	push	r31
    if (T2_OVF_CallBackFun != NULL)
     e28:	e0 91 85 07 	lds	r30, 0x0785	; 0x800785 <T2_OVF_CallBackFun>
     e2c:	f0 91 86 07 	lds	r31, 0x0786	; 0x800786 <T2_OVF_CallBackFun+0x1>
     e30:	30 97       	sbiw	r30, 0x00	; 0
     e32:	09 f0       	breq	.+2      	; 0xe36 <__vector_5+0x30>
    {
        T2_OVF_CallBackFun();
     e34:	09 95       	icall
    }
}
     e36:	ff 91       	pop	r31
     e38:	ef 91       	pop	r30
     e3a:	bf 91       	pop	r27
     e3c:	af 91       	pop	r26
     e3e:	9f 91       	pop	r25
     e40:	8f 91       	pop	r24
     e42:	7f 91       	pop	r23
     e44:	6f 91       	pop	r22
     e46:	5f 91       	pop	r21
     e48:	4f 91       	pop	r20
     e4a:	3f 91       	pop	r19
     e4c:	2f 91       	pop	r18
     e4e:	0f 90       	pop	r0
     e50:	0f be       	out	0x3f, r0	; 63
     e52:	0f 90       	pop	r0
     e54:	1f 90       	pop	r1
     e56:	18 95       	reti

00000e58 <__vector_13>:
14	USART Data Register Empty	USART_UDRE_vect
15	USART Tx Complete			USART_TX_vect */

void __vector_13(void) __attribute__((signal));
void __vector_13(void)
{
     e58:	1f 92       	push	r1
     e5a:	0f 92       	push	r0
     e5c:	0f b6       	in	r0, 0x3f	; 63
     e5e:	0f 92       	push	r0
     e60:	11 24       	eor	r1, r1
     e62:	2f 93       	push	r18
     e64:	3f 93       	push	r19
     e66:	4f 93       	push	r20
     e68:	5f 93       	push	r21
     e6a:	6f 93       	push	r22
     e6c:	7f 93       	push	r23
     e6e:	8f 93       	push	r24
     e70:	9f 93       	push	r25
     e72:	af 93       	push	r26
     e74:	bf 93       	push	r27
     e76:	ef 93       	push	r30
     e78:	ff 93       	push	r31
    if (UART_RXC_CallBack != NULL)
     e7a:	e0 91 8d 07 	lds	r30, 0x078D	; 0x80078d <UART_RXC_CallBack>
     e7e:	f0 91 8e 07 	lds	r31, 0x078E	; 0x80078e <UART_RXC_CallBack+0x1>
     e82:	30 97       	sbiw	r30, 0x00	; 0
     e84:	09 f0       	breq	.+2      	; 0xe88 <__vector_13+0x30>
    {
        UART_RXC_CallBack();
     e86:	09 95       	icall
    }
}
     e88:	ff 91       	pop	r31
     e8a:	ef 91       	pop	r30
     e8c:	bf 91       	pop	r27
     e8e:	af 91       	pop	r26
     e90:	9f 91       	pop	r25
     e92:	8f 91       	pop	r24
     e94:	7f 91       	pop	r23
     e96:	6f 91       	pop	r22
     e98:	5f 91       	pop	r21
     e9a:	4f 91       	pop	r20
     e9c:	3f 91       	pop	r19
     e9e:	2f 91       	pop	r18
     ea0:	0f 90       	pop	r0
     ea2:	0f be       	out	0x3f, r0	; 63
     ea4:	0f 90       	pop	r0
     ea6:	1f 90       	pop	r1
     ea8:	18 95       	reti

00000eaa <__vector_14>:

void __vector_14(void) __attribute__((signal));
void __vector_14(void)
{
     eaa:	1f 92       	push	r1
     eac:	0f 92       	push	r0
     eae:	0f b6       	in	r0, 0x3f	; 63
     eb0:	0f 92       	push	r0
     eb2:	11 24       	eor	r1, r1
     eb4:	2f 93       	push	r18
     eb6:	3f 93       	push	r19
     eb8:	4f 93       	push	r20
     eba:	5f 93       	push	r21
     ebc:	6f 93       	push	r22
     ebe:	7f 93       	push	r23
     ec0:	8f 93       	push	r24
     ec2:	9f 93       	push	r25
     ec4:	af 93       	push	r26
     ec6:	bf 93       	push	r27
     ec8:	ef 93       	push	r30
     eca:	ff 93       	push	r31
    if (UART_UDRE_CallBack != NULL)
     ecc:	e0 91 8b 07 	lds	r30, 0x078B	; 0x80078b <UART_UDRE_CallBack>
     ed0:	f0 91 8c 07 	lds	r31, 0x078C	; 0x80078c <UART_UDRE_CallBack+0x1>
     ed4:	30 97       	sbiw	r30, 0x00	; 0
     ed6:	09 f0       	breq	.+2      	; 0xeda <__vector_14+0x30>
    {
        UART_UDRE_CallBack();
     ed8:	09 95       	icall
    }
}
     eda:	ff 91       	pop	r31
     edc:	ef 91       	pop	r30
     ede:	bf 91       	pop	r27
     ee0:	af 91       	pop	r26
     ee2:	9f 91       	pop	r25
     ee4:	8f 91       	pop	r24
     ee6:	7f 91       	pop	r23
     ee8:	6f 91       	pop	r22
     eea:	5f 91       	pop	r21
     eec:	4f 91       	pop	r20
     eee:	3f 91       	pop	r19
     ef0:	2f 91       	pop	r18
     ef2:	0f 90       	pop	r0
     ef4:	0f be       	out	0x3f, r0	; 63
     ef6:	0f 90       	pop	r0
     ef8:	1f 90       	pop	r1
     efa:	18 95       	reti

00000efc <__vector_15>:

void __vector_15(void) __attribute__((signal));
void __vector_15(void)
{
     efc:	1f 92       	push	r1
     efe:	0f 92       	push	r0
     f00:	0f b6       	in	r0, 0x3f	; 63
     f02:	0f 92       	push	r0
     f04:	11 24       	eor	r1, r1
     f06:	2f 93       	push	r18
     f08:	3f 93       	push	r19
     f0a:	4f 93       	push	r20
     f0c:	5f 93       	push	r21
     f0e:	6f 93       	push	r22
     f10:	7f 93       	push	r23
     f12:	8f 93       	push	r24
     f14:	9f 93       	push	r25
     f16:	af 93       	push	r26
     f18:	bf 93       	push	r27
     f1a:	ef 93       	push	r30
     f1c:	ff 93       	push	r31
    if (UART_TXC_CallBack != NULL)
     f1e:	e0 91 89 07 	lds	r30, 0x0789	; 0x800789 <UART_TXC_CallBack>
     f22:	f0 91 8a 07 	lds	r31, 0x078A	; 0x80078a <UART_TXC_CallBack+0x1>
     f26:	30 97       	sbiw	r30, 0x00	; 0
     f28:	09 f0       	breq	.+2      	; 0xf2c <__vector_15+0x30>
    {
        UART_TXC_CallBack();
     f2a:	09 95       	icall
    }
     f2c:	ff 91       	pop	r31
     f2e:	ef 91       	pop	r30
     f30:	bf 91       	pop	r27
     f32:	af 91       	pop	r26
     f34:	9f 91       	pop	r25
     f36:	8f 91       	pop	r24
     f38:	7f 91       	pop	r23
     f3a:	6f 91       	pop	r22
     f3c:	5f 91       	pop	r21
     f3e:	4f 91       	pop	r20
     f40:	3f 91       	pop	r19
     f42:	2f 91       	pop	r18
     f44:	0f 90       	pop	r0
     f46:	0f be       	out	0x3f, r0	; 63
     f48:	0f 90       	pop	r0
     f4a:	1f 90       	pop	r1
     f4c:	18 95       	reti

00000f4e <xEventGroupCreate>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     f4e:	cf 93       	push	r28
     f50:	df 93       	push	r29
     f52:	8b e0       	ldi	r24, 0x0B	; 11
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	0e 94 9a 08 	call	0x1134	; 0x1134 <pvPortMalloc>
     f5a:	ec 01       	movw	r28, r24
     f5c:	00 97       	sbiw	r24, 0x00	; 0
     f5e:	31 f0       	breq	.+12     	; 0xf6c <xEventGroupCreate+0x1e>
     f60:	fc 01       	movw	r30, r24
     f62:	11 92       	st	Z+, r1
     f64:	11 92       	st	Z+, r1
     f66:	cf 01       	movw	r24, r30
     f68:	0e 94 69 09 	call	0x12d2	; 0x12d2 <vListInitialise>
     f6c:	ce 01       	movw	r24, r28
     f6e:	df 91       	pop	r29
     f70:	cf 91       	pop	r28
     f72:	08 95       	ret

00000f74 <xEventGroupClearBits>:
     f74:	fc 01       	movw	r30, r24
     f76:	0f b6       	in	r0, 0x3f	; 63
     f78:	f8 94       	cli
     f7a:	0f 92       	push	r0
     f7c:	80 81       	ld	r24, Z
     f7e:	91 81       	ldd	r25, Z+1	; 0x01
     f80:	60 95       	com	r22
     f82:	70 95       	com	r23
     f84:	68 23       	and	r22, r24
     f86:	79 23       	and	r23, r25
     f88:	71 83       	std	Z+1, r23	; 0x01
     f8a:	60 83       	st	Z, r22
     f8c:	0f 90       	pop	r0
     f8e:	0f be       	out	0x3f, r0	; 63
     f90:	08 95       	ret

00000f92 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
     f92:	cf 92       	push	r12
     f94:	df 92       	push	r13
     f96:	ef 92       	push	r14
     f98:	ff 92       	push	r15
     f9a:	0f 93       	push	r16
     f9c:	1f 93       	push	r17
     f9e:	cf 93       	push	r28
     fa0:	df 93       	push	r29
     fa2:	7c 01       	movw	r14, r24
     fa4:	8b 01       	movw	r16, r22
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     fa6:	ec 01       	movw	r28, r24
     fa8:	25 96       	adiw	r28, 0x05	; 5
    vTaskSuspendAll();
     faa:	0e 94 a0 11 	call	0x2340	; 0x2340 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     fae:	d7 01       	movw	r26, r14
     fb0:	17 96       	adiw	r26, 0x07	; 7
     fb2:	ed 91       	ld	r30, X+
     fb4:	fc 91       	ld	r31, X
     fb6:	18 97       	sbiw	r26, 0x08	; 8

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     fb8:	8d 91       	ld	r24, X+
     fba:	9c 91       	ld	r25, X
     fbc:	11 97       	sbiw	r26, 0x01	; 1
     fbe:	08 2b       	or	r16, r24
     fc0:	19 2b       	or	r17, r25
     fc2:	0d 93       	st	X+, r16
     fc4:	1c 93       	st	X, r17
{
    ListItem_t * pxListItem;
    ListItem_t * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     fc6:	00 e0       	ldi	r16, 0x00	; 0
     fc8:	10 e0       	ldi	r17, 0x00	; 0

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     fca:	2d c0       	rjmp	.+90     	; 0x1026 <xEventGroupSetBits+0x94>
        {
            pxNext = listGET_NEXT( pxListItem );
     fcc:	c2 80       	ldd	r12, Z+2	; 0x02
     fce:	d3 80       	ldd	r13, Z+3	; 0x03
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     fd0:	80 81       	ld	r24, Z
     fd2:	91 81       	ldd	r25, Z+1	; 0x01
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     fd4:	9c 01       	movw	r18, r24
     fd6:	33 27       	eor	r19, r19

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     fd8:	92 fd       	sbrc	r25, 2
     fda:	09 c0       	rjmp	.+18     	; 0xfee <xEventGroupSetBits+0x5c>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     fdc:	d7 01       	movw	r26, r14
     fde:	4d 91       	ld	r20, X+
     fe0:	5c 91       	ld	r21, X
     fe2:	42 23       	and	r20, r18
     fe4:	53 23       	and	r21, r19
     fe6:	45 2b       	or	r20, r21
     fe8:	61 f4       	brne	.+24     	; 0x1002 <xEventGroupSetBits+0x70>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     fea:	40 e0       	ldi	r20, 0x00	; 0
     fec:	0d c0       	rjmp	.+26     	; 0x1008 <xEventGroupSetBits+0x76>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     fee:	d7 01       	movw	r26, r14
     ff0:	4d 91       	ld	r20, X+
     ff2:	5c 91       	ld	r21, X
     ff4:	42 23       	and	r20, r18
     ff6:	53 23       	and	r21, r19
     ff8:	24 17       	cp	r18, r20
     ffa:	35 07       	cpc	r19, r21
     ffc:	21 f0       	breq	.+8      	; 0x1006 <xEventGroupSetBits+0x74>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     ffe:	40 e0       	ldi	r20, 0x00	; 0
    1000:	03 c0       	rjmp	.+6      	; 0x1008 <xEventGroupSetBits+0x76>
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
    1002:	41 e0       	ldi	r20, 0x01	; 1
    1004:	01 c0       	rjmp	.+2      	; 0x1008 <xEventGroupSetBits+0x76>
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
    1006:	41 e0       	ldi	r20, 0x01	; 1
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
    1008:	44 23       	and	r20, r20
    100a:	59 f0       	breq	.+22     	; 0x1022 <xEventGroupSetBits+0x90>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
    100c:	90 ff       	sbrs	r25, 0
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <xEventGroupSetBits+0x82>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
    1010:	02 2b       	or	r16, r18
    1012:	13 2b       	or	r17, r19
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
    1014:	d7 01       	movw	r26, r14
    1016:	6d 91       	ld	r22, X+
    1018:	7c 91       	ld	r23, X
    101a:	72 60       	ori	r23, 0x02	; 2
    101c:	cf 01       	movw	r24, r30
    101e:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <vTaskRemoveFromUnorderedEventList>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
    1022:	ec 2d       	mov	r30, r12
    1024:	fd 2d       	mov	r31, r13

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
    1026:	ec 17       	cp	r30, r28
    1028:	fd 07       	cpc	r31, r29
    102a:	81 f6       	brne	.-96     	; 0xfcc <xEventGroupSetBits+0x3a>
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
    102c:	00 95       	com	r16
    102e:	10 95       	com	r17
    1030:	f7 01       	movw	r30, r14
    1032:	80 81       	ld	r24, Z
    1034:	91 81       	ldd	r25, Z+1	; 0x01
    1036:	08 23       	and	r16, r24
    1038:	19 23       	and	r17, r25
    103a:	11 83       	std	Z+1, r17	; 0x01
    103c:	00 83       	st	Z, r16
    }
    ( void ) xTaskResumeAll();
    103e:	0e 94 c0 12 	call	0x2580	; 0x2580 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
}
    1042:	d7 01       	movw	r26, r14
    1044:	8d 91       	ld	r24, X+
    1046:	9c 91       	ld	r25, X
    1048:	df 91       	pop	r29
    104a:	cf 91       	pop	r28
    104c:	1f 91       	pop	r17
    104e:	0f 91       	pop	r16
    1050:	ff 90       	pop	r15
    1052:	ef 90       	pop	r14
    1054:	df 90       	pop	r13
    1056:	cf 90       	pop	r12
    1058:	08 95       	ret

0000105a <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    105a:	eb e2       	ldi	r30, 0x2B	; 43
    105c:	f1 e0       	ldi	r31, 0x01	; 1
    105e:	af e2       	ldi	r26, 0x2F	; 47
    1060:	b1 e0       	ldi	r27, 0x01	; 1
    1062:	b1 83       	std	Z+1, r27	; 0x01
    1064:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
    1066:	13 82       	std	Z+3, r1	; 0x03
    1068:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
    106a:	e7 e0       	ldi	r30, 0x07	; 7
    106c:	f7 e0       	ldi	r31, 0x07	; 7
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( BlockLink_t * ) uxAddress;
    106e:	f0 93 2a 01 	sts	0x012A, r31	; 0x80012a <pxEnd+0x1>
    1072:	e0 93 29 01 	sts	0x0129, r30	; 0x800129 <pxEnd>
    pxEnd->xBlockSize = 0;
    1076:	13 82       	std	Z+3, r1	; 0x03
    1078:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
    107a:	11 82       	std	Z+1, r1	; 0x01
    107c:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
    107e:	88 ed       	ldi	r24, 0xD8	; 216
    1080:	95 e0       	ldi	r25, 0x05	; 5
    1082:	13 96       	adiw	r26, 0x03	; 3
    1084:	9c 93       	st	X, r25
    1086:	8e 93       	st	-X, r24
    1088:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    108a:	ed 93       	st	X+, r30
    108c:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    108e:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <xMinimumEverFreeBytesRemaining+0x1>
    1092:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    1096:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <xFreeBytesRemaining+0x1>
    109a:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <xFreeBytesRemaining>
    109e:	08 95       	ret

000010a0 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
    10a0:	cf 93       	push	r28
    10a2:	df 93       	push	r29
    10a4:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    10a6:	ab e2       	ldi	r26, 0x2B	; 43
    10a8:	b1 e0       	ldi	r27, 0x01	; 1
    10aa:	01 c0       	rjmp	.+2      	; 0x10ae <prvInsertBlockIntoFreeList+0xe>
    10ac:	df 01       	movw	r26, r30
    10ae:	ed 91       	ld	r30, X+
    10b0:	fc 91       	ld	r31, X
    10b2:	11 97       	sbiw	r26, 0x01	; 1
    10b4:	ec 17       	cp	r30, r28
    10b6:	fd 07       	cpc	r31, r29
    10b8:	c8 f3       	brcs	.-14     	; 0x10ac <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    10ba:	12 96       	adiw	r26, 0x02	; 2
    10bc:	8d 91       	ld	r24, X+
    10be:	9c 91       	ld	r25, X
    10c0:	13 97       	sbiw	r26, 0x03	; 3
    10c2:	9d 01       	movw	r18, r26
    10c4:	28 0f       	add	r18, r24
    10c6:	39 1f       	adc	r19, r25
    10c8:	c2 17       	cp	r28, r18
    10ca:	d3 07       	cpc	r29, r19
    10cc:	49 f4       	brne	.+18     	; 0x10e0 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    10ce:	2a 81       	ldd	r18, Y+2	; 0x02
    10d0:	3b 81       	ldd	r19, Y+3	; 0x03
    10d2:	82 0f       	add	r24, r18
    10d4:	93 1f       	adc	r25, r19
    10d6:	13 96       	adiw	r26, 0x03	; 3
    10d8:	9c 93       	st	X, r25
    10da:	8e 93       	st	-X, r24
    10dc:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
    10de:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    10e0:	8a 81       	ldd	r24, Y+2	; 0x02
    10e2:	9b 81       	ldd	r25, Y+3	; 0x03
    10e4:	9e 01       	movw	r18, r28
    10e6:	28 0f       	add	r18, r24
    10e8:	39 1f       	adc	r19, r25
    10ea:	e2 17       	cp	r30, r18
    10ec:	f3 07       	cpc	r31, r19
    10ee:	c1 f4       	brne	.+48     	; 0x1120 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
    10f0:	20 91 29 01 	lds	r18, 0x0129	; 0x800129 <pxEnd>
    10f4:	30 91 2a 01 	lds	r19, 0x012A	; 0x80012a <pxEnd+0x1>
    10f8:	e2 17       	cp	r30, r18
    10fa:	f3 07       	cpc	r31, r19
    10fc:	71 f0       	breq	.+28     	; 0x111a <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    10fe:	22 81       	ldd	r18, Z+2	; 0x02
    1100:	33 81       	ldd	r19, Z+3	; 0x03
    1102:	82 0f       	add	r24, r18
    1104:	93 1f       	adc	r25, r19
    1106:	9b 83       	std	Y+3, r25	; 0x03
    1108:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    110a:	ed 91       	ld	r30, X+
    110c:	fc 91       	ld	r31, X
    110e:	11 97       	sbiw	r26, 0x01	; 1
    1110:	80 81       	ld	r24, Z
    1112:	91 81       	ldd	r25, Z+1	; 0x01
    1114:	99 83       	std	Y+1, r25	; 0x01
    1116:	88 83       	st	Y, r24
    1118:	05 c0       	rjmp	.+10     	; 0x1124 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
    111a:	39 83       	std	Y+1, r19	; 0x01
    111c:	28 83       	st	Y, r18
    111e:	02 c0       	rjmp	.+4      	; 0x1124 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    1120:	f9 83       	std	Y+1, r31	; 0x01
    1122:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
    1124:	ca 17       	cp	r28, r26
    1126:	db 07       	cpc	r29, r27
    1128:	11 f0       	breq	.+4      	; 0x112e <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
    112a:	cd 93       	st	X+, r28
    112c:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
    112e:	df 91       	pop	r29
    1130:	cf 91       	pop	r28
    1132:	08 95       	ret

00001134 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    1134:	ef 92       	push	r14
    1136:	ff 92       	push	r15
    1138:	0f 93       	push	r16
    113a:	1f 93       	push	r17
    113c:	cf 93       	push	r28
    113e:	df 93       	push	r29
    1140:	8c 01       	movw	r16, r24
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
    1142:	0e 94 a0 11 	call	0x2340	; 0x2340 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
    1146:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <pxEnd>
    114a:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <pxEnd+0x1>
    114e:	89 2b       	or	r24, r25
    1150:	11 f4       	brne	.+4      	; 0x1156 <pvPortMalloc+0x22>
        {
            prvHeapInit();
    1152:	0e 94 2d 08 	call	0x105a	; 0x105a <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
    1156:	01 15       	cp	r16, r1
    1158:	11 05       	cpc	r17, r1
    115a:	49 f0       	breq	.+18     	; 0x116e <pvPortMalloc+0x3a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
    115c:	0b 3f       	cpi	r16, 0xFB	; 251
    115e:	8f ef       	ldi	r24, 0xFF	; 255
    1160:	18 07       	cpc	r17, r24
    1162:	18 f4       	brcc	.+6      	; 0x116a <pvPortMalloc+0x36>
            {
                xWantedSize += xAdditionalRequiredSize;
    1164:	0b 5f       	subi	r16, 0xFB	; 251
    1166:	1f 4f       	sbci	r17, 0xFF	; 255
    1168:	02 c0       	rjmp	.+4      	; 0x116e <pvPortMalloc+0x3a>
            }
            else
            {
                xWantedSize = 0;
    116a:	00 e0       	ldi	r16, 0x00	; 0
    116c:	10 e0       	ldi	r17, 0x00	; 0

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
    116e:	11 23       	and	r17, r17
    1170:	0c f4       	brge	.+2      	; 0x1174 <pvPortMalloc+0x40>
    1172:	66 c0       	rjmp	.+204    	; 0x1240 <pvPortMalloc+0x10c>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
    1174:	01 15       	cp	r16, r1
    1176:	11 05       	cpc	r17, r1
    1178:	09 f4       	brne	.+2      	; 0x117c <pvPortMalloc+0x48>
    117a:	65 c0       	rjmp	.+202    	; 0x1246 <pvPortMalloc+0x112>
    117c:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <xFreeBytesRemaining>
    1180:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <xFreeBytesRemaining+0x1>
    1184:	80 17       	cp	r24, r16
    1186:	91 07       	cpc	r25, r17
    1188:	08 f4       	brcc	.+2      	; 0x118c <pvPortMalloc+0x58>
    118a:	60 c0       	rjmp	.+192    	; 0x124c <pvPortMalloc+0x118>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
    118c:	c0 91 2b 01 	lds	r28, 0x012B	; 0x80012b <xStart>
    1190:	d0 91 2c 01 	lds	r29, 0x012C	; 0x80012c <xStart+0x1>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
    1194:	eb e2       	ldi	r30, 0x2B	; 43
    1196:	f1 e0       	ldi	r31, 0x01	; 1
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    1198:	02 c0       	rjmp	.+4      	; 0x119e <pvPortMalloc+0x6a>
                {
                    pxPreviousBlock = pxBlock;
    119a:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
    119c:	ec 01       	movw	r28, r24
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    119e:	8a 81       	ldd	r24, Y+2	; 0x02
    11a0:	9b 81       	ldd	r25, Y+3	; 0x03
    11a2:	80 17       	cp	r24, r16
    11a4:	91 07       	cpc	r25, r17
    11a6:	20 f4       	brcc	.+8      	; 0x11b0 <pvPortMalloc+0x7c>
    11a8:	88 81       	ld	r24, Y
    11aa:	99 81       	ldd	r25, Y+1	; 0x01
    11ac:	00 97       	sbiw	r24, 0x00	; 0
    11ae:	a9 f7       	brne	.-22     	; 0x119a <pvPortMalloc+0x66>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
    11b0:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <pxEnd>
    11b4:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <pxEnd+0x1>
    11b8:	c8 17       	cp	r28, r24
    11ba:	d9 07       	cpc	r29, r25
    11bc:	09 f4       	brne	.+2      	; 0x11c0 <pvPortMalloc+0x8c>
    11be:	49 c0       	rjmp	.+146    	; 0x1252 <pvPortMalloc+0x11e>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    11c0:	e0 80       	ld	r14, Z
    11c2:	f1 80       	ldd	r15, Z+1	; 0x01
    11c4:	84 e0       	ldi	r24, 0x04	; 4
    11c6:	e8 0e       	add	r14, r24
    11c8:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    11ca:	88 81       	ld	r24, Y
    11cc:	99 81       	ldd	r25, Y+1	; 0x01
    11ce:	91 83       	std	Z+1, r25	; 0x01
    11d0:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    11d2:	2a 81       	ldd	r18, Y+2	; 0x02
    11d4:	3b 81       	ldd	r19, Y+3	; 0x03
    11d6:	20 1b       	sub	r18, r16
    11d8:	31 0b       	sbc	r19, r17
    11da:	29 30       	cpi	r18, 0x09	; 9
    11dc:	31 05       	cpc	r19, r1
    11de:	50 f0       	brcs	.+20     	; 0x11f4 <pvPortMalloc+0xc0>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    11e0:	ce 01       	movw	r24, r28
    11e2:	80 0f       	add	r24, r16
    11e4:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    11e6:	fc 01       	movw	r30, r24
    11e8:	33 83       	std	Z+3, r19	; 0x03
    11ea:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
    11ec:	1b 83       	std	Y+3, r17	; 0x03
    11ee:	0a 83       	std	Y+2, r16	; 0x02

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
    11f0:	0e 94 50 08 	call	0x10a0	; 0x10a0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
    11f4:	2a 81       	ldd	r18, Y+2	; 0x02
    11f6:	3b 81       	ldd	r19, Y+3	; 0x03
    11f8:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <xFreeBytesRemaining>
    11fc:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <xFreeBytesRemaining+0x1>
    1200:	82 1b       	sub	r24, r18
    1202:	93 0b       	sbc	r25, r19
    1204:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <xFreeBytesRemaining+0x1>
    1208:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
    120c:	40 91 25 01 	lds	r20, 0x0125	; 0x800125 <xMinimumEverFreeBytesRemaining>
    1210:	50 91 26 01 	lds	r21, 0x0126	; 0x800126 <xMinimumEverFreeBytesRemaining+0x1>
    1214:	84 17       	cp	r24, r20
    1216:	95 07       	cpc	r25, r21
    1218:	20 f4       	brcc	.+8      	; 0x1222 <pvPortMalloc+0xee>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
    121a:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <xMinimumEverFreeBytesRemaining+0x1>
    121e:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
    1222:	30 68       	ori	r19, 0x80	; 128
    1224:	3b 83       	std	Y+3, r19	; 0x03
    1226:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
    1228:	19 82       	std	Y+1, r1	; 0x01
    122a:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
    122c:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <xNumberOfSuccessfulAllocations>
    1230:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <xNumberOfSuccessfulAllocations+0x1>
    1234:	01 96       	adiw	r24, 0x01	; 1
    1236:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <xNumberOfSuccessfulAllocations+0x1>
    123a:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <xNumberOfSuccessfulAllocations>
    123e:	0b c0       	rjmp	.+22     	; 0x1256 <pvPortMalloc+0x122>
void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
    1240:	e1 2c       	mov	r14, r1
    1242:	f1 2c       	mov	r15, r1
    1244:	08 c0       	rjmp	.+16     	; 0x1256 <pvPortMalloc+0x122>
    1246:	e1 2c       	mov	r14, r1
    1248:	f1 2c       	mov	r15, r1
    124a:	05 c0       	rjmp	.+10     	; 0x1256 <pvPortMalloc+0x122>
    124c:	e1 2c       	mov	r14, r1
    124e:	f1 2c       	mov	r15, r1
    1250:	02 c0       	rjmp	.+4      	; 0x1256 <pvPortMalloc+0x122>
    1252:	e1 2c       	mov	r14, r1
    1254:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
    1256:	0e 94 c0 12 	call	0x2580	; 0x2580 <xTaskResumeAll>
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
    125a:	c7 01       	movw	r24, r14
    125c:	df 91       	pop	r29
    125e:	cf 91       	pop	r28
    1260:	1f 91       	pop	r17
    1262:	0f 91       	pop	r16
    1264:	ff 90       	pop	r15
    1266:	ef 90       	pop	r14
    1268:	08 95       	ret

0000126a <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
    126a:	0f 93       	push	r16
    126c:	1f 93       	push	r17
    126e:	cf 93       	push	r28
    1270:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
    1272:	00 97       	sbiw	r24, 0x00	; 0
    1274:	49 f1       	breq	.+82     	; 0x12c8 <vPortFree+0x5e>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
    1276:	ec 01       	movw	r28, r24
    1278:	24 97       	sbiw	r28, 0x04	; 4
        pxLink = ( void * ) puc;

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
    127a:	2a 81       	ldd	r18, Y+2	; 0x02
    127c:	3b 81       	ldd	r19, Y+3	; 0x03
    127e:	33 23       	and	r19, r19
    1280:	1c f5       	brge	.+70     	; 0x12c8 <vPortFree+0x5e>
        {
            if( pxLink->pxNextFreeBlock == NULL )
    1282:	48 81       	ld	r20, Y
    1284:	59 81       	ldd	r21, Y+1	; 0x01
    1286:	45 2b       	or	r20, r21
    1288:	f9 f4       	brne	.+62     	; 0x12c8 <vPortFree+0x5e>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
    128a:	3f 77       	andi	r19, 0x7F	; 127
    128c:	3b 83       	std	Y+3, r19	; 0x03
    128e:	2a 83       	std	Y+2, r18	; 0x02
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
    1290:	0e 94 a0 11 	call	0x2340	; 0x2340 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
    1294:	8a 81       	ldd	r24, Y+2	; 0x02
    1296:	9b 81       	ldd	r25, Y+3	; 0x03
    1298:	20 91 27 01 	lds	r18, 0x0127	; 0x800127 <xFreeBytesRemaining>
    129c:	30 91 28 01 	lds	r19, 0x0128	; 0x800128 <xFreeBytesRemaining+0x1>
    12a0:	82 0f       	add	r24, r18
    12a2:	93 1f       	adc	r25, r19
    12a4:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <xFreeBytesRemaining+0x1>
    12a8:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    12ac:	ce 01       	movw	r24, r28
    12ae:	0e 94 50 08 	call	0x10a0	; 0x10a0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
    12b2:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <xNumberOfSuccessfulFrees>
    12b6:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <xNumberOfSuccessfulFrees+0x1>
    12ba:	01 96       	adiw	r24, 0x01	; 1
    12bc:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <xNumberOfSuccessfulFrees+0x1>
    12c0:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
    12c4:	0e 94 c0 12 	call	0x2580	; 0x2580 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
    12c8:	df 91       	pop	r29
    12ca:	cf 91       	pop	r28
    12cc:	1f 91       	pop	r17
    12ce:	0f 91       	pop	r16
    12d0:	08 95       	ret

000012d2 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    12d2:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    12d4:	03 96       	adiw	r24, 0x03	; 3
    12d6:	92 83       	std	Z+2, r25	; 0x02
    12d8:	81 83       	std	Z+1, r24	; 0x01

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
    12da:	2f ef       	ldi	r18, 0xFF	; 255
    12dc:	3f ef       	ldi	r19, 0xFF	; 255
    12de:	34 83       	std	Z+4, r19	; 0x04
    12e0:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    12e2:	96 83       	std	Z+6, r25	; 0x06
    12e4:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    12e6:	90 87       	std	Z+8, r25	; 0x08
    12e8:	87 83       	std	Z+7, r24	; 0x07
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    12ea:	10 82       	st	Z, r1
    12ec:	08 95       	ret

000012ee <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
    12ee:	fc 01       	movw	r30, r24
    12f0:	11 86       	std	Z+9, r1	; 0x09
    12f2:	10 86       	std	Z+8, r1	; 0x08
    12f4:	08 95       	ret

000012f6 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
    12f6:	cf 93       	push	r28
    12f8:	df 93       	push	r29
    12fa:	9c 01       	movw	r18, r24
    12fc:	fb 01       	movw	r30, r22
    ListItem_t * const pxIndex = pxList->pxIndex;
    12fe:	dc 01       	movw	r26, r24
    1300:	11 96       	adiw	r26, 0x01	; 1
    1302:	cd 91       	ld	r28, X+
    1304:	dc 91       	ld	r29, X
    1306:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    1308:	d3 83       	std	Z+3, r29	; 0x03
    130a:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    130c:	8c 81       	ldd	r24, Y+4	; 0x04
    130e:	9d 81       	ldd	r25, Y+5	; 0x05
    1310:	95 83       	std	Z+5, r25	; 0x05
    1312:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
    1314:	8c 81       	ldd	r24, Y+4	; 0x04
    1316:	9d 81       	ldd	r25, Y+5	; 0x05
    1318:	dc 01       	movw	r26, r24
    131a:	13 96       	adiw	r26, 0x03	; 3
    131c:	7c 93       	st	X, r23
    131e:	6e 93       	st	-X, r22
    1320:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
    1322:	7d 83       	std	Y+5, r23	; 0x05
    1324:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
    1326:	31 87       	std	Z+9, r19	; 0x09
    1328:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
    132a:	f9 01       	movw	r30, r18
    132c:	80 81       	ld	r24, Z
    132e:	8f 5f       	subi	r24, 0xFF	; 255
    1330:	80 83       	st	Z, r24
}
    1332:	df 91       	pop	r29
    1334:	cf 91       	pop	r28
    1336:	08 95       	ret

00001338 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
    1338:	cf 93       	push	r28
    133a:	df 93       	push	r29
    133c:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    133e:	48 81       	ld	r20, Y
    1340:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    1342:	4f 3f       	cpi	r20, 0xFF	; 255
    1344:	2f ef       	ldi	r18, 0xFF	; 255
    1346:	52 07       	cpc	r21, r18
    1348:	21 f4       	brne	.+8      	; 0x1352 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    134a:	fc 01       	movw	r30, r24
    134c:	a7 81       	ldd	r26, Z+7	; 0x07
    134e:	b0 85       	ldd	r27, Z+8	; 0x08
    1350:	0d c0       	rjmp	.+26     	; 0x136c <vListInsert+0x34>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    1352:	dc 01       	movw	r26, r24
    1354:	13 96       	adiw	r26, 0x03	; 3
    1356:	01 c0       	rjmp	.+2      	; 0x135a <vListInsert+0x22>
    1358:	df 01       	movw	r26, r30
    135a:	12 96       	adiw	r26, 0x02	; 2
    135c:	ed 91       	ld	r30, X+
    135e:	fc 91       	ld	r31, X
    1360:	13 97       	sbiw	r26, 0x03	; 3
    1362:	20 81       	ld	r18, Z
    1364:	31 81       	ldd	r19, Z+1	; 0x01
    1366:	42 17       	cp	r20, r18
    1368:	53 07       	cpc	r21, r19
    136a:	b0 f7       	brcc	.-20     	; 0x1358 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    136c:	12 96       	adiw	r26, 0x02	; 2
    136e:	ed 91       	ld	r30, X+
    1370:	fc 91       	ld	r31, X
    1372:	13 97       	sbiw	r26, 0x03	; 3
    1374:	fb 83       	std	Y+3, r31	; 0x03
    1376:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1378:	d5 83       	std	Z+5, r29	; 0x05
    137a:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
    137c:	bd 83       	std	Y+5, r27	; 0x05
    137e:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
    1380:	13 96       	adiw	r26, 0x03	; 3
    1382:	dc 93       	st	X, r29
    1384:	ce 93       	st	-X, r28
    1386:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
    1388:	99 87       	std	Y+9, r25	; 0x09
    138a:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
    138c:	fc 01       	movw	r30, r24
    138e:	20 81       	ld	r18, Z
    1390:	2f 5f       	subi	r18, 0xFF	; 255
    1392:	20 83       	st	Z, r18
}
    1394:	df 91       	pop	r29
    1396:	cf 91       	pop	r28
    1398:	08 95       	ret

0000139a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    139a:	cf 93       	push	r28
    139c:	df 93       	push	r29
    139e:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
    13a0:	a0 85       	ldd	r26, Z+8	; 0x08
    13a2:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    13a4:	c2 81       	ldd	r28, Z+2	; 0x02
    13a6:	d3 81       	ldd	r29, Z+3	; 0x03
    13a8:	84 81       	ldd	r24, Z+4	; 0x04
    13aa:	95 81       	ldd	r25, Z+5	; 0x05
    13ac:	9d 83       	std	Y+5, r25	; 0x05
    13ae:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    13b0:	c4 81       	ldd	r28, Z+4	; 0x04
    13b2:	d5 81       	ldd	r29, Z+5	; 0x05
    13b4:	82 81       	ldd	r24, Z+2	; 0x02
    13b6:	93 81       	ldd	r25, Z+3	; 0x03
    13b8:	9b 83       	std	Y+3, r25	; 0x03
    13ba:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    13bc:	11 96       	adiw	r26, 0x01	; 1
    13be:	8d 91       	ld	r24, X+
    13c0:	9c 91       	ld	r25, X
    13c2:	12 97       	sbiw	r26, 0x02	; 2
    13c4:	e8 17       	cp	r30, r24
    13c6:	f9 07       	cpc	r31, r25
    13c8:	31 f4       	brne	.+12     	; 0x13d6 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    13ca:	84 81       	ldd	r24, Z+4	; 0x04
    13cc:	95 81       	ldd	r25, Z+5	; 0x05
    13ce:	12 96       	adiw	r26, 0x02	; 2
    13d0:	9c 93       	st	X, r25
    13d2:	8e 93       	st	-X, r24
    13d4:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    13d6:	11 86       	std	Z+9, r1	; 0x09
    13d8:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
    13da:	8c 91       	ld	r24, X
    13dc:	81 50       	subi	r24, 0x01	; 1
    13de:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    13e0:	8c 91       	ld	r24, X
}
    13e2:	df 91       	pop	r29
    13e4:	cf 91       	pop	r28
    13e6:	08 95       	ret

000013e8 <prvSetupTimerInterrupt>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    13e8:	1b bc       	out	0x2b, r1	; 43
    13ea:	89 ef       	ldi	r24, 0xF9	; 249
    13ec:	8a bd       	out	0x2a, r24	; 42
    13ee:	8b e0       	ldi	r24, 0x0B	; 11
    13f0:	8e bd       	out	0x2e, r24	; 46
    13f2:	89 b7       	in	r24, 0x39	; 57
    13f4:	80 61       	ori	r24, 0x10	; 16
    13f6:	89 bf       	out	0x39, r24	; 57
    13f8:	08 95       	ret

000013fa <pxPortInitialiseStack>:
    13fa:	31 e1       	ldi	r19, 0x11	; 17
    13fc:	fc 01       	movw	r30, r24
    13fe:	30 83       	st	Z, r19
    1400:	31 97       	sbiw	r30, 0x01	; 1
    1402:	22 e2       	ldi	r18, 0x22	; 34
    1404:	20 83       	st	Z, r18
    1406:	31 97       	sbiw	r30, 0x01	; 1
    1408:	a3 e3       	ldi	r26, 0x33	; 51
    140a:	a0 83       	st	Z, r26
    140c:	31 97       	sbiw	r30, 0x01	; 1
    140e:	60 83       	st	Z, r22
    1410:	31 97       	sbiw	r30, 0x01	; 1
    1412:	70 83       	st	Z, r23
    1414:	31 97       	sbiw	r30, 0x01	; 1
    1416:	10 82       	st	Z, r1
    1418:	31 97       	sbiw	r30, 0x01	; 1
    141a:	60 e8       	ldi	r22, 0x80	; 128
    141c:	60 83       	st	Z, r22
    141e:	31 97       	sbiw	r30, 0x01	; 1
    1420:	10 82       	st	Z, r1
    1422:	31 97       	sbiw	r30, 0x01	; 1
    1424:	62 e0       	ldi	r22, 0x02	; 2
    1426:	60 83       	st	Z, r22
    1428:	31 97       	sbiw	r30, 0x01	; 1
    142a:	63 e0       	ldi	r22, 0x03	; 3
    142c:	60 83       	st	Z, r22
    142e:	31 97       	sbiw	r30, 0x01	; 1
    1430:	64 e0       	ldi	r22, 0x04	; 4
    1432:	60 83       	st	Z, r22
    1434:	31 97       	sbiw	r30, 0x01	; 1
    1436:	65 e0       	ldi	r22, 0x05	; 5
    1438:	60 83       	st	Z, r22
    143a:	31 97       	sbiw	r30, 0x01	; 1
    143c:	66 e0       	ldi	r22, 0x06	; 6
    143e:	60 83       	st	Z, r22
    1440:	31 97       	sbiw	r30, 0x01	; 1
    1442:	67 e0       	ldi	r22, 0x07	; 7
    1444:	60 83       	st	Z, r22
    1446:	31 97       	sbiw	r30, 0x01	; 1
    1448:	68 e0       	ldi	r22, 0x08	; 8
    144a:	60 83       	st	Z, r22
    144c:	31 97       	sbiw	r30, 0x01	; 1
    144e:	69 e0       	ldi	r22, 0x09	; 9
    1450:	60 83       	st	Z, r22
    1452:	31 97       	sbiw	r30, 0x01	; 1
    1454:	60 e1       	ldi	r22, 0x10	; 16
    1456:	60 83       	st	Z, r22
    1458:	31 97       	sbiw	r30, 0x01	; 1
    145a:	30 83       	st	Z, r19
    145c:	31 97       	sbiw	r30, 0x01	; 1
    145e:	32 e1       	ldi	r19, 0x12	; 18
    1460:	30 83       	st	Z, r19
    1462:	31 97       	sbiw	r30, 0x01	; 1
    1464:	33 e1       	ldi	r19, 0x13	; 19
    1466:	30 83       	st	Z, r19
    1468:	31 97       	sbiw	r30, 0x01	; 1
    146a:	34 e1       	ldi	r19, 0x14	; 20
    146c:	30 83       	st	Z, r19
    146e:	31 97       	sbiw	r30, 0x01	; 1
    1470:	35 e1       	ldi	r19, 0x15	; 21
    1472:	30 83       	st	Z, r19
    1474:	31 97       	sbiw	r30, 0x01	; 1
    1476:	36 e1       	ldi	r19, 0x16	; 22
    1478:	30 83       	st	Z, r19
    147a:	31 97       	sbiw	r30, 0x01	; 1
    147c:	37 e1       	ldi	r19, 0x17	; 23
    147e:	30 83       	st	Z, r19
    1480:	31 97       	sbiw	r30, 0x01	; 1
    1482:	38 e1       	ldi	r19, 0x18	; 24
    1484:	30 83       	st	Z, r19
    1486:	31 97       	sbiw	r30, 0x01	; 1
    1488:	39 e1       	ldi	r19, 0x19	; 25
    148a:	30 83       	st	Z, r19
    148c:	31 97       	sbiw	r30, 0x01	; 1
    148e:	30 e2       	ldi	r19, 0x20	; 32
    1490:	30 83       	st	Z, r19
    1492:	31 97       	sbiw	r30, 0x01	; 1
    1494:	31 e2       	ldi	r19, 0x21	; 33
    1496:	30 83       	st	Z, r19
    1498:	31 97       	sbiw	r30, 0x01	; 1
    149a:	20 83       	st	Z, r18
    149c:	31 97       	sbiw	r30, 0x01	; 1
    149e:	23 e2       	ldi	r18, 0x23	; 35
    14a0:	20 83       	st	Z, r18
    14a2:	31 97       	sbiw	r30, 0x01	; 1
    14a4:	40 83       	st	Z, r20
    14a6:	31 97       	sbiw	r30, 0x01	; 1
    14a8:	50 83       	st	Z, r21
    14aa:	31 97       	sbiw	r30, 0x01	; 1
    14ac:	26 e2       	ldi	r18, 0x26	; 38
    14ae:	20 83       	st	Z, r18
    14b0:	31 97       	sbiw	r30, 0x01	; 1
    14b2:	27 e2       	ldi	r18, 0x27	; 39
    14b4:	20 83       	st	Z, r18
    14b6:	31 97       	sbiw	r30, 0x01	; 1
    14b8:	28 e2       	ldi	r18, 0x28	; 40
    14ba:	20 83       	st	Z, r18
    14bc:	31 97       	sbiw	r30, 0x01	; 1
    14be:	29 e2       	ldi	r18, 0x29	; 41
    14c0:	20 83       	st	Z, r18
    14c2:	31 97       	sbiw	r30, 0x01	; 1
    14c4:	20 e3       	ldi	r18, 0x30	; 48
    14c6:	20 83       	st	Z, r18
    14c8:	31 97       	sbiw	r30, 0x01	; 1
    14ca:	21 e3       	ldi	r18, 0x31	; 49
    14cc:	20 83       	st	Z, r18
    14ce:	86 97       	sbiw	r24, 0x26	; 38
    14d0:	08 95       	ret

000014d2 <xPortStartScheduler>:
    14d2:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <prvSetupTimerInterrupt>
    14d6:	a0 91 67 07 	lds	r26, 0x0767	; 0x800767 <pxCurrentTCB>
    14da:	b0 91 68 07 	lds	r27, 0x0768	; 0x800768 <pxCurrentTCB+0x1>
    14de:	cd 91       	ld	r28, X+
    14e0:	cd bf       	out	0x3d, r28	; 61
    14e2:	dd 91       	ld	r29, X+
    14e4:	de bf       	out	0x3e, r29	; 62
    14e6:	ff 91       	pop	r31
    14e8:	ef 91       	pop	r30
    14ea:	df 91       	pop	r29
    14ec:	cf 91       	pop	r28
    14ee:	bf 91       	pop	r27
    14f0:	af 91       	pop	r26
    14f2:	9f 91       	pop	r25
    14f4:	8f 91       	pop	r24
    14f6:	7f 91       	pop	r23
    14f8:	6f 91       	pop	r22
    14fa:	5f 91       	pop	r21
    14fc:	4f 91       	pop	r20
    14fe:	3f 91       	pop	r19
    1500:	2f 91       	pop	r18
    1502:	1f 91       	pop	r17
    1504:	0f 91       	pop	r16
    1506:	ff 90       	pop	r15
    1508:	ef 90       	pop	r14
    150a:	df 90       	pop	r13
    150c:	cf 90       	pop	r12
    150e:	bf 90       	pop	r11
    1510:	af 90       	pop	r10
    1512:	9f 90       	pop	r9
    1514:	8f 90       	pop	r8
    1516:	7f 90       	pop	r7
    1518:	6f 90       	pop	r6
    151a:	5f 90       	pop	r5
    151c:	4f 90       	pop	r4
    151e:	3f 90       	pop	r3
    1520:	2f 90       	pop	r2
    1522:	1f 90       	pop	r1
    1524:	0f 90       	pop	r0
    1526:	0f be       	out	0x3f, r0	; 63
    1528:	0f 90       	pop	r0
    152a:	08 95       	ret
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	08 95       	ret

00001530 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    1530:	0f 92       	push	r0
    1532:	0f b6       	in	r0, 0x3f	; 63
    1534:	f8 94       	cli
    1536:	0f 92       	push	r0
    1538:	1f 92       	push	r1
    153a:	11 24       	eor	r1, r1
    153c:	2f 92       	push	r2
    153e:	3f 92       	push	r3
    1540:	4f 92       	push	r4
    1542:	5f 92       	push	r5
    1544:	6f 92       	push	r6
    1546:	7f 92       	push	r7
    1548:	8f 92       	push	r8
    154a:	9f 92       	push	r9
    154c:	af 92       	push	r10
    154e:	bf 92       	push	r11
    1550:	cf 92       	push	r12
    1552:	df 92       	push	r13
    1554:	ef 92       	push	r14
    1556:	ff 92       	push	r15
    1558:	0f 93       	push	r16
    155a:	1f 93       	push	r17
    155c:	2f 93       	push	r18
    155e:	3f 93       	push	r19
    1560:	4f 93       	push	r20
    1562:	5f 93       	push	r21
    1564:	6f 93       	push	r22
    1566:	7f 93       	push	r23
    1568:	8f 93       	push	r24
    156a:	9f 93       	push	r25
    156c:	af 93       	push	r26
    156e:	bf 93       	push	r27
    1570:	cf 93       	push	r28
    1572:	df 93       	push	r29
    1574:	ef 93       	push	r30
    1576:	ff 93       	push	r31
    1578:	a0 91 67 07 	lds	r26, 0x0767	; 0x800767 <pxCurrentTCB>
    157c:	b0 91 68 07 	lds	r27, 0x0768	; 0x800768 <pxCurrentTCB+0x1>
    1580:	0d b6       	in	r0, 0x3d	; 61
    1582:	0d 92       	st	X+, r0
    1584:	0e b6       	in	r0, 0x3e	; 62
    1586:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    1588:	0e 94 ab 13 	call	0x2756	; 0x2756 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    158c:	a0 91 67 07 	lds	r26, 0x0767	; 0x800767 <pxCurrentTCB>
    1590:	b0 91 68 07 	lds	r27, 0x0768	; 0x800768 <pxCurrentTCB+0x1>
    1594:	cd 91       	ld	r28, X+
    1596:	cd bf       	out	0x3d, r28	; 61
    1598:	dd 91       	ld	r29, X+
    159a:	de bf       	out	0x3e, r29	; 62
    159c:	ff 91       	pop	r31
    159e:	ef 91       	pop	r30
    15a0:	df 91       	pop	r29
    15a2:	cf 91       	pop	r28
    15a4:	bf 91       	pop	r27
    15a6:	af 91       	pop	r26
    15a8:	9f 91       	pop	r25
    15aa:	8f 91       	pop	r24
    15ac:	7f 91       	pop	r23
    15ae:	6f 91       	pop	r22
    15b0:	5f 91       	pop	r21
    15b2:	4f 91       	pop	r20
    15b4:	3f 91       	pop	r19
    15b6:	2f 91       	pop	r18
    15b8:	1f 91       	pop	r17
    15ba:	0f 91       	pop	r16
    15bc:	ff 90       	pop	r15
    15be:	ef 90       	pop	r14
    15c0:	df 90       	pop	r13
    15c2:	cf 90       	pop	r12
    15c4:	bf 90       	pop	r11
    15c6:	af 90       	pop	r10
    15c8:	9f 90       	pop	r9
    15ca:	8f 90       	pop	r8
    15cc:	7f 90       	pop	r7
    15ce:	6f 90       	pop	r6
    15d0:	5f 90       	pop	r5
    15d2:	4f 90       	pop	r4
    15d4:	3f 90       	pop	r3
    15d6:	2f 90       	pop	r2
    15d8:	1f 90       	pop	r1
    15da:	0f 90       	pop	r0
    15dc:	0f be       	out	0x3f, r0	; 63
    15de:	0f 90       	pop	r0

	asm volatile ( "ret" );
    15e0:	08 95       	ret

000015e2 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    15e2:	0f 92       	push	r0
    15e4:	0f b6       	in	r0, 0x3f	; 63
    15e6:	f8 94       	cli
    15e8:	0f 92       	push	r0
    15ea:	1f 92       	push	r1
    15ec:	11 24       	eor	r1, r1
    15ee:	2f 92       	push	r2
    15f0:	3f 92       	push	r3
    15f2:	4f 92       	push	r4
    15f4:	5f 92       	push	r5
    15f6:	6f 92       	push	r6
    15f8:	7f 92       	push	r7
    15fa:	8f 92       	push	r8
    15fc:	9f 92       	push	r9
    15fe:	af 92       	push	r10
    1600:	bf 92       	push	r11
    1602:	cf 92       	push	r12
    1604:	df 92       	push	r13
    1606:	ef 92       	push	r14
    1608:	ff 92       	push	r15
    160a:	0f 93       	push	r16
    160c:	1f 93       	push	r17
    160e:	2f 93       	push	r18
    1610:	3f 93       	push	r19
    1612:	4f 93       	push	r20
    1614:	5f 93       	push	r21
    1616:	6f 93       	push	r22
    1618:	7f 93       	push	r23
    161a:	8f 93       	push	r24
    161c:	9f 93       	push	r25
    161e:	af 93       	push	r26
    1620:	bf 93       	push	r27
    1622:	cf 93       	push	r28
    1624:	df 93       	push	r29
    1626:	ef 93       	push	r30
    1628:	ff 93       	push	r31
    162a:	a0 91 67 07 	lds	r26, 0x0767	; 0x800767 <pxCurrentTCB>
    162e:	b0 91 68 07 	lds	r27, 0x0768	; 0x800768 <pxCurrentTCB+0x1>
    1632:	0d b6       	in	r0, 0x3d	; 61
    1634:	0d 92       	st	X+, r0
    1636:	0e b6       	in	r0, 0x3e	; 62
    1638:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    163a:	0e 94 a6 11 	call	0x234c	; 0x234c <xTaskIncrementTick>
    163e:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
    1640:	0e 94 ab 13 	call	0x2756	; 0x2756 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
    1644:	a0 91 67 07 	lds	r26, 0x0767	; 0x800767 <pxCurrentTCB>
    1648:	b0 91 68 07 	lds	r27, 0x0768	; 0x800768 <pxCurrentTCB+0x1>
    164c:	cd 91       	ld	r28, X+
    164e:	cd bf       	out	0x3d, r28	; 61
    1650:	dd 91       	ld	r29, X+
    1652:	de bf       	out	0x3e, r29	; 62
    1654:	ff 91       	pop	r31
    1656:	ef 91       	pop	r30
    1658:	df 91       	pop	r29
    165a:	cf 91       	pop	r28
    165c:	bf 91       	pop	r27
    165e:	af 91       	pop	r26
    1660:	9f 91       	pop	r25
    1662:	8f 91       	pop	r24
    1664:	7f 91       	pop	r23
    1666:	6f 91       	pop	r22
    1668:	5f 91       	pop	r21
    166a:	4f 91       	pop	r20
    166c:	3f 91       	pop	r19
    166e:	2f 91       	pop	r18
    1670:	1f 91       	pop	r17
    1672:	0f 91       	pop	r16
    1674:	ff 90       	pop	r15
    1676:	ef 90       	pop	r14
    1678:	df 90       	pop	r13
    167a:	cf 90       	pop	r12
    167c:	bf 90       	pop	r11
    167e:	af 90       	pop	r10
    1680:	9f 90       	pop	r9
    1682:	8f 90       	pop	r8
    1684:	7f 90       	pop	r7
    1686:	6f 90       	pop	r6
    1688:	5f 90       	pop	r5
    168a:	4f 90       	pop	r4
    168c:	3f 90       	pop	r3
    168e:	2f 90       	pop	r2
    1690:	1f 90       	pop	r1
    1692:	0f 90       	pop	r0
    1694:	0f be       	out	0x3f, r0	; 63
    1696:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1698:	08 95       	ret

0000169a <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
    169a:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <vPortYieldFromTick>
		asm volatile ( "reti" );
    169e:	18 95       	reti

000016a0 <prvGetDisinheritPriorityAfterTimeout>:
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
}
    16a0:	dc 01       	movw	r26, r24
    16a2:	51 96       	adiw	r26, 0x11	; 17
    16a4:	2c 91       	ld	r18, X
    16a6:	51 97       	sbiw	r26, 0x11	; 17
    16a8:	22 23       	and	r18, r18
    16aa:	41 f0       	breq	.+16     	; 0x16bc <prvGetDisinheritPriorityAfterTimeout+0x1c>
    16ac:	56 96       	adiw	r26, 0x16	; 22
    16ae:	ed 91       	ld	r30, X+
    16b0:	fc 91       	ld	r31, X
    16b2:	57 97       	sbiw	r26, 0x17	; 23
    16b4:	90 81       	ld	r25, Z
    16b6:	83 e0       	ldi	r24, 0x03	; 3
    16b8:	89 1b       	sub	r24, r25
    16ba:	08 95       	ret
    16bc:	80 e0       	ldi	r24, 0x00	; 0
    16be:	08 95       	ret

000016c0 <prvIsQueueEmpty>:
    16c0:	0f b6       	in	r0, 0x3f	; 63
    16c2:	f8 94       	cli
    16c4:	0f 92       	push	r0
    16c6:	fc 01       	movw	r30, r24
    16c8:	82 8d       	ldd	r24, Z+26	; 0x1a
    16ca:	81 11       	cpse	r24, r1
    16cc:	02 c0       	rjmp	.+4      	; 0x16d2 <prvIsQueueEmpty+0x12>
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	01 c0       	rjmp	.+2      	; 0x16d4 <prvIsQueueEmpty+0x14>
    16d2:	80 e0       	ldi	r24, 0x00	; 0
    16d4:	0f 90       	pop	r0
    16d6:	0f be       	out	0x3f, r0	; 63
    16d8:	08 95       	ret

000016da <prvIsQueueFull>:
    16da:	0f b6       	in	r0, 0x3f	; 63
    16dc:	f8 94       	cli
    16de:	0f 92       	push	r0
    16e0:	fc 01       	movw	r30, r24
    16e2:	22 8d       	ldd	r18, Z+26	; 0x1a
    16e4:	83 8d       	ldd	r24, Z+27	; 0x1b
    16e6:	28 13       	cpse	r18, r24
    16e8:	02 c0       	rjmp	.+4      	; 0x16ee <prvIsQueueFull+0x14>
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	01 c0       	rjmp	.+2      	; 0x16f0 <prvIsQueueFull+0x16>
    16ee:	80 e0       	ldi	r24, 0x00	; 0
    16f0:	0f 90       	pop	r0
    16f2:	0f be       	out	0x3f, r0	; 63
    16f4:	08 95       	ret

000016f6 <prvCopyDataToQueue>:
    16f6:	0f 93       	push	r16
    16f8:	1f 93       	push	r17
    16fa:	cf 93       	push	r28
    16fc:	df 93       	push	r29
    16fe:	ec 01       	movw	r28, r24
    1700:	04 2f       	mov	r16, r20
    1702:	1a 8d       	ldd	r17, Y+26	; 0x1a
    1704:	4c 8d       	ldd	r20, Y+28	; 0x1c
    1706:	41 11       	cpse	r20, r1
    1708:	0c c0       	rjmp	.+24     	; 0x1722 <prvCopyDataToQueue+0x2c>
    170a:	88 81       	ld	r24, Y
    170c:	99 81       	ldd	r25, Y+1	; 0x01
    170e:	89 2b       	or	r24, r25
    1710:	09 f0       	breq	.+2      	; 0x1714 <prvCopyDataToQueue+0x1e>
    1712:	42 c0       	rjmp	.+132    	; 0x1798 <prvCopyDataToQueue+0xa2>
    1714:	8c 81       	ldd	r24, Y+4	; 0x04
    1716:	9d 81       	ldd	r25, Y+5	; 0x05
    1718:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <xTaskPriorityDisinherit>
    171c:	1d 82       	std	Y+5, r1	; 0x05
    171e:	1c 82       	std	Y+4, r1	; 0x04
    1720:	42 c0       	rjmp	.+132    	; 0x17a6 <prvCopyDataToQueue+0xb0>
    1722:	01 11       	cpse	r16, r1
    1724:	17 c0       	rjmp	.+46     	; 0x1754 <prvCopyDataToQueue+0x5e>
    1726:	50 e0       	ldi	r21, 0x00	; 0
    1728:	8a 81       	ldd	r24, Y+2	; 0x02
    172a:	9b 81       	ldd	r25, Y+3	; 0x03
    172c:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <memcpy>
    1730:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1732:	8a 81       	ldd	r24, Y+2	; 0x02
    1734:	9b 81       	ldd	r25, Y+3	; 0x03
    1736:	82 0f       	add	r24, r18
    1738:	91 1d       	adc	r25, r1
    173a:	9b 83       	std	Y+3, r25	; 0x03
    173c:	8a 83       	std	Y+2, r24	; 0x02
    173e:	2c 81       	ldd	r18, Y+4	; 0x04
    1740:	3d 81       	ldd	r19, Y+5	; 0x05
    1742:	82 17       	cp	r24, r18
    1744:	93 07       	cpc	r25, r19
    1746:	50 f1       	brcs	.+84     	; 0x179c <prvCopyDataToQueue+0xa6>
    1748:	88 81       	ld	r24, Y
    174a:	99 81       	ldd	r25, Y+1	; 0x01
    174c:	9b 83       	std	Y+3, r25	; 0x03
    174e:	8a 83       	std	Y+2, r24	; 0x02
    1750:	80 e0       	ldi	r24, 0x00	; 0
    1752:	29 c0       	rjmp	.+82     	; 0x17a6 <prvCopyDataToQueue+0xb0>
    1754:	50 e0       	ldi	r21, 0x00	; 0
    1756:	8e 81       	ldd	r24, Y+6	; 0x06
    1758:	9f 81       	ldd	r25, Y+7	; 0x07
    175a:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <memcpy>
    175e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	91 95       	neg	r25
    1764:	81 95       	neg	r24
    1766:	91 09       	sbc	r25, r1
    1768:	2e 81       	ldd	r18, Y+6	; 0x06
    176a:	3f 81       	ldd	r19, Y+7	; 0x07
    176c:	28 0f       	add	r18, r24
    176e:	39 1f       	adc	r19, r25
    1770:	3f 83       	std	Y+7, r19	; 0x07
    1772:	2e 83       	std	Y+6, r18	; 0x06
    1774:	48 81       	ld	r20, Y
    1776:	59 81       	ldd	r21, Y+1	; 0x01
    1778:	24 17       	cp	r18, r20
    177a:	35 07       	cpc	r19, r21
    177c:	30 f4       	brcc	.+12     	; 0x178a <prvCopyDataToQueue+0x94>
    177e:	2c 81       	ldd	r18, Y+4	; 0x04
    1780:	3d 81       	ldd	r19, Y+5	; 0x05
    1782:	82 0f       	add	r24, r18
    1784:	93 1f       	adc	r25, r19
    1786:	9f 83       	std	Y+7, r25	; 0x07
    1788:	8e 83       	std	Y+6, r24	; 0x06
    178a:	02 30       	cpi	r16, 0x02	; 2
    178c:	49 f4       	brne	.+18     	; 0x17a0 <prvCopyDataToQueue+0xaa>
    178e:	11 23       	and	r17, r17
    1790:	49 f0       	breq	.+18     	; 0x17a4 <prvCopyDataToQueue+0xae>
    1792:	11 50       	subi	r17, 0x01	; 1
    1794:	80 e0       	ldi	r24, 0x00	; 0
    1796:	07 c0       	rjmp	.+14     	; 0x17a6 <prvCopyDataToQueue+0xb0>
    1798:	80 e0       	ldi	r24, 0x00	; 0
    179a:	05 c0       	rjmp	.+10     	; 0x17a6 <prvCopyDataToQueue+0xb0>
    179c:	80 e0       	ldi	r24, 0x00	; 0
    179e:	03 c0       	rjmp	.+6      	; 0x17a6 <prvCopyDataToQueue+0xb0>
    17a0:	80 e0       	ldi	r24, 0x00	; 0
    17a2:	01 c0       	rjmp	.+2      	; 0x17a6 <prvCopyDataToQueue+0xb0>
    17a4:	80 e0       	ldi	r24, 0x00	; 0
    17a6:	1f 5f       	subi	r17, 0xFF	; 255
    17a8:	1a 8f       	std	Y+26, r17	; 0x1a
    17aa:	df 91       	pop	r29
    17ac:	cf 91       	pop	r28
    17ae:	1f 91       	pop	r17
    17b0:	0f 91       	pop	r16
    17b2:	08 95       	ret

000017b4 <prvCopyDataFromQueue>:
    17b4:	fc 01       	movw	r30, r24
    17b6:	44 8d       	ldd	r20, Z+28	; 0x1c
    17b8:	44 23       	and	r20, r20
    17ba:	a9 f0       	breq	.+42     	; 0x17e6 <prvCopyDataFromQueue+0x32>
    17bc:	50 e0       	ldi	r21, 0x00	; 0
    17be:	26 81       	ldd	r18, Z+6	; 0x06
    17c0:	37 81       	ldd	r19, Z+7	; 0x07
    17c2:	24 0f       	add	r18, r20
    17c4:	35 1f       	adc	r19, r21
    17c6:	37 83       	std	Z+7, r19	; 0x07
    17c8:	26 83       	std	Z+6, r18	; 0x06
    17ca:	84 81       	ldd	r24, Z+4	; 0x04
    17cc:	95 81       	ldd	r25, Z+5	; 0x05
    17ce:	28 17       	cp	r18, r24
    17d0:	39 07       	cpc	r19, r25
    17d2:	20 f0       	brcs	.+8      	; 0x17dc <prvCopyDataFromQueue+0x28>
    17d4:	80 81       	ld	r24, Z
    17d6:	91 81       	ldd	r25, Z+1	; 0x01
    17d8:	97 83       	std	Z+7, r25	; 0x07
    17da:	86 83       	std	Z+6, r24	; 0x06
    17dc:	cb 01       	movw	r24, r22
    17de:	66 81       	ldd	r22, Z+6	; 0x06
    17e0:	77 81       	ldd	r23, Z+7	; 0x07
    17e2:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <memcpy>
    17e6:	08 95       	ret

000017e8 <prvUnlockQueue>:
    17e8:	1f 93       	push	r17
    17ea:	cf 93       	push	r28
    17ec:	df 93       	push	r29
    17ee:	ec 01       	movw	r28, r24
    17f0:	0f b6       	in	r0, 0x3f	; 63
    17f2:	f8 94       	cli
    17f4:	0f 92       	push	r0
    17f6:	1e 8d       	ldd	r17, Y+30	; 0x1e
    17f8:	0b c0       	rjmp	.+22     	; 0x1810 <prvUnlockQueue+0x28>
    17fa:	89 89       	ldd	r24, Y+17	; 0x11
    17fc:	88 23       	and	r24, r24
    17fe:	51 f0       	breq	.+20     	; 0x1814 <prvUnlockQueue+0x2c>
    1800:	ce 01       	movw	r24, r28
    1802:	41 96       	adiw	r24, 0x11	; 17
    1804:	0e 94 72 14 	call	0x28e4	; 0x28e4 <xTaskRemoveFromEventList>
    1808:	81 11       	cpse	r24, r1
    180a:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <vTaskMissedYield>
    180e:	11 50       	subi	r17, 0x01	; 1
    1810:	11 16       	cp	r1, r17
    1812:	9c f3       	brlt	.-26     	; 0x17fa <prvUnlockQueue+0x12>
    1814:	8f ef       	ldi	r24, 0xFF	; 255
    1816:	8e 8f       	std	Y+30, r24	; 0x1e
    1818:	0f 90       	pop	r0
    181a:	0f be       	out	0x3f, r0	; 63
    181c:	0f b6       	in	r0, 0x3f	; 63
    181e:	f8 94       	cli
    1820:	0f 92       	push	r0
    1822:	1d 8d       	ldd	r17, Y+29	; 0x1d
    1824:	0b c0       	rjmp	.+22     	; 0x183c <prvUnlockQueue+0x54>
    1826:	88 85       	ldd	r24, Y+8	; 0x08
    1828:	88 23       	and	r24, r24
    182a:	51 f0       	breq	.+20     	; 0x1840 <prvUnlockQueue+0x58>
    182c:	ce 01       	movw	r24, r28
    182e:	08 96       	adiw	r24, 0x08	; 8
    1830:	0e 94 72 14 	call	0x28e4	; 0x28e4 <xTaskRemoveFromEventList>
    1834:	81 11       	cpse	r24, r1
    1836:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <vTaskMissedYield>
    183a:	11 50       	subi	r17, 0x01	; 1
    183c:	11 16       	cp	r1, r17
    183e:	9c f3       	brlt	.-26     	; 0x1826 <prvUnlockQueue+0x3e>
    1840:	8f ef       	ldi	r24, 0xFF	; 255
    1842:	8d 8f       	std	Y+29, r24	; 0x1d
    1844:	0f 90       	pop	r0
    1846:	0f be       	out	0x3f, r0	; 63
    1848:	df 91       	pop	r29
    184a:	cf 91       	pop	r28
    184c:	1f 91       	pop	r17
    184e:	08 95       	ret

00001850 <xQueueGenericReset>:
    1850:	0f 93       	push	r16
    1852:	1f 93       	push	r17
    1854:	cf 93       	push	r28
    1856:	df 93       	push	r29
    1858:	fc 01       	movw	r30, r24
    185a:	36 2f       	mov	r19, r22
    185c:	89 2b       	or	r24, r25
    185e:	09 f4       	brne	.+2      	; 0x1862 <xQueueGenericReset+0x12>
    1860:	4d c0       	rjmp	.+154    	; 0x18fc <xQueueGenericReset+0xac>
    1862:	23 8d       	ldd	r18, Z+27	; 0x1b
    1864:	22 23       	and	r18, r18
    1866:	09 f4       	brne	.+2      	; 0x186a <xQueueGenericReset+0x1a>
    1868:	4b c0       	rjmp	.+150    	; 0x1900 <xQueueGenericReset+0xb0>
    186a:	02 2f       	mov	r16, r18
    186c:	10 e0       	ldi	r17, 0x00	; 0
    186e:	8f ef       	ldi	r24, 0xFF	; 255
    1870:	9f ef       	ldi	r25, 0xFF	; 255
    1872:	b8 01       	movw	r22, r16
    1874:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <__udivmodhi4>
    1878:	44 8d       	ldd	r20, Z+28	; 0x1c
    187a:	84 2f       	mov	r24, r20
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	68 17       	cp	r22, r24
    1880:	79 07       	cpc	r23, r25
    1882:	08 f4       	brcc	.+2      	; 0x1886 <xQueueGenericReset+0x36>
    1884:	3f c0       	rjmp	.+126    	; 0x1904 <xQueueGenericReset+0xb4>
    1886:	ef 01       	movw	r28, r30
    1888:	0f b6       	in	r0, 0x3f	; 63
    188a:	f8 94       	cli
    188c:	0f 92       	push	r0
    188e:	60 81       	ld	r22, Z
    1890:	71 81       	ldd	r23, Z+1	; 0x01
    1892:	fb 01       	movw	r30, r22
    1894:	24 9f       	mul	r18, r20
    1896:	e0 0d       	add	r30, r0
    1898:	f1 1d       	adc	r31, r1
    189a:	11 24       	eor	r1, r1
    189c:	fd 83       	std	Y+5, r31	; 0x05
    189e:	ec 83       	std	Y+4, r30	; 0x04
    18a0:	1a 8e       	std	Y+26, r1	; 0x1a
    18a2:	7b 83       	std	Y+3, r23	; 0x03
    18a4:	6a 83       	std	Y+2, r22	; 0x02
    18a6:	01 50       	subi	r16, 0x01	; 1
    18a8:	11 09       	sbc	r17, r1
    18aa:	80 9f       	mul	r24, r16
    18ac:	a0 01       	movw	r20, r0
    18ae:	81 9f       	mul	r24, r17
    18b0:	50 0d       	add	r21, r0
    18b2:	90 9f       	mul	r25, r16
    18b4:	50 0d       	add	r21, r0
    18b6:	11 24       	eor	r1, r1
    18b8:	cb 01       	movw	r24, r22
    18ba:	84 0f       	add	r24, r20
    18bc:	95 1f       	adc	r25, r21
    18be:	9f 83       	std	Y+7, r25	; 0x07
    18c0:	8e 83       	std	Y+6, r24	; 0x06
    18c2:	8f ef       	ldi	r24, 0xFF	; 255
    18c4:	8d 8f       	std	Y+29, r24	; 0x1d
    18c6:	8e 8f       	std	Y+30, r24	; 0x1e
    18c8:	31 11       	cpse	r19, r1
    18ca:	0c c0       	rjmp	.+24     	; 0x18e4 <xQueueGenericReset+0x94>
    18cc:	88 85       	ldd	r24, Y+8	; 0x08
    18ce:	88 23       	and	r24, r24
    18d0:	89 f0       	breq	.+34     	; 0x18f4 <xQueueGenericReset+0xa4>
    18d2:	ce 01       	movw	r24, r28
    18d4:	08 96       	adiw	r24, 0x08	; 8
    18d6:	0e 94 72 14 	call	0x28e4	; 0x28e4 <xTaskRemoveFromEventList>
    18da:	88 23       	and	r24, r24
    18dc:	59 f0       	breq	.+22     	; 0x18f4 <xQueueGenericReset+0xa4>
    18de:	0e 94 98 0a 	call	0x1530	; 0x1530 <vPortYield>
    18e2:	08 c0       	rjmp	.+16     	; 0x18f4 <xQueueGenericReset+0xa4>
    18e4:	ce 01       	movw	r24, r28
    18e6:	08 96       	adiw	r24, 0x08	; 8
    18e8:	0e 94 69 09 	call	0x12d2	; 0x12d2 <vListInitialise>
    18ec:	ce 01       	movw	r24, r28
    18ee:	41 96       	adiw	r24, 0x11	; 17
    18f0:	0e 94 69 09 	call	0x12d2	; 0x12d2 <vListInitialise>
    18f4:	0f 90       	pop	r0
    18f6:	0f be       	out	0x3f, r0	; 63
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	05 c0       	rjmp	.+10     	; 0x1906 <xQueueGenericReset+0xb6>
    18fc:	80 e0       	ldi	r24, 0x00	; 0
    18fe:	03 c0       	rjmp	.+6      	; 0x1906 <xQueueGenericReset+0xb6>
    1900:	80 e0       	ldi	r24, 0x00	; 0
    1902:	01 c0       	rjmp	.+2      	; 0x1906 <xQueueGenericReset+0xb6>
    1904:	80 e0       	ldi	r24, 0x00	; 0
    1906:	df 91       	pop	r29
    1908:	cf 91       	pop	r28
    190a:	1f 91       	pop	r17
    190c:	0f 91       	pop	r16
    190e:	08 95       	ret

00001910 <prvInitialiseNewQueue>:
    1910:	0f 93       	push	r16
    1912:	1f 93       	push	r17
    1914:	f8 01       	movw	r30, r16
    1916:	61 11       	cpse	r22, r1
    1918:	03 c0       	rjmp	.+6      	; 0x1920 <prvInitialiseNewQueue+0x10>
    191a:	11 83       	std	Z+1, r17	; 0x01
    191c:	00 83       	st	Z, r16
    191e:	02 c0       	rjmp	.+4      	; 0x1924 <prvInitialiseNewQueue+0x14>
    1920:	51 83       	std	Z+1, r21	; 0x01
    1922:	40 83       	st	Z, r20
    1924:	83 8f       	std	Z+27, r24	; 0x1b
    1926:	64 8f       	std	Z+28, r22	; 0x1c
    1928:	61 e0       	ldi	r22, 0x01	; 1
    192a:	cf 01       	movw	r24, r30
    192c:	0e 94 28 0c 	call	0x1850	; 0x1850 <xQueueGenericReset>
    1930:	1f 91       	pop	r17
    1932:	0f 91       	pop	r16
    1934:	08 95       	ret

00001936 <xQueueGenericCreate>:
    1936:	df 92       	push	r13
    1938:	ef 92       	push	r14
    193a:	ff 92       	push	r15
    193c:	0f 93       	push	r16
    193e:	1f 93       	push	r17
    1940:	cf 93       	push	r28
    1942:	df 93       	push	r29
    1944:	38 2f       	mov	r19, r24
    1946:	e6 2f       	mov	r30, r22
    1948:	88 23       	and	r24, r24
    194a:	29 f1       	breq	.+74     	; 0x1996 <xQueueGenericCreate+0x60>
    194c:	68 2f       	mov	r22, r24
    194e:	70 e0       	ldi	r23, 0x00	; 0
    1950:	8f ef       	ldi	r24, 0xFF	; 255
    1952:	9f ef       	ldi	r25, 0xFF	; 255
    1954:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <__udivmodhi4>
    1958:	8e 2f       	mov	r24, r30
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	68 17       	cp	r22, r24
    195e:	79 07       	cpc	r23, r25
    1960:	e8 f0       	brcs	.+58     	; 0x199c <xQueueGenericCreate+0x66>
    1962:	3e 9f       	mul	r19, r30
    1964:	c0 01       	movw	r24, r0
    1966:	11 24       	eor	r1, r1
    1968:	81 3e       	cpi	r24, 0xE1	; 225
    196a:	2f ef       	ldi	r18, 0xFF	; 255
    196c:	92 07       	cpc	r25, r18
    196e:	c8 f4       	brcc	.+50     	; 0x19a2 <xQueueGenericCreate+0x6c>
    1970:	d4 2e       	mov	r13, r20
    1972:	de 2f       	mov	r29, r30
    1974:	c3 2f       	mov	r28, r19
    1976:	4f 96       	adiw	r24, 0x1f	; 31
    1978:	0e 94 9a 08 	call	0x1134	; 0x1134 <pvPortMalloc>
    197c:	7c 01       	movw	r14, r24
    197e:	00 97       	sbiw	r24, 0x00	; 0
    1980:	91 f0       	breq	.+36     	; 0x19a6 <xQueueGenericCreate+0x70>
    1982:	8c 01       	movw	r16, r24
    1984:	2d 2d       	mov	r18, r13
    1986:	ac 01       	movw	r20, r24
    1988:	41 5e       	subi	r20, 0xE1	; 225
    198a:	5f 4f       	sbci	r21, 0xFF	; 255
    198c:	6d 2f       	mov	r22, r29
    198e:	8c 2f       	mov	r24, r28
    1990:	0e 94 88 0c 	call	0x1910	; 0x1910 <prvInitialiseNewQueue>
    1994:	08 c0       	rjmp	.+16     	; 0x19a6 <xQueueGenericCreate+0x70>
    1996:	e1 2c       	mov	r14, r1
    1998:	f1 2c       	mov	r15, r1
    199a:	05 c0       	rjmp	.+10     	; 0x19a6 <xQueueGenericCreate+0x70>
    199c:	e1 2c       	mov	r14, r1
    199e:	f1 2c       	mov	r15, r1
    19a0:	02 c0       	rjmp	.+4      	; 0x19a6 <xQueueGenericCreate+0x70>
    19a2:	e1 2c       	mov	r14, r1
    19a4:	f1 2c       	mov	r15, r1
    19a6:	c7 01       	movw	r24, r14
    19a8:	df 91       	pop	r29
    19aa:	cf 91       	pop	r28
    19ac:	1f 91       	pop	r17
    19ae:	0f 91       	pop	r16
    19b0:	ff 90       	pop	r15
    19b2:	ef 90       	pop	r14
    19b4:	df 90       	pop	r13
    19b6:	08 95       	ret

000019b8 <xQueueGenericSend>:
    19b8:	cf 92       	push	r12
    19ba:	df 92       	push	r13
    19bc:	ef 92       	push	r14
    19be:	ff 92       	push	r15
    19c0:	0f 93       	push	r16
    19c2:	1f 93       	push	r17
    19c4:	cf 93       	push	r28
    19c6:	df 93       	push	r29
    19c8:	00 d0       	rcall	.+0      	; 0x19ca <xQueueGenericSend+0x12>
    19ca:	00 d0       	rcall	.+0      	; 0x19cc <xQueueGenericSend+0x14>
    19cc:	1f 92       	push	r1
    19ce:	cd b7       	in	r28, 0x3d	; 61
    19d0:	de b7       	in	r29, 0x3e	; 62
    19d2:	8c 01       	movw	r16, r24
    19d4:	7b 01       	movw	r14, r22
    19d6:	5d 83       	std	Y+5, r21	; 0x05
    19d8:	4c 83       	std	Y+4, r20	; 0x04
    19da:	c2 2e       	mov	r12, r18
    19dc:	d1 2c       	mov	r13, r1
    19de:	0f b6       	in	r0, 0x3f	; 63
    19e0:	f8 94       	cli
    19e2:	0f 92       	push	r0
    19e4:	f8 01       	movw	r30, r16
    19e6:	92 8d       	ldd	r25, Z+26	; 0x1a
    19e8:	83 8d       	ldd	r24, Z+27	; 0x1b
    19ea:	98 17       	cp	r25, r24
    19ec:	18 f0       	brcs	.+6      	; 0x19f4 <xQueueGenericSend+0x3c>
    19ee:	f2 e0       	ldi	r31, 0x02	; 2
    19f0:	cf 12       	cpse	r12, r31
    19f2:	19 c0       	rjmp	.+50     	; 0x1a26 <xQueueGenericSend+0x6e>
    19f4:	4c 2d       	mov	r20, r12
    19f6:	b7 01       	movw	r22, r14
    19f8:	c8 01       	movw	r24, r16
    19fa:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <prvCopyDataToQueue>
    19fe:	f8 01       	movw	r30, r16
    1a00:	91 89       	ldd	r25, Z+17	; 0x11
    1a02:	99 23       	and	r25, r25
    1a04:	49 f0       	breq	.+18     	; 0x1a18 <xQueueGenericSend+0x60>
    1a06:	c8 01       	movw	r24, r16
    1a08:	41 96       	adiw	r24, 0x11	; 17
    1a0a:	0e 94 72 14 	call	0x28e4	; 0x28e4 <xTaskRemoveFromEventList>
    1a0e:	88 23       	and	r24, r24
    1a10:	31 f0       	breq	.+12     	; 0x1a1e <xQueueGenericSend+0x66>
    1a12:	0e 94 98 0a 	call	0x1530	; 0x1530 <vPortYield>
    1a16:	03 c0       	rjmp	.+6      	; 0x1a1e <xQueueGenericSend+0x66>
    1a18:	81 11       	cpse	r24, r1
    1a1a:	0e 94 98 0a 	call	0x1530	; 0x1530 <vPortYield>
    1a1e:	0f 90       	pop	r0
    1a20:	0f be       	out	0x3f, r0	; 63
    1a22:	81 e0       	ldi	r24, 0x01	; 1
    1a24:	4d c0       	rjmp	.+154    	; 0x1ac0 <xQueueGenericSend+0x108>
    1a26:	8c 81       	ldd	r24, Y+4	; 0x04
    1a28:	9d 81       	ldd	r25, Y+5	; 0x05
    1a2a:	89 2b       	or	r24, r25
    1a2c:	21 f4       	brne	.+8      	; 0x1a36 <xQueueGenericSend+0x7e>
    1a2e:	0f 90       	pop	r0
    1a30:	0f be       	out	0x3f, r0	; 63
    1a32:	80 e0       	ldi	r24, 0x00	; 0
    1a34:	45 c0       	rjmp	.+138    	; 0x1ac0 <xQueueGenericSend+0x108>
    1a36:	d1 10       	cpse	r13, r1
    1a38:	06 c0       	rjmp	.+12     	; 0x1a46 <xQueueGenericSend+0x8e>
    1a3a:	ce 01       	movw	r24, r28
    1a3c:	01 96       	adiw	r24, 0x01	; 1
    1a3e:	0e 94 d5 15 	call	0x2baa	; 0x2baa <vTaskInternalSetTimeOutState>
    1a42:	dd 24       	eor	r13, r13
    1a44:	d3 94       	inc	r13
    1a46:	0f 90       	pop	r0
    1a48:	0f be       	out	0x3f, r0	; 63
    1a4a:	0e 94 a0 11 	call	0x2340	; 0x2340 <vTaskSuspendAll>
    1a4e:	0f b6       	in	r0, 0x3f	; 63
    1a50:	f8 94       	cli
    1a52:	0f 92       	push	r0
    1a54:	f8 01       	movw	r30, r16
    1a56:	85 8d       	ldd	r24, Z+29	; 0x1d
    1a58:	8f 3f       	cpi	r24, 0xFF	; 255
    1a5a:	09 f4       	brne	.+2      	; 0x1a5e <xQueueGenericSend+0xa6>
    1a5c:	15 8e       	std	Z+29, r1	; 0x1d
    1a5e:	f8 01       	movw	r30, r16
    1a60:	86 8d       	ldd	r24, Z+30	; 0x1e
    1a62:	8f 3f       	cpi	r24, 0xFF	; 255
    1a64:	09 f4       	brne	.+2      	; 0x1a68 <xQueueGenericSend+0xb0>
    1a66:	16 8e       	std	Z+30, r1	; 0x1e
    1a68:	0f 90       	pop	r0
    1a6a:	0f be       	out	0x3f, r0	; 63
    1a6c:	be 01       	movw	r22, r28
    1a6e:	6c 5f       	subi	r22, 0xFC	; 252
    1a70:	7f 4f       	sbci	r23, 0xFF	; 255
    1a72:	ce 01       	movw	r24, r28
    1a74:	01 96       	adiw	r24, 0x01	; 1
    1a76:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <xTaskCheckForTimeOut>
    1a7a:	81 11       	cpse	r24, r1
    1a7c:	1b c0       	rjmp	.+54     	; 0x1ab4 <xQueueGenericSend+0xfc>
    1a7e:	c8 01       	movw	r24, r16
    1a80:	0e 94 6d 0b 	call	0x16da	; 0x16da <prvIsQueueFull>
    1a84:	88 23       	and	r24, r24
    1a86:	81 f0       	breq	.+32     	; 0x1aa8 <xQueueGenericSend+0xf0>
    1a88:	6c 81       	ldd	r22, Y+4	; 0x04
    1a8a:	7d 81       	ldd	r23, Y+5	; 0x05
    1a8c:	c8 01       	movw	r24, r16
    1a8e:	08 96       	adiw	r24, 0x08	; 8
    1a90:	0e 94 60 14 	call	0x28c0	; 0x28c0 <vTaskPlaceOnEventList>
    1a94:	c8 01       	movw	r24, r16
    1a96:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <prvUnlockQueue>
    1a9a:	0e 94 c0 12 	call	0x2580	; 0x2580 <xTaskResumeAll>
    1a9e:	81 11       	cpse	r24, r1
    1aa0:	9e cf       	rjmp	.-196    	; 0x19de <xQueueGenericSend+0x26>
    1aa2:	0e 94 98 0a 	call	0x1530	; 0x1530 <vPortYield>
    1aa6:	9b cf       	rjmp	.-202    	; 0x19de <xQueueGenericSend+0x26>
    1aa8:	c8 01       	movw	r24, r16
    1aaa:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <prvUnlockQueue>
    1aae:	0e 94 c0 12 	call	0x2580	; 0x2580 <xTaskResumeAll>
    1ab2:	95 cf       	rjmp	.-214    	; 0x19de <xQueueGenericSend+0x26>
    1ab4:	c8 01       	movw	r24, r16
    1ab6:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <prvUnlockQueue>
    1aba:	0e 94 c0 12 	call	0x2580	; 0x2580 <xTaskResumeAll>
    1abe:	80 e0       	ldi	r24, 0x00	; 0
    1ac0:	0f 90       	pop	r0
    1ac2:	0f 90       	pop	r0
    1ac4:	0f 90       	pop	r0
    1ac6:	0f 90       	pop	r0
    1ac8:	0f 90       	pop	r0
    1aca:	df 91       	pop	r29
    1acc:	cf 91       	pop	r28
    1ace:	1f 91       	pop	r17
    1ad0:	0f 91       	pop	r16
    1ad2:	ff 90       	pop	r15
    1ad4:	ef 90       	pop	r14
    1ad6:	df 90       	pop	r13
    1ad8:	cf 90       	pop	r12
    1ada:	08 95       	ret

00001adc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
    1adc:	cf 92       	push	r12
    1ade:	df 92       	push	r13
    1ae0:	ef 92       	push	r14
    1ae2:	ff 92       	push	r15
    1ae4:	0f 93       	push	r16
    1ae6:	1f 93       	push	r17
    1ae8:	cf 93       	push	r28
    1aea:	df 93       	push	r29
    1aec:	00 d0       	rcall	.+0      	; 0x1aee <xQueueReceive+0x12>
    1aee:	00 d0       	rcall	.+0      	; 0x1af0 <xQueueReceive+0x14>
    1af0:	1f 92       	push	r1
    1af2:	cd b7       	in	r28, 0x3d	; 61
    1af4:	de b7       	in	r29, 0x3e	; 62
    1af6:	8c 01       	movw	r16, r24
    1af8:	6b 01       	movw	r12, r22
    1afa:	5d 83       	std	Y+5, r21	; 0x05
    1afc:	4c 83       	std	Y+4, r20	; 0x04
    BaseType_t xEntryTimeSet = pdFALSE;
    1afe:	e1 2c       	mov	r14, r1
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
    1b00:	0f b6       	in	r0, 0x3f	; 63
    1b02:	f8 94       	cli
    1b04:	0f 92       	push	r0
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    1b06:	f8 01       	movw	r30, r16
    1b08:	f2 8c       	ldd	r15, Z+26	; 0x1a

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    1b0a:	ff 20       	and	r15, r15
    1b0c:	a9 f0       	breq	.+42     	; 0x1b38 <xQueueReceive+0x5c>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
    1b0e:	b6 01       	movw	r22, r12
    1b10:	c8 01       	movw	r24, r16
    1b12:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    1b16:	fa 94       	dec	r15
    1b18:	f8 01       	movw	r30, r16
    1b1a:	f2 8e       	std	Z+26, r15	; 0x1a

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1b1c:	80 85       	ldd	r24, Z+8	; 0x08
    1b1e:	88 23       	and	r24, r24
    1b20:	39 f0       	breq	.+14     	; 0x1b30 <xQueueReceive+0x54>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1b22:	c8 01       	movw	r24, r16
    1b24:	08 96       	adiw	r24, 0x08	; 8
    1b26:	0e 94 72 14 	call	0x28e4	; 0x28e4 <xTaskRemoveFromEventList>
    1b2a:	81 11       	cpse	r24, r1
                    {
                        queueYIELD_IF_USING_PREEMPTION();
    1b2c:	0e 94 98 0a 	call	0x1530	; 0x1530 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
    1b30:	0f 90       	pop	r0
    1b32:	0f be       	out	0x3f, r0	; 63
                return pdPASS;
    1b34:	81 e0       	ldi	r24, 0x01	; 1
    1b36:	53 c0       	rjmp	.+166    	; 0x1bde <xQueueReceive+0x102>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
    1b38:	8c 81       	ldd	r24, Y+4	; 0x04
    1b3a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b3c:	89 2b       	or	r24, r25
    1b3e:	21 f4       	brne	.+8      	; 0x1b48 <xQueueReceive+0x6c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
    1b40:	0f 90       	pop	r0
    1b42:	0f be       	out	0x3f, r0	; 63
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
    1b44:	80 e0       	ldi	r24, 0x00	; 0
    1b46:	4b c0       	rjmp	.+150    	; 0x1bde <xQueueReceive+0x102>
                }
                else if( xEntryTimeSet == pdFALSE )
    1b48:	e1 10       	cpse	r14, r1
    1b4a:	06 c0       	rjmp	.+12     	; 0x1b58 <xQueueReceive+0x7c>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
    1b4c:	ce 01       	movw	r24, r28
    1b4e:	01 96       	adiw	r24, 0x01	; 1
    1b50:	0e 94 d5 15 	call	0x2baa	; 0x2baa <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
    1b54:	ee 24       	eor	r14, r14
    1b56:	e3 94       	inc	r14
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
    1b58:	0f 90       	pop	r0
    1b5a:	0f be       	out	0x3f, r0	; 63

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
    1b5c:	0e 94 a0 11 	call	0x2340	; 0x2340 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
    1b60:	0f b6       	in	r0, 0x3f	; 63
    1b62:	f8 94       	cli
    1b64:	0f 92       	push	r0
    1b66:	f8 01       	movw	r30, r16
    1b68:	85 8d       	ldd	r24, Z+29	; 0x1d
    1b6a:	8f 3f       	cpi	r24, 0xFF	; 255
    1b6c:	09 f4       	brne	.+2      	; 0x1b70 <xQueueReceive+0x94>
    1b6e:	15 8e       	std	Z+29, r1	; 0x1d
    1b70:	f8 01       	movw	r30, r16
    1b72:	86 8d       	ldd	r24, Z+30	; 0x1e
    1b74:	8f 3f       	cpi	r24, 0xFF	; 255
    1b76:	09 f4       	brne	.+2      	; 0x1b7a <xQueueReceive+0x9e>
    1b78:	16 8e       	std	Z+30, r1	; 0x1e
    1b7a:	0f 90       	pop	r0
    1b7c:	0f be       	out	0x3f, r0	; 63

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1b7e:	be 01       	movw	r22, r28
    1b80:	6c 5f       	subi	r22, 0xFC	; 252
    1b82:	7f 4f       	sbci	r23, 0xFF	; 255
    1b84:	ce 01       	movw	r24, r28
    1b86:	01 96       	adiw	r24, 0x01	; 1
    1b88:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <xTaskCheckForTimeOut>
    1b8c:	81 11       	cpse	r24, r1
    1b8e:	1b c0       	rjmp	.+54     	; 0x1bc6 <xQueueReceive+0xea>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1b90:	c8 01       	movw	r24, r16
    1b92:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <prvIsQueueEmpty>
    1b96:	88 23       	and	r24, r24
    1b98:	81 f0       	breq	.+32     	; 0x1bba <xQueueReceive+0xde>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1b9a:	6c 81       	ldd	r22, Y+4	; 0x04
    1b9c:	7d 81       	ldd	r23, Y+5	; 0x05
    1b9e:	c8 01       	movw	r24, r16
    1ba0:	41 96       	adiw	r24, 0x11	; 17
    1ba2:	0e 94 60 14 	call	0x28c0	; 0x28c0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
    1ba6:	c8 01       	movw	r24, r16
    1ba8:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
    1bac:	0e 94 c0 12 	call	0x2580	; 0x2580 <xTaskResumeAll>
    1bb0:	81 11       	cpse	r24, r1
    1bb2:	a6 cf       	rjmp	.-180    	; 0x1b00 <xQueueReceive+0x24>
                {
                    portYIELD_WITHIN_API();
    1bb4:	0e 94 98 0a 	call	0x1530	; 0x1530 <vPortYield>
    1bb8:	a3 cf       	rjmp	.-186    	; 0x1b00 <xQueueReceive+0x24>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
    1bba:	c8 01       	movw	r24, r16
    1bbc:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
    1bc0:	0e 94 c0 12 	call	0x2580	; 0x2580 <xTaskResumeAll>
    1bc4:	9d cf       	rjmp	.-198    	; 0x1b00 <xQueueReceive+0x24>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
    1bc6:	c8 01       	movw	r24, r16
    1bc8:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
    1bcc:	0e 94 c0 12 	call	0x2580	; 0x2580 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1bd0:	c8 01       	movw	r24, r16
    1bd2:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <prvIsQueueEmpty>
    1bd6:	88 23       	and	r24, r24
    1bd8:	09 f4       	brne	.+2      	; 0x1bdc <xQueueReceive+0x100>
    1bda:	92 cf       	rjmp	.-220    	; 0x1b00 <xQueueReceive+0x24>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
    1bdc:	80 e0       	ldi	r24, 0x00	; 0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
    1bde:	0f 90       	pop	r0
    1be0:	0f 90       	pop	r0
    1be2:	0f 90       	pop	r0
    1be4:	0f 90       	pop	r0
    1be6:	0f 90       	pop	r0
    1be8:	df 91       	pop	r29
    1bea:	cf 91       	pop	r28
    1bec:	1f 91       	pop	r17
    1bee:	0f 91       	pop	r16
    1bf0:	ff 90       	pop	r15
    1bf2:	ef 90       	pop	r14
    1bf4:	df 90       	pop	r13
    1bf6:	cf 90       	pop	r12
    1bf8:	08 95       	ret

00001bfa <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
    1bfa:	ef 92       	push	r14
    1bfc:	ff 92       	push	r15
    1bfe:	0f 93       	push	r16
    1c00:	1f 93       	push	r17
    1c02:	cf 93       	push	r28
    1c04:	df 93       	push	r29
    1c06:	00 d0       	rcall	.+0      	; 0x1c08 <xQueueSemaphoreTake+0xe>
    1c08:	00 d0       	rcall	.+0      	; 0x1c0a <xQueueSemaphoreTake+0x10>
    1c0a:	1f 92       	push	r1
    1c0c:	cd b7       	in	r28, 0x3d	; 61
    1c0e:	de b7       	in	r29, 0x3e	; 62
    1c10:	8c 01       	movw	r16, r24
    1c12:	7d 83       	std	Y+5, r23	; 0x05
    1c14:	6c 83       	std	Y+4, r22	; 0x04
    BaseType_t xEntryTimeSet = pdFALSE;
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
    1c16:	e1 2c       	mov	r14, r1
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
    BaseType_t xEntryTimeSet = pdFALSE;
    1c18:	f1 2c       	mov	r15, r1
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
    1c1a:	0f b6       	in	r0, 0x3f	; 63
    1c1c:	f8 94       	cli
    1c1e:	0f 92       	push	r0
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
    1c20:	f8 01       	movw	r30, r16
    1c22:	82 8d       	ldd	r24, Z+26	; 0x1a

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
    1c24:	88 23       	and	r24, r24
    1c26:	d1 f0       	breq	.+52     	; 0x1c5c <xQueueSemaphoreTake+0x62>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
    1c28:	81 50       	subi	r24, 0x01	; 1
    1c2a:	82 8f       	std	Z+26, r24	; 0x1a

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1c2c:	80 81       	ld	r24, Z
    1c2e:	91 81       	ldd	r25, Z+1	; 0x01
    1c30:	89 2b       	or	r24, r25
    1c32:	29 f4       	brne	.+10     	; 0x1c3e <xQueueSemaphoreTake+0x44>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
    1c34:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <pvTaskIncrementMutexHeldCount>
    1c38:	f8 01       	movw	r30, r16
    1c3a:	95 83       	std	Z+5, r25	; 0x05
    1c3c:	84 83       	std	Z+4, r24	; 0x04
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1c3e:	f8 01       	movw	r30, r16
    1c40:	80 85       	ldd	r24, Z+8	; 0x08
    1c42:	88 23       	and	r24, r24
    1c44:	39 f0       	breq	.+14     	; 0x1c54 <xQueueSemaphoreTake+0x5a>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1c46:	c8 01       	movw	r24, r16
    1c48:	08 96       	adiw	r24, 0x08	; 8
    1c4a:	0e 94 72 14 	call	0x28e4	; 0x28e4 <xTaskRemoveFromEventList>
    1c4e:	81 11       	cpse	r24, r1
                    {
                        queueYIELD_IF_USING_PREEMPTION();
    1c50:	0e 94 98 0a 	call	0x1530	; 0x1530 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
    1c54:	0f 90       	pop	r0
    1c56:	0f be       	out	0x3f, r0	; 63
                return pdPASS;
    1c58:	81 e0       	ldi	r24, 0x01	; 1
    1c5a:	74 c0       	rjmp	.+232    	; 0x1d44 <xQueueSemaphoreTake+0x14a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
    1c5c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c5e:	9d 81       	ldd	r25, Y+5	; 0x05
    1c60:	89 2b       	or	r24, r25
    1c62:	21 f4       	brne	.+8      	; 0x1c6c <xQueueSemaphoreTake+0x72>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
    1c64:	0f 90       	pop	r0
    1c66:	0f be       	out	0x3f, r0	; 63
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
    1c68:	80 e0       	ldi	r24, 0x00	; 0
    1c6a:	6c c0       	rjmp	.+216    	; 0x1d44 <xQueueSemaphoreTake+0x14a>
                }
                else if( xEntryTimeSet == pdFALSE )
    1c6c:	f1 10       	cpse	r15, r1
    1c6e:	06 c0       	rjmp	.+12     	; 0x1c7c <xQueueSemaphoreTake+0x82>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
    1c70:	ce 01       	movw	r24, r28
    1c72:	01 96       	adiw	r24, 0x01	; 1
    1c74:	0e 94 d5 15 	call	0x2baa	; 0x2baa <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
    1c78:	ff 24       	eor	r15, r15
    1c7a:	f3 94       	inc	r15
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
    1c7c:	0f 90       	pop	r0
    1c7e:	0f be       	out	0x3f, r0	; 63

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
    1c80:	0e 94 a0 11 	call	0x2340	; 0x2340 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
    1c84:	0f b6       	in	r0, 0x3f	; 63
    1c86:	f8 94       	cli
    1c88:	0f 92       	push	r0
    1c8a:	f8 01       	movw	r30, r16
    1c8c:	85 8d       	ldd	r24, Z+29	; 0x1d
    1c8e:	8f 3f       	cpi	r24, 0xFF	; 255
    1c90:	09 f4       	brne	.+2      	; 0x1c94 <xQueueSemaphoreTake+0x9a>
    1c92:	15 8e       	std	Z+29, r1	; 0x1d
    1c94:	f8 01       	movw	r30, r16
    1c96:	86 8d       	ldd	r24, Z+30	; 0x1e
    1c98:	8f 3f       	cpi	r24, 0xFF	; 255
    1c9a:	09 f4       	brne	.+2      	; 0x1c9e <xQueueSemaphoreTake+0xa4>
    1c9c:	16 8e       	std	Z+30, r1	; 0x1e
    1c9e:	0f 90       	pop	r0
    1ca0:	0f be       	out	0x3f, r0	; 63

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1ca2:	be 01       	movw	r22, r28
    1ca4:	6c 5f       	subi	r22, 0xFC	; 252
    1ca6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ca8:	ce 01       	movw	r24, r28
    1caa:	01 96       	adiw	r24, 0x01	; 1
    1cac:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <xTaskCheckForTimeOut>
    1cb0:	81 11       	cpse	r24, r1
    1cb2:	2a c0       	rjmp	.+84     	; 0x1d08 <xQueueSemaphoreTake+0x10e>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1cb4:	c8 01       	movw	r24, r16
    1cb6:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <prvIsQueueEmpty>
    1cba:	88 23       	and	r24, r24
    1cbc:	f9 f0       	breq	.+62     	; 0x1cfc <xQueueSemaphoreTake+0x102>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1cbe:	f8 01       	movw	r30, r16
    1cc0:	80 81       	ld	r24, Z
    1cc2:	91 81       	ldd	r25, Z+1	; 0x01
    1cc4:	89 2b       	or	r24, r25
    1cc6:	51 f4       	brne	.+20     	; 0x1cdc <xQueueSemaphoreTake+0xe2>
                    {
                        taskENTER_CRITICAL();
    1cc8:	0f b6       	in	r0, 0x3f	; 63
    1cca:	f8 94       	cli
    1ccc:	0f 92       	push	r0
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
    1cce:	84 81       	ldd	r24, Z+4	; 0x04
    1cd0:	95 81       	ldd	r25, Z+5	; 0x05
    1cd2:	0e 94 23 16 	call	0x2c46	; 0x2c46 <xTaskPriorityInherit>
    1cd6:	e8 2e       	mov	r14, r24
                        }
                        taskEXIT_CRITICAL();
    1cd8:	0f 90       	pop	r0
    1cda:	0f be       	out	0x3f, r0	; 63
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1cdc:	6c 81       	ldd	r22, Y+4	; 0x04
    1cde:	7d 81       	ldd	r23, Y+5	; 0x05
    1ce0:	c8 01       	movw	r24, r16
    1ce2:	41 96       	adiw	r24, 0x11	; 17
    1ce4:	0e 94 60 14 	call	0x28c0	; 0x28c0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
    1ce8:	c8 01       	movw	r24, r16
    1cea:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
    1cee:	0e 94 c0 12 	call	0x2580	; 0x2580 <xTaskResumeAll>
    1cf2:	81 11       	cpse	r24, r1
    1cf4:	92 cf       	rjmp	.-220    	; 0x1c1a <xQueueSemaphoreTake+0x20>
                {
                    portYIELD_WITHIN_API();
    1cf6:	0e 94 98 0a 	call	0x1530	; 0x1530 <vPortYield>
    1cfa:	8f cf       	rjmp	.-226    	; 0x1c1a <xQueueSemaphoreTake+0x20>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
    1cfc:	c8 01       	movw	r24, r16
    1cfe:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
    1d02:	0e 94 c0 12 	call	0x2580	; 0x2580 <xTaskResumeAll>
    1d06:	89 cf       	rjmp	.-238    	; 0x1c1a <xQueueSemaphoreTake+0x20>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
    1d08:	c8 01       	movw	r24, r16
    1d0a:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
    1d0e:	0e 94 c0 12 	call	0x2580	; 0x2580 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1d12:	c8 01       	movw	r24, r16
    1d14:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <prvIsQueueEmpty>
    1d18:	88 23       	and	r24, r24
    1d1a:	09 f4       	brne	.+2      	; 0x1d1e <xQueueSemaphoreTake+0x124>
    1d1c:	7e cf       	rjmp	.-260    	; 0x1c1a <xQueueSemaphoreTake+0x20>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
    1d1e:	ee 20       	and	r14, r14
    1d20:	81 f0       	breq	.+32     	; 0x1d42 <xQueueSemaphoreTake+0x148>
                    {
                        taskENTER_CRITICAL();
    1d22:	0f b6       	in	r0, 0x3f	; 63
    1d24:	f8 94       	cli
    1d26:	0f 92       	push	r0
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
    1d28:	c8 01       	movw	r24, r16
    1d2a:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <prvGetDisinheritPriorityAfterTimeout>
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
    1d2e:	68 2f       	mov	r22, r24
    1d30:	f8 01       	movw	r30, r16
    1d32:	84 81       	ldd	r24, Z+4	; 0x04
    1d34:	95 81       	ldd	r25, Z+5	; 0x05
    1d36:	0e 94 1a 17 	call	0x2e34	; 0x2e34 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
    1d3a:	0f 90       	pop	r0
    1d3c:	0f be       	out	0x3f, r0	; 63
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
    1d3e:	80 e0       	ldi	r24, 0x00	; 0
    1d40:	01 c0       	rjmp	.+2      	; 0x1d44 <xQueueSemaphoreTake+0x14a>
    1d42:	80 e0       	ldi	r24, 0x00	; 0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
    1d44:	0f 90       	pop	r0
    1d46:	0f 90       	pop	r0
    1d48:	0f 90       	pop	r0
    1d4a:	0f 90       	pop	r0
    1d4c:	0f 90       	pop	r0
    1d4e:	df 91       	pop	r29
    1d50:	cf 91       	pop	r28
    1d52:	1f 91       	pop	r17
    1d54:	0f 91       	pop	r16
    1d56:	ff 90       	pop	r15
    1d58:	ef 90       	pop	r14
    1d5a:	08 95       	ret

00001d5c <prvTaskIsTaskSuspended>:
    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

    return uxReturn;
}
    1d5c:	fc 01       	movw	r30, r24
    1d5e:	22 85       	ldd	r18, Z+10	; 0x0a
    1d60:	33 85       	ldd	r19, Z+11	; 0x0b
    1d62:	2a 51       	subi	r18, 0x1A	; 26
    1d64:	37 40       	sbci	r19, 0x07	; 7
    1d66:	59 f4       	brne	.+22     	; 0x1d7e <prvTaskIsTaskSuspended+0x22>
    1d68:	fc 01       	movw	r30, r24
    1d6a:	84 89       	ldd	r24, Z+20	; 0x14
    1d6c:	95 89       	ldd	r25, Z+21	; 0x15
    1d6e:	f7 e0       	ldi	r31, 0x07	; 7
    1d70:	8d 32       	cpi	r24, 0x2D	; 45
    1d72:	9f 07       	cpc	r25, r31
    1d74:	31 f0       	breq	.+12     	; 0x1d82 <prvTaskIsTaskSuspended+0x26>
    1d76:	89 2b       	or	r24, r25
    1d78:	31 f0       	breq	.+12     	; 0x1d86 <prvTaskIsTaskSuspended+0x2a>
    1d7a:	80 e0       	ldi	r24, 0x00	; 0
    1d7c:	08 95       	ret
    1d7e:	80 e0       	ldi	r24, 0x00	; 0
    1d80:	08 95       	ret
    1d82:	80 e0       	ldi	r24, 0x00	; 0
    1d84:	08 95       	ret
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    1d88:	08 95       	ret

00001d8a <prvResetNextTaskUnblockTime>:
    1d8a:	e0 91 38 07 	lds	r30, 0x0738	; 0x800738 <pxDelayedTaskList>
    1d8e:	f0 91 39 07 	lds	r31, 0x0739	; 0x800739 <pxDelayedTaskList+0x1>
    1d92:	80 81       	ld	r24, Z
    1d94:	81 11       	cpse	r24, r1
    1d96:	07 c0       	rjmp	.+14     	; 0x1da6 <prvResetNextTaskUnblockTime+0x1c>
    1d98:	8f ef       	ldi	r24, 0xFF	; 255
    1d9a:	9f ef       	ldi	r25, 0xFF	; 255
    1d9c:	90 93 0f 07 	sts	0x070F, r25	; 0x80070f <xNextTaskUnblockTime+0x1>
    1da0:	80 93 0e 07 	sts	0x070E, r24	; 0x80070e <xNextTaskUnblockTime>
    1da4:	08 95       	ret
    1da6:	e0 91 38 07 	lds	r30, 0x0738	; 0x800738 <pxDelayedTaskList>
    1daa:	f0 91 39 07 	lds	r31, 0x0739	; 0x800739 <pxDelayedTaskList+0x1>
    1dae:	05 80       	ldd	r0, Z+5	; 0x05
    1db0:	f6 81       	ldd	r31, Z+6	; 0x06
    1db2:	e0 2d       	mov	r30, r0
    1db4:	80 81       	ld	r24, Z
    1db6:	91 81       	ldd	r25, Z+1	; 0x01
    1db8:	90 93 0f 07 	sts	0x070F, r25	; 0x80070f <xNextTaskUnblockTime+0x1>
    1dbc:	80 93 0e 07 	sts	0x070E, r24	; 0x80070e <xNextTaskUnblockTime>
    1dc0:	08 95       	ret

00001dc2 <prvDeleteTCB>:
    1dc2:	cf 93       	push	r28
    1dc4:	df 93       	push	r29
    1dc6:	ec 01       	movw	r28, r24
    1dc8:	8f 89       	ldd	r24, Y+23	; 0x17
    1dca:	98 8d       	ldd	r25, Y+24	; 0x18
    1dcc:	0e 94 35 09 	call	0x126a	; 0x126a <vPortFree>
    1dd0:	ce 01       	movw	r24, r28
    1dd2:	0e 94 35 09 	call	0x126a	; 0x126a <vPortFree>
    1dd6:	df 91       	pop	r29
    1dd8:	cf 91       	pop	r28
    1dda:	08 95       	ret

00001ddc <prvInitialiseNewTask>:
    1ddc:	6f 92       	push	r6
    1dde:	7f 92       	push	r7
    1de0:	8f 92       	push	r8
    1de2:	9f 92       	push	r9
    1de4:	af 92       	push	r10
    1de6:	bf 92       	push	r11
    1de8:	cf 92       	push	r12
    1dea:	df 92       	push	r13
    1dec:	ef 92       	push	r14
    1dee:	0f 93       	push	r16
    1df0:	1f 93       	push	r17
    1df2:	cf 93       	push	r28
    1df4:	df 93       	push	r29
    1df6:	cd b7       	in	r28, 0x3d	; 61
    1df8:	de b7       	in	r29, 0x3e	; 62
    1dfa:	4c 01       	movw	r8, r24
    1dfc:	f5 01       	movw	r30, r10
    1dfe:	87 89       	ldd	r24, Z+23	; 0x17
    1e00:	90 8d       	ldd	r25, Z+24	; 0x18
    1e02:	21 50       	subi	r18, 0x01	; 1
    1e04:	31 09       	sbc	r19, r1
    1e06:	3c 01       	movw	r6, r24
    1e08:	62 0e       	add	r6, r18
    1e0a:	73 1e       	adc	r7, r19
    1e0c:	61 15       	cp	r22, r1
    1e0e:	71 05       	cpc	r23, r1
    1e10:	89 f4       	brne	.+34     	; 0x1e34 <prvInitialiseNewTask+0x58>
    1e12:	15 c0       	rjmp	.+42     	; 0x1e3e <prvInitialiseNewTask+0x62>
    1e14:	82 2f       	mov	r24, r18
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	fb 01       	movw	r30, r22
    1e1a:	e8 0f       	add	r30, r24
    1e1c:	f9 1f       	adc	r31, r25
    1e1e:	30 81       	ld	r19, Z
    1e20:	d5 01       	movw	r26, r10
    1e22:	a8 0f       	add	r26, r24
    1e24:	b9 1f       	adc	r27, r25
    1e26:	59 96       	adiw	r26, 0x19	; 25
    1e28:	3c 93       	st	X, r19
    1e2a:	80 81       	ld	r24, Z
    1e2c:	88 23       	and	r24, r24
    1e2e:	29 f0       	breq	.+10     	; 0x1e3a <prvInitialiseNewTask+0x5e>
    1e30:	2f 5f       	subi	r18, 0xFF	; 255
    1e32:	01 c0       	rjmp	.+2      	; 0x1e36 <prvInitialiseNewTask+0x5a>
    1e34:	20 e0       	ldi	r18, 0x00	; 0
    1e36:	28 30       	cpi	r18, 0x08	; 8
    1e38:	68 f3       	brcs	.-38     	; 0x1e14 <prvInitialiseNewTask+0x38>
    1e3a:	f5 01       	movw	r30, r10
    1e3c:	10 a2       	std	Z+32, r1	; 0x20
    1e3e:	f2 e0       	ldi	r31, 0x02	; 2
    1e40:	fe 15       	cp	r31, r14
    1e42:	18 f4       	brcc	.+6      	; 0x1e4a <prvInitialiseNewTask+0x6e>
    1e44:	68 94       	set
    1e46:	ee 24       	eor	r14, r14
    1e48:	e1 f8       	bld	r14, 1
    1e4a:	f5 01       	movw	r30, r10
    1e4c:	e6 8a       	std	Z+22, r14	; 0x16
    1e4e:	e1 a2       	std	Z+33, r14	; 0x21
    1e50:	c5 01       	movw	r24, r10
    1e52:	02 96       	adiw	r24, 0x02	; 2
    1e54:	0e 94 77 09 	call	0x12ee	; 0x12ee <vListInitialiseItem>
    1e58:	c5 01       	movw	r24, r10
    1e5a:	0c 96       	adiw	r24, 0x0c	; 12
    1e5c:	0e 94 77 09 	call	0x12ee	; 0x12ee <vListInitialiseItem>
    1e60:	f5 01       	movw	r30, r10
    1e62:	b1 86       	std	Z+9, r11	; 0x09
    1e64:	a0 86       	std	Z+8, r10	; 0x08
    1e66:	83 e0       	ldi	r24, 0x03	; 3
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	8e 19       	sub	r24, r14
    1e6c:	91 09       	sbc	r25, r1
    1e6e:	95 87       	std	Z+13, r25	; 0x0d
    1e70:	84 87       	std	Z+12, r24	; 0x0c
    1e72:	b3 8a       	std	Z+19, r11	; 0x13
    1e74:	a2 8a       	std	Z+18, r10	; 0x12
    1e76:	a8 01       	movw	r20, r16
    1e78:	b4 01       	movw	r22, r8
    1e7a:	c3 01       	movw	r24, r6
    1e7c:	0e 94 fd 09 	call	0x13fa	; 0x13fa <pxPortInitialiseStack>
    1e80:	f5 01       	movw	r30, r10
    1e82:	91 83       	std	Z+1, r25	; 0x01
    1e84:	80 83       	st	Z, r24
    1e86:	c1 14       	cp	r12, r1
    1e88:	d1 04       	cpc	r13, r1
    1e8a:	19 f0       	breq	.+6      	; 0x1e92 <prvInitialiseNewTask+0xb6>
    1e8c:	f6 01       	movw	r30, r12
    1e8e:	b1 82       	std	Z+1, r11	; 0x01
    1e90:	a0 82       	st	Z, r10
    1e92:	df 91       	pop	r29
    1e94:	cf 91       	pop	r28
    1e96:	1f 91       	pop	r17
    1e98:	0f 91       	pop	r16
    1e9a:	ef 90       	pop	r14
    1e9c:	df 90       	pop	r13
    1e9e:	cf 90       	pop	r12
    1ea0:	bf 90       	pop	r11
    1ea2:	af 90       	pop	r10
    1ea4:	9f 90       	pop	r9
    1ea6:	8f 90       	pop	r8
    1ea8:	7f 90       	pop	r7
    1eaa:	6f 90       	pop	r6
    1eac:	08 95       	ret

00001eae <prvInitialiseTaskLists>:
    1eae:	cf 93       	push	r28
    1eb0:	c0 e0       	ldi	r28, 0x00	; 0
    1eb2:	10 c0       	rjmp	.+32     	; 0x1ed4 <prvInitialiseTaskLists+0x26>
    1eb4:	8c 2f       	mov	r24, r28
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	9c 01       	movw	r18, r24
    1eba:	22 0f       	add	r18, r18
    1ebc:	33 1f       	adc	r19, r19
    1ebe:	22 0f       	add	r18, r18
    1ec0:	33 1f       	adc	r19, r19
    1ec2:	22 0f       	add	r18, r18
    1ec4:	33 1f       	adc	r19, r19
    1ec6:	82 0f       	add	r24, r18
    1ec8:	93 1f       	adc	r25, r19
    1eca:	84 5b       	subi	r24, 0xB4	; 180
    1ecc:	98 4f       	sbci	r25, 0xF8	; 248
    1ece:	0e 94 69 09 	call	0x12d2	; 0x12d2 <vListInitialise>
    1ed2:	cf 5f       	subi	r28, 0xFF	; 255
    1ed4:	c3 30       	cpi	r28, 0x03	; 3
    1ed6:	70 f3       	brcs	.-36     	; 0x1eb4 <prvInitialiseTaskLists+0x6>
    1ed8:	83 e4       	ldi	r24, 0x43	; 67
    1eda:	97 e0       	ldi	r25, 0x07	; 7
    1edc:	0e 94 69 09 	call	0x12d2	; 0x12d2 <vListInitialise>
    1ee0:	8a e3       	ldi	r24, 0x3A	; 58
    1ee2:	97 e0       	ldi	r25, 0x07	; 7
    1ee4:	0e 94 69 09 	call	0x12d2	; 0x12d2 <vListInitialise>
    1ee8:	8d e2       	ldi	r24, 0x2D	; 45
    1eea:	97 e0       	ldi	r25, 0x07	; 7
    1eec:	0e 94 69 09 	call	0x12d2	; 0x12d2 <vListInitialise>
    1ef0:	84 e2       	ldi	r24, 0x24	; 36
    1ef2:	97 e0       	ldi	r25, 0x07	; 7
    1ef4:	0e 94 69 09 	call	0x12d2	; 0x12d2 <vListInitialise>
    1ef8:	8a e1       	ldi	r24, 0x1A	; 26
    1efa:	97 e0       	ldi	r25, 0x07	; 7
    1efc:	0e 94 69 09 	call	0x12d2	; 0x12d2 <vListInitialise>
    1f00:	83 e4       	ldi	r24, 0x43	; 67
    1f02:	97 e0       	ldi	r25, 0x07	; 7
    1f04:	90 93 39 07 	sts	0x0739, r25	; 0x800739 <pxDelayedTaskList+0x1>
    1f08:	80 93 38 07 	sts	0x0738, r24	; 0x800738 <pxDelayedTaskList>
    1f0c:	8a e3       	ldi	r24, 0x3A	; 58
    1f0e:	97 e0       	ldi	r25, 0x07	; 7
    1f10:	90 93 37 07 	sts	0x0737, r25	; 0x800737 <pxOverflowDelayedTaskList+0x1>
    1f14:	80 93 36 07 	sts	0x0736, r24	; 0x800736 <pxOverflowDelayedTaskList>
    1f18:	cf 91       	pop	r28
    1f1a:	08 95       	ret

00001f1c <prvAddNewTaskToReadyList>:
    1f1c:	cf 93       	push	r28
    1f1e:	df 93       	push	r29
    1f20:	ec 01       	movw	r28, r24
    1f22:	0f b6       	in	r0, 0x3f	; 63
    1f24:	f8 94       	cli
    1f26:	0f 92       	push	r0
    1f28:	80 91 19 07 	lds	r24, 0x0719	; 0x800719 <uxCurrentNumberOfTasks>
    1f2c:	8f 5f       	subi	r24, 0xFF	; 255
    1f2e:	80 93 19 07 	sts	0x0719, r24	; 0x800719 <uxCurrentNumberOfTasks>
    1f32:	80 91 67 07 	lds	r24, 0x0767	; 0x800767 <pxCurrentTCB>
    1f36:	90 91 68 07 	lds	r25, 0x0768	; 0x800768 <pxCurrentTCB+0x1>
    1f3a:	89 2b       	or	r24, r25
    1f3c:	59 f4       	brne	.+22     	; 0x1f54 <prvAddNewTaskToReadyList+0x38>
    1f3e:	d0 93 68 07 	sts	0x0768, r29	; 0x800768 <pxCurrentTCB+0x1>
    1f42:	c0 93 67 07 	sts	0x0767, r28	; 0x800767 <pxCurrentTCB>
    1f46:	80 91 19 07 	lds	r24, 0x0719	; 0x800719 <uxCurrentNumberOfTasks>
    1f4a:	81 30       	cpi	r24, 0x01	; 1
    1f4c:	99 f4       	brne	.+38     	; 0x1f74 <prvAddNewTaskToReadyList+0x58>
    1f4e:	0e 94 57 0f 	call	0x1eae	; 0x1eae <prvInitialiseTaskLists>
    1f52:	10 c0       	rjmp	.+32     	; 0x1f74 <prvAddNewTaskToReadyList+0x58>
    1f54:	80 91 15 07 	lds	r24, 0x0715	; 0x800715 <xSchedulerRunning>
    1f58:	81 11       	cpse	r24, r1
    1f5a:	0c c0       	rjmp	.+24     	; 0x1f74 <prvAddNewTaskToReadyList+0x58>
    1f5c:	e0 91 67 07 	lds	r30, 0x0767	; 0x800767 <pxCurrentTCB>
    1f60:	f0 91 68 07 	lds	r31, 0x0768	; 0x800768 <pxCurrentTCB+0x1>
    1f64:	96 89       	ldd	r25, Z+22	; 0x16
    1f66:	8e 89       	ldd	r24, Y+22	; 0x16
    1f68:	89 17       	cp	r24, r25
    1f6a:	20 f0       	brcs	.+8      	; 0x1f74 <prvAddNewTaskToReadyList+0x58>
    1f6c:	d0 93 68 07 	sts	0x0768, r29	; 0x800768 <pxCurrentTCB+0x1>
    1f70:	c0 93 67 07 	sts	0x0767, r28	; 0x800767 <pxCurrentTCB>
    1f74:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <uxTaskNumber>
    1f78:	8f 5f       	subi	r24, 0xFF	; 255
    1f7a:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <uxTaskNumber>
    1f7e:	8e 89       	ldd	r24, Y+22	; 0x16
    1f80:	90 91 16 07 	lds	r25, 0x0716	; 0x800716 <uxTopReadyPriority>
    1f84:	98 17       	cp	r25, r24
    1f86:	10 f4       	brcc	.+4      	; 0x1f8c <prvAddNewTaskToReadyList+0x70>
    1f88:	80 93 16 07 	sts	0x0716, r24	; 0x800716 <uxTopReadyPriority>
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	fc 01       	movw	r30, r24
    1f90:	ee 0f       	add	r30, r30
    1f92:	ff 1f       	adc	r31, r31
    1f94:	ee 0f       	add	r30, r30
    1f96:	ff 1f       	adc	r31, r31
    1f98:	ee 0f       	add	r30, r30
    1f9a:	ff 1f       	adc	r31, r31
    1f9c:	8e 0f       	add	r24, r30
    1f9e:	9f 1f       	adc	r25, r31
    1fa0:	fc 01       	movw	r30, r24
    1fa2:	e4 5b       	subi	r30, 0xB4	; 180
    1fa4:	f8 4f       	sbci	r31, 0xF8	; 248
    1fa6:	01 80       	ldd	r0, Z+1	; 0x01
    1fa8:	f2 81       	ldd	r31, Z+2	; 0x02
    1faa:	e0 2d       	mov	r30, r0
    1fac:	fd 83       	std	Y+5, r31	; 0x05
    1fae:	ec 83       	std	Y+4, r30	; 0x04
    1fb0:	84 81       	ldd	r24, Z+4	; 0x04
    1fb2:	95 81       	ldd	r25, Z+5	; 0x05
    1fb4:	9f 83       	std	Y+7, r25	; 0x07
    1fb6:	8e 83       	std	Y+6, r24	; 0x06
    1fb8:	a4 81       	ldd	r26, Z+4	; 0x04
    1fba:	b5 81       	ldd	r27, Z+5	; 0x05
    1fbc:	ce 01       	movw	r24, r28
    1fbe:	02 96       	adiw	r24, 0x02	; 2
    1fc0:	13 96       	adiw	r26, 0x03	; 3
    1fc2:	9c 93       	st	X, r25
    1fc4:	8e 93       	st	-X, r24
    1fc6:	12 97       	sbiw	r26, 0x02	; 2
    1fc8:	95 83       	std	Z+5, r25	; 0x05
    1fca:	84 83       	std	Z+4, r24	; 0x04
    1fcc:	ee 89       	ldd	r30, Y+22	; 0x16
    1fce:	f0 e0       	ldi	r31, 0x00	; 0
    1fd0:	cf 01       	movw	r24, r30
    1fd2:	88 0f       	add	r24, r24
    1fd4:	99 1f       	adc	r25, r25
    1fd6:	88 0f       	add	r24, r24
    1fd8:	99 1f       	adc	r25, r25
    1fda:	88 0f       	add	r24, r24
    1fdc:	99 1f       	adc	r25, r25
    1fde:	e8 0f       	add	r30, r24
    1fe0:	f9 1f       	adc	r31, r25
    1fe2:	e4 5b       	subi	r30, 0xB4	; 180
    1fe4:	f8 4f       	sbci	r31, 0xF8	; 248
    1fe6:	fb 87       	std	Y+11, r31	; 0x0b
    1fe8:	ea 87       	std	Y+10, r30	; 0x0a
    1fea:	80 81       	ld	r24, Z
    1fec:	8f 5f       	subi	r24, 0xFF	; 255
    1fee:	80 83       	st	Z, r24
    1ff0:	0f 90       	pop	r0
    1ff2:	0f be       	out	0x3f, r0	; 63
    1ff4:	80 91 15 07 	lds	r24, 0x0715	; 0x800715 <xSchedulerRunning>
    1ff8:	88 23       	and	r24, r24
    1ffa:	51 f0       	breq	.+20     	; 0x2010 <prvAddNewTaskToReadyList+0xf4>
    1ffc:	e0 91 67 07 	lds	r30, 0x0767	; 0x800767 <pxCurrentTCB>
    2000:	f0 91 68 07 	lds	r31, 0x0768	; 0x800768 <pxCurrentTCB+0x1>
    2004:	96 89       	ldd	r25, Z+22	; 0x16
    2006:	8e 89       	ldd	r24, Y+22	; 0x16
    2008:	98 17       	cp	r25, r24
    200a:	10 f4       	brcc	.+4      	; 0x2010 <prvAddNewTaskToReadyList+0xf4>
    200c:	0e 94 98 0a 	call	0x1530	; 0x1530 <vPortYield>
    2010:	df 91       	pop	r29
    2012:	cf 91       	pop	r28
    2014:	08 95       	ret

00002016 <prvCheckTasksWaitingTermination>:
    2016:	cf 93       	push	r28
    2018:	df 93       	push	r29
    201a:	1c c0       	rjmp	.+56     	; 0x2054 <prvCheckTasksWaitingTermination+0x3e>
    201c:	0f b6       	in	r0, 0x3f	; 63
    201e:	f8 94       	cli
    2020:	0f 92       	push	r0
    2022:	e0 91 29 07 	lds	r30, 0x0729	; 0x800729 <xTasksWaitingTermination+0x5>
    2026:	f0 91 2a 07 	lds	r31, 0x072A	; 0x80072a <xTasksWaitingTermination+0x6>
    202a:	c6 81       	ldd	r28, Z+6	; 0x06
    202c:	d7 81       	ldd	r29, Z+7	; 0x07
    202e:	ce 01       	movw	r24, r28
    2030:	02 96       	adiw	r24, 0x02	; 2
    2032:	0e 94 cd 09 	call	0x139a	; 0x139a <uxListRemove>
    2036:	80 91 19 07 	lds	r24, 0x0719	; 0x800719 <uxCurrentNumberOfTasks>
    203a:	81 50       	subi	r24, 0x01	; 1
    203c:	80 93 19 07 	sts	0x0719, r24	; 0x800719 <uxCurrentNumberOfTasks>
    2040:	80 91 23 07 	lds	r24, 0x0723	; 0x800723 <uxDeletedTasksWaitingCleanUp>
    2044:	81 50       	subi	r24, 0x01	; 1
    2046:	80 93 23 07 	sts	0x0723, r24	; 0x800723 <uxDeletedTasksWaitingCleanUp>
    204a:	0f 90       	pop	r0
    204c:	0f be       	out	0x3f, r0	; 63
    204e:	ce 01       	movw	r24, r28
    2050:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <prvDeleteTCB>
    2054:	80 91 23 07 	lds	r24, 0x0723	; 0x800723 <uxDeletedTasksWaitingCleanUp>
    2058:	81 11       	cpse	r24, r1
    205a:	e0 cf       	rjmp	.-64     	; 0x201c <prvCheckTasksWaitingTermination+0x6>
    205c:	df 91       	pop	r29
    205e:	cf 91       	pop	r28
    2060:	08 95       	ret

00002062 <prvIdleTask>:
    2062:	0e 94 0b 10 	call	0x2016	; 0x2016 <prvCheckTasksWaitingTermination>
    2066:	fd cf       	rjmp	.-6      	; 0x2062 <prvIdleTask>

00002068 <prvAddCurrentTaskToDelayedList>:
    2068:	ff 92       	push	r15
    206a:	0f 93       	push	r16
    206c:	1f 93       	push	r17
    206e:	cf 93       	push	r28
    2070:	df 93       	push	r29
    2072:	ec 01       	movw	r28, r24
    2074:	f6 2e       	mov	r15, r22
    2076:	00 91 17 07 	lds	r16, 0x0717	; 0x800717 <xTickCount>
    207a:	10 91 18 07 	lds	r17, 0x0718	; 0x800718 <xTickCount+0x1>
    207e:	80 91 67 07 	lds	r24, 0x0767	; 0x800767 <pxCurrentTCB>
    2082:	90 91 68 07 	lds	r25, 0x0768	; 0x800768 <pxCurrentTCB+0x1>
    2086:	02 96       	adiw	r24, 0x02	; 2
    2088:	0e 94 cd 09 	call	0x139a	; 0x139a <uxListRemove>
    208c:	cf 3f       	cpi	r28, 0xFF	; 255
    208e:	8f ef       	ldi	r24, 0xFF	; 255
    2090:	d8 07       	cpc	r29, r24
    2092:	b1 f5       	brne	.+108    	; 0x2100 <prvAddCurrentTaskToDelayedList+0x98>
    2094:	ff 20       	and	r15, r15
    2096:	a1 f1       	breq	.+104    	; 0x2100 <prvAddCurrentTaskToDelayedList+0x98>
    2098:	ea e1       	ldi	r30, 0x1A	; 26
    209a:	f7 e0       	ldi	r31, 0x07	; 7
    209c:	a1 81       	ldd	r26, Z+1	; 0x01
    209e:	b2 81       	ldd	r27, Z+2	; 0x02
    20a0:	c0 91 67 07 	lds	r28, 0x0767	; 0x800767 <pxCurrentTCB>
    20a4:	d0 91 68 07 	lds	r29, 0x0768	; 0x800768 <pxCurrentTCB+0x1>
    20a8:	bd 83       	std	Y+5, r27	; 0x05
    20aa:	ac 83       	std	Y+4, r26	; 0x04
    20ac:	c0 91 67 07 	lds	r28, 0x0767	; 0x800767 <pxCurrentTCB>
    20b0:	d0 91 68 07 	lds	r29, 0x0768	; 0x800768 <pxCurrentTCB+0x1>
    20b4:	14 96       	adiw	r26, 0x04	; 4
    20b6:	8d 91       	ld	r24, X+
    20b8:	9c 91       	ld	r25, X
    20ba:	15 97       	sbiw	r26, 0x05	; 5
    20bc:	9f 83       	std	Y+7, r25	; 0x07
    20be:	8e 83       	std	Y+6, r24	; 0x06
    20c0:	14 96       	adiw	r26, 0x04	; 4
    20c2:	cd 91       	ld	r28, X+
    20c4:	dc 91       	ld	r29, X
    20c6:	15 97       	sbiw	r26, 0x05	; 5
    20c8:	80 91 67 07 	lds	r24, 0x0767	; 0x800767 <pxCurrentTCB>
    20cc:	90 91 68 07 	lds	r25, 0x0768	; 0x800768 <pxCurrentTCB+0x1>
    20d0:	02 96       	adiw	r24, 0x02	; 2
    20d2:	9b 83       	std	Y+3, r25	; 0x03
    20d4:	8a 83       	std	Y+2, r24	; 0x02
    20d6:	80 91 67 07 	lds	r24, 0x0767	; 0x800767 <pxCurrentTCB>
    20da:	90 91 68 07 	lds	r25, 0x0768	; 0x800768 <pxCurrentTCB+0x1>
    20de:	02 96       	adiw	r24, 0x02	; 2
    20e0:	15 96       	adiw	r26, 0x05	; 5
    20e2:	9c 93       	st	X, r25
    20e4:	8e 93       	st	-X, r24
    20e6:	14 97       	sbiw	r26, 0x04	; 4
    20e8:	a0 91 67 07 	lds	r26, 0x0767	; 0x800767 <pxCurrentTCB>
    20ec:	b0 91 68 07 	lds	r27, 0x0768	; 0x800768 <pxCurrentTCB+0x1>
    20f0:	1b 96       	adiw	r26, 0x0b	; 11
    20f2:	fc 93       	st	X, r31
    20f4:	ee 93       	st	-X, r30
    20f6:	1a 97       	sbiw	r26, 0x0a	; 10
    20f8:	80 81       	ld	r24, Z
    20fa:	8f 5f       	subi	r24, 0xFF	; 255
    20fc:	80 83       	st	Z, r24
    20fe:	2f c0       	rjmp	.+94     	; 0x215e <prvAddCurrentTaskToDelayedList+0xf6>
    2100:	c0 0f       	add	r28, r16
    2102:	d1 1f       	adc	r29, r17
    2104:	e0 91 67 07 	lds	r30, 0x0767	; 0x800767 <pxCurrentTCB>
    2108:	f0 91 68 07 	lds	r31, 0x0768	; 0x800768 <pxCurrentTCB+0x1>
    210c:	d3 83       	std	Z+3, r29	; 0x03
    210e:	c2 83       	std	Z+2, r28	; 0x02
    2110:	c0 17       	cp	r28, r16
    2112:	d1 07       	cpc	r29, r17
    2114:	68 f4       	brcc	.+26     	; 0x2130 <prvAddCurrentTaskToDelayedList+0xc8>
    2116:	60 91 67 07 	lds	r22, 0x0767	; 0x800767 <pxCurrentTCB>
    211a:	70 91 68 07 	lds	r23, 0x0768	; 0x800768 <pxCurrentTCB+0x1>
    211e:	80 91 36 07 	lds	r24, 0x0736	; 0x800736 <pxOverflowDelayedTaskList>
    2122:	90 91 37 07 	lds	r25, 0x0737	; 0x800737 <pxOverflowDelayedTaskList+0x1>
    2126:	6e 5f       	subi	r22, 0xFE	; 254
    2128:	7f 4f       	sbci	r23, 0xFF	; 255
    212a:	0e 94 9c 09 	call	0x1338	; 0x1338 <vListInsert>
    212e:	17 c0       	rjmp	.+46     	; 0x215e <prvAddCurrentTaskToDelayedList+0xf6>
    2130:	60 91 67 07 	lds	r22, 0x0767	; 0x800767 <pxCurrentTCB>
    2134:	70 91 68 07 	lds	r23, 0x0768	; 0x800768 <pxCurrentTCB+0x1>
    2138:	80 91 38 07 	lds	r24, 0x0738	; 0x800738 <pxDelayedTaskList>
    213c:	90 91 39 07 	lds	r25, 0x0739	; 0x800739 <pxDelayedTaskList+0x1>
    2140:	6e 5f       	subi	r22, 0xFE	; 254
    2142:	7f 4f       	sbci	r23, 0xFF	; 255
    2144:	0e 94 9c 09 	call	0x1338	; 0x1338 <vListInsert>
    2148:	80 91 0e 07 	lds	r24, 0x070E	; 0x80070e <xNextTaskUnblockTime>
    214c:	90 91 0f 07 	lds	r25, 0x070F	; 0x80070f <xNextTaskUnblockTime+0x1>
    2150:	c8 17       	cp	r28, r24
    2152:	d9 07       	cpc	r29, r25
    2154:	20 f4       	brcc	.+8      	; 0x215e <prvAddCurrentTaskToDelayedList+0xf6>
    2156:	d0 93 0f 07 	sts	0x070F, r29	; 0x80070f <xNextTaskUnblockTime+0x1>
    215a:	c0 93 0e 07 	sts	0x070E, r28	; 0x80070e <xNextTaskUnblockTime>
    215e:	df 91       	pop	r29
    2160:	cf 91       	pop	r28
    2162:	1f 91       	pop	r17
    2164:	0f 91       	pop	r16
    2166:	ff 90       	pop	r15
    2168:	08 95       	ret

0000216a <xTaskCreate>:
    216a:	2f 92       	push	r2
    216c:	3f 92       	push	r3
    216e:	4f 92       	push	r4
    2170:	5f 92       	push	r5
    2172:	6f 92       	push	r6
    2174:	7f 92       	push	r7
    2176:	8f 92       	push	r8
    2178:	9f 92       	push	r9
    217a:	af 92       	push	r10
    217c:	bf 92       	push	r11
    217e:	cf 92       	push	r12
    2180:	df 92       	push	r13
    2182:	ef 92       	push	r14
    2184:	ff 92       	push	r15
    2186:	0f 93       	push	r16
    2188:	1f 93       	push	r17
    218a:	cf 93       	push	r28
    218c:	df 93       	push	r29
    218e:	3c 01       	movw	r6, r24
    2190:	1b 01       	movw	r2, r22
    2192:	5a 01       	movw	r10, r20
    2194:	29 01       	movw	r4, r18
    2196:	ca 01       	movw	r24, r20
    2198:	0e 94 9a 08 	call	0x1134	; 0x1134 <pvPortMalloc>
    219c:	6c 01       	movw	r12, r24
    219e:	89 2b       	or	r24, r25
    21a0:	99 f0       	breq	.+38     	; 0x21c8 <xTaskCreate+0x5e>
    21a2:	88 e2       	ldi	r24, 0x28	; 40
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	0e 94 9a 08 	call	0x1134	; 0x1134 <pvPortMalloc>
    21aa:	ec 01       	movw	r28, r24
    21ac:	89 2b       	or	r24, r25
    21ae:	41 f0       	breq	.+16     	; 0x21c0 <xTaskCreate+0x56>
    21b0:	88 e2       	ldi	r24, 0x28	; 40
    21b2:	fe 01       	movw	r30, r28
    21b4:	11 92       	st	Z+, r1
    21b6:	8a 95       	dec	r24
    21b8:	e9 f7       	brne	.-6      	; 0x21b4 <xTaskCreate+0x4a>
    21ba:	d8 8e       	std	Y+24, r13	; 0x18
    21bc:	cf 8a       	std	Y+23, r12	; 0x17
    21be:	06 c0       	rjmp	.+12     	; 0x21cc <xTaskCreate+0x62>
    21c0:	c6 01       	movw	r24, r12
    21c2:	0e 94 35 09 	call	0x126a	; 0x126a <vPortFree>
    21c6:	02 c0       	rjmp	.+4      	; 0x21cc <xTaskCreate+0x62>
    21c8:	c0 e0       	ldi	r28, 0x00	; 0
    21ca:	d0 e0       	ldi	r29, 0x00	; 0
    21cc:	20 97       	sbiw	r28, 0x00	; 0
    21ce:	91 f0       	breq	.+36     	; 0x21f4 <xTaskCreate+0x8a>
    21d0:	95 01       	movw	r18, r10
    21d2:	40 e0       	ldi	r20, 0x00	; 0
    21d4:	50 e0       	ldi	r21, 0x00	; 0
    21d6:	81 2c       	mov	r8, r1
    21d8:	91 2c       	mov	r9, r1
    21da:	5e 01       	movw	r10, r28
    21dc:	67 01       	movw	r12, r14
    21de:	e0 2e       	mov	r14, r16
    21e0:	82 01       	movw	r16, r4
    21e2:	b1 01       	movw	r22, r2
    21e4:	c3 01       	movw	r24, r6
    21e6:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <prvInitialiseNewTask>
    21ea:	ce 01       	movw	r24, r28
    21ec:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <prvAddNewTaskToReadyList>
    21f0:	81 e0       	ldi	r24, 0x01	; 1
    21f2:	01 c0       	rjmp	.+2      	; 0x21f6 <xTaskCreate+0x8c>
    21f4:	8f ef       	ldi	r24, 0xFF	; 255
    21f6:	df 91       	pop	r29
    21f8:	cf 91       	pop	r28
    21fa:	1f 91       	pop	r17
    21fc:	0f 91       	pop	r16
    21fe:	ff 90       	pop	r15
    2200:	ef 90       	pop	r14
    2202:	df 90       	pop	r13
    2204:	cf 90       	pop	r12
    2206:	bf 90       	pop	r11
    2208:	af 90       	pop	r10
    220a:	9f 90       	pop	r9
    220c:	8f 90       	pop	r8
    220e:	7f 90       	pop	r7
    2210:	6f 90       	pop	r6
    2212:	5f 90       	pop	r5
    2214:	4f 90       	pop	r4
    2216:	3f 90       	pop	r3
    2218:	2f 90       	pop	r2
    221a:	08 95       	ret

0000221c <vTaskResume>:
    221c:	0f 93       	push	r16
    221e:	1f 93       	push	r17
    2220:	cf 93       	push	r28
    2222:	df 93       	push	r29
    2224:	20 91 67 07 	lds	r18, 0x0767	; 0x800767 <pxCurrentTCB>
    2228:	30 91 68 07 	lds	r19, 0x0768	; 0x800768 <pxCurrentTCB+0x1>
    222c:	82 17       	cp	r24, r18
    222e:	93 07       	cpc	r25, r19
    2230:	09 f4       	brne	.+2      	; 0x2234 <vTaskResume+0x18>
    2232:	55 c0       	rjmp	.+170    	; 0x22de <vTaskResume+0xc2>
    2234:	00 97       	sbiw	r24, 0x00	; 0
    2236:	09 f4       	brne	.+2      	; 0x223a <vTaskResume+0x1e>
    2238:	52 c0       	rjmp	.+164    	; 0x22de <vTaskResume+0xc2>
    223a:	ec 01       	movw	r28, r24
    223c:	0f b6       	in	r0, 0x3f	; 63
    223e:	f8 94       	cli
    2240:	0f 92       	push	r0
    2242:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <prvTaskIsTaskSuspended>
    2246:	88 23       	and	r24, r24
    2248:	09 f4       	brne	.+2      	; 0x224c <vTaskResume+0x30>
    224a:	47 c0       	rjmp	.+142    	; 0x22da <vTaskResume+0xbe>
    224c:	8e 01       	movw	r16, r28
    224e:	0e 5f       	subi	r16, 0xFE	; 254
    2250:	1f 4f       	sbci	r17, 0xFF	; 255
    2252:	c8 01       	movw	r24, r16
    2254:	0e 94 cd 09 	call	0x139a	; 0x139a <uxListRemove>
    2258:	8e 89       	ldd	r24, Y+22	; 0x16
    225a:	90 91 16 07 	lds	r25, 0x0716	; 0x800716 <uxTopReadyPriority>
    225e:	98 17       	cp	r25, r24
    2260:	10 f4       	brcc	.+4      	; 0x2266 <vTaskResume+0x4a>
    2262:	80 93 16 07 	sts	0x0716, r24	; 0x800716 <uxTopReadyPriority>
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	fc 01       	movw	r30, r24
    226a:	ee 0f       	add	r30, r30
    226c:	ff 1f       	adc	r31, r31
    226e:	ee 0f       	add	r30, r30
    2270:	ff 1f       	adc	r31, r31
    2272:	ee 0f       	add	r30, r30
    2274:	ff 1f       	adc	r31, r31
    2276:	8e 0f       	add	r24, r30
    2278:	9f 1f       	adc	r25, r31
    227a:	fc 01       	movw	r30, r24
    227c:	e4 5b       	subi	r30, 0xB4	; 180
    227e:	f8 4f       	sbci	r31, 0xF8	; 248
    2280:	01 80       	ldd	r0, Z+1	; 0x01
    2282:	f2 81       	ldd	r31, Z+2	; 0x02
    2284:	e0 2d       	mov	r30, r0
    2286:	fd 83       	std	Y+5, r31	; 0x05
    2288:	ec 83       	std	Y+4, r30	; 0x04
    228a:	84 81       	ldd	r24, Z+4	; 0x04
    228c:	95 81       	ldd	r25, Z+5	; 0x05
    228e:	9f 83       	std	Y+7, r25	; 0x07
    2290:	8e 83       	std	Y+6, r24	; 0x06
    2292:	a4 81       	ldd	r26, Z+4	; 0x04
    2294:	b5 81       	ldd	r27, Z+5	; 0x05
    2296:	13 96       	adiw	r26, 0x03	; 3
    2298:	1c 93       	st	X, r17
    229a:	0e 93       	st	-X, r16
    229c:	12 97       	sbiw	r26, 0x02	; 2
    229e:	15 83       	std	Z+5, r17	; 0x05
    22a0:	04 83       	std	Z+4, r16	; 0x04
    22a2:	ee 89       	ldd	r30, Y+22	; 0x16
    22a4:	f0 e0       	ldi	r31, 0x00	; 0
    22a6:	cf 01       	movw	r24, r30
    22a8:	88 0f       	add	r24, r24
    22aa:	99 1f       	adc	r25, r25
    22ac:	88 0f       	add	r24, r24
    22ae:	99 1f       	adc	r25, r25
    22b0:	88 0f       	add	r24, r24
    22b2:	99 1f       	adc	r25, r25
    22b4:	e8 0f       	add	r30, r24
    22b6:	f9 1f       	adc	r31, r25
    22b8:	e4 5b       	subi	r30, 0xB4	; 180
    22ba:	f8 4f       	sbci	r31, 0xF8	; 248
    22bc:	fb 87       	std	Y+11, r31	; 0x0b
    22be:	ea 87       	std	Y+10, r30	; 0x0a
    22c0:	80 81       	ld	r24, Z
    22c2:	8f 5f       	subi	r24, 0xFF	; 255
    22c4:	80 83       	st	Z, r24
    22c6:	9e 89       	ldd	r25, Y+22	; 0x16
    22c8:	e0 91 67 07 	lds	r30, 0x0767	; 0x800767 <pxCurrentTCB>
    22cc:	f0 91 68 07 	lds	r31, 0x0768	; 0x800768 <pxCurrentTCB+0x1>
    22d0:	86 89       	ldd	r24, Z+22	; 0x16
    22d2:	98 17       	cp	r25, r24
    22d4:	10 f0       	brcs	.+4      	; 0x22da <vTaskResume+0xbe>
    22d6:	0e 94 98 0a 	call	0x1530	; 0x1530 <vPortYield>
    22da:	0f 90       	pop	r0
    22dc:	0f be       	out	0x3f, r0	; 63
    22de:	df 91       	pop	r29
    22e0:	cf 91       	pop	r28
    22e2:	1f 91       	pop	r17
    22e4:	0f 91       	pop	r16
    22e6:	08 95       	ret

000022e8 <vTaskStartScheduler>:
    22e8:	ef 92       	push	r14
    22ea:	ff 92       	push	r15
    22ec:	0f 93       	push	r16
    22ee:	0f 2e       	mov	r0, r31
    22f0:	fc e0       	ldi	r31, 0x0C	; 12
    22f2:	ef 2e       	mov	r14, r31
    22f4:	f7 e0       	ldi	r31, 0x07	; 7
    22f6:	ff 2e       	mov	r15, r31
    22f8:	f0 2d       	mov	r31, r0
    22fa:	00 e0       	ldi	r16, 0x00	; 0
    22fc:	20 e0       	ldi	r18, 0x00	; 0
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	45 e5       	ldi	r20, 0x55	; 85
    2302:	50 e0       	ldi	r21, 0x00	; 0
    2304:	63 e1       	ldi	r22, 0x13	; 19
    2306:	71 e0       	ldi	r23, 0x01	; 1
    2308:	81 e3       	ldi	r24, 0x31	; 49
    230a:	90 e1       	ldi	r25, 0x10	; 16
    230c:	0e 94 b5 10 	call	0x216a	; 0x216a <xTaskCreate>
    2310:	81 30       	cpi	r24, 0x01	; 1
    2312:	81 f4       	brne	.+32     	; 0x2334 <vTaskStartScheduler+0x4c>
    2314:	f8 94       	cli
    2316:	8f ef       	ldi	r24, 0xFF	; 255
    2318:	9f ef       	ldi	r25, 0xFF	; 255
    231a:	90 93 0f 07 	sts	0x070F, r25	; 0x80070f <xNextTaskUnblockTime+0x1>
    231e:	80 93 0e 07 	sts	0x070E, r24	; 0x80070e <xNextTaskUnblockTime>
    2322:	81 e0       	ldi	r24, 0x01	; 1
    2324:	80 93 15 07 	sts	0x0715, r24	; 0x800715 <xSchedulerRunning>
    2328:	10 92 18 07 	sts	0x0718, r1	; 0x800718 <xTickCount+0x1>
    232c:	10 92 17 07 	sts	0x0717, r1	; 0x800717 <xTickCount>
    2330:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <xPortStartScheduler>
    2334:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <uxTopUsedPriority>
    2338:	0f 91       	pop	r16
    233a:	ff 90       	pop	r15
    233c:	ef 90       	pop	r14
    233e:	08 95       	ret

00002340 <vTaskSuspendAll>:
    2340:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <uxSchedulerSuspended>
    2344:	8f 5f       	subi	r24, 0xFF	; 255
    2346:	80 93 0b 07 	sts	0x070B, r24	; 0x80070b <uxSchedulerSuspended>
    234a:	08 95       	ret

0000234c <xTaskIncrementTick>:
    234c:	0f 93       	push	r16
    234e:	1f 93       	push	r17
    2350:	cf 93       	push	r28
    2352:	df 93       	push	r29
    2354:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <uxSchedulerSuspended>
    2358:	81 11       	cpse	r24, r1
    235a:	01 c1       	rjmp	.+514    	; 0x255e <xTaskIncrementTick+0x212>
    235c:	c0 91 17 07 	lds	r28, 0x0717	; 0x800717 <xTickCount>
    2360:	d0 91 18 07 	lds	r29, 0x0718	; 0x800718 <xTickCount+0x1>
    2364:	8e 01       	movw	r16, r28
    2366:	0f 5f       	subi	r16, 0xFF	; 255
    2368:	1f 4f       	sbci	r17, 0xFF	; 255
    236a:	10 93 18 07 	sts	0x0718, r17	; 0x800718 <xTickCount+0x1>
    236e:	00 93 17 07 	sts	0x0717, r16	; 0x800717 <xTickCount>
    2372:	01 15       	cp	r16, r1
    2374:	11 05       	cpc	r17, r1
    2376:	b9 f4       	brne	.+46     	; 0x23a6 <xTaskIncrementTick+0x5a>
    2378:	80 91 38 07 	lds	r24, 0x0738	; 0x800738 <pxDelayedTaskList>
    237c:	90 91 39 07 	lds	r25, 0x0739	; 0x800739 <pxDelayedTaskList+0x1>
    2380:	20 91 36 07 	lds	r18, 0x0736	; 0x800736 <pxOverflowDelayedTaskList>
    2384:	30 91 37 07 	lds	r19, 0x0737	; 0x800737 <pxOverflowDelayedTaskList+0x1>
    2388:	30 93 39 07 	sts	0x0739, r19	; 0x800739 <pxDelayedTaskList+0x1>
    238c:	20 93 38 07 	sts	0x0738, r18	; 0x800738 <pxDelayedTaskList>
    2390:	90 93 37 07 	sts	0x0737, r25	; 0x800737 <pxOverflowDelayedTaskList+0x1>
    2394:	80 93 36 07 	sts	0x0736, r24	; 0x800736 <pxOverflowDelayedTaskList>
    2398:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <xNumOfOverflows>
    239c:	8f 5f       	subi	r24, 0xFF	; 255
    239e:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <xNumOfOverflows>
    23a2:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <prvResetNextTaskUnblockTime>
    23a6:	80 91 0e 07 	lds	r24, 0x070E	; 0x80070e <xNextTaskUnblockTime>
    23aa:	90 91 0f 07 	lds	r25, 0x070F	; 0x80070f <xNextTaskUnblockTime+0x1>
    23ae:	08 17       	cp	r16, r24
    23b0:	19 07       	cpc	r17, r25
    23b2:	20 f4       	brcc	.+8      	; 0x23bc <xTaskIncrementTick+0x70>
    23b4:	80 e0       	ldi	r24, 0x00	; 0
    23b6:	b8 c0       	rjmp	.+368    	; 0x2528 <xTaskIncrementTick+0x1dc>
    23b8:	81 e0       	ldi	r24, 0x01	; 1
    23ba:	01 c0       	rjmp	.+2      	; 0x23be <xTaskIncrementTick+0x72>
    23bc:	80 e0       	ldi	r24, 0x00	; 0
    23be:	e0 91 38 07 	lds	r30, 0x0738	; 0x800738 <pxDelayedTaskList>
    23c2:	f0 91 39 07 	lds	r31, 0x0739	; 0x800739 <pxDelayedTaskList+0x1>
    23c6:	90 81       	ld	r25, Z
    23c8:	91 11       	cpse	r25, r1
    23ca:	07 c0       	rjmp	.+14     	; 0x23da <xTaskIncrementTick+0x8e>
    23cc:	2f ef       	ldi	r18, 0xFF	; 255
    23ce:	3f ef       	ldi	r19, 0xFF	; 255
    23d0:	30 93 0f 07 	sts	0x070F, r19	; 0x80070f <xNextTaskUnblockTime+0x1>
    23d4:	20 93 0e 07 	sts	0x070E, r18	; 0x80070e <xNextTaskUnblockTime>
    23d8:	a7 c0       	rjmp	.+334    	; 0x2528 <xTaskIncrementTick+0x1dc>
    23da:	e0 91 38 07 	lds	r30, 0x0738	; 0x800738 <pxDelayedTaskList>
    23de:	f0 91 39 07 	lds	r31, 0x0739	; 0x800739 <pxDelayedTaskList+0x1>
    23e2:	05 80       	ldd	r0, Z+5	; 0x05
    23e4:	f6 81       	ldd	r31, Z+6	; 0x06
    23e6:	e0 2d       	mov	r30, r0
    23e8:	06 80       	ldd	r0, Z+6	; 0x06
    23ea:	f7 81       	ldd	r31, Z+7	; 0x07
    23ec:	e0 2d       	mov	r30, r0
    23ee:	22 81       	ldd	r18, Z+2	; 0x02
    23f0:	33 81       	ldd	r19, Z+3	; 0x03
    23f2:	02 17       	cp	r16, r18
    23f4:	13 07       	cpc	r17, r19
    23f6:	28 f4       	brcc	.+10     	; 0x2402 <xTaskIncrementTick+0xb6>
    23f8:	30 93 0f 07 	sts	0x070F, r19	; 0x80070f <xNextTaskUnblockTime+0x1>
    23fc:	20 93 0e 07 	sts	0x070E, r18	; 0x80070e <xNextTaskUnblockTime>
    2400:	93 c0       	rjmp	.+294    	; 0x2528 <xTaskIncrementTick+0x1dc>
    2402:	a2 85       	ldd	r26, Z+10	; 0x0a
    2404:	b3 85       	ldd	r27, Z+11	; 0x0b
    2406:	24 81       	ldd	r18, Z+4	; 0x04
    2408:	35 81       	ldd	r19, Z+5	; 0x05
    240a:	46 81       	ldd	r20, Z+6	; 0x06
    240c:	57 81       	ldd	r21, Z+7	; 0x07
    240e:	e9 01       	movw	r28, r18
    2410:	5d 83       	std	Y+5, r21	; 0x05
    2412:	4c 83       	std	Y+4, r20	; 0x04
    2414:	26 81       	ldd	r18, Z+6	; 0x06
    2416:	37 81       	ldd	r19, Z+7	; 0x07
    2418:	44 81       	ldd	r20, Z+4	; 0x04
    241a:	55 81       	ldd	r21, Z+5	; 0x05
    241c:	e9 01       	movw	r28, r18
    241e:	5b 83       	std	Y+3, r21	; 0x03
    2420:	4a 83       	std	Y+2, r20	; 0x02
    2422:	11 96       	adiw	r26, 0x01	; 1
    2424:	2d 91       	ld	r18, X+
    2426:	3c 91       	ld	r19, X
    2428:	12 97       	sbiw	r26, 0x02	; 2
    242a:	af 01       	movw	r20, r30
    242c:	4e 5f       	subi	r20, 0xFE	; 254
    242e:	5f 4f       	sbci	r21, 0xFF	; 255
    2430:	24 17       	cp	r18, r20
    2432:	35 07       	cpc	r19, r21
    2434:	31 f4       	brne	.+12     	; 0x2442 <xTaskIncrementTick+0xf6>
    2436:	26 81       	ldd	r18, Z+6	; 0x06
    2438:	37 81       	ldd	r19, Z+7	; 0x07
    243a:	12 96       	adiw	r26, 0x02	; 2
    243c:	3c 93       	st	X, r19
    243e:	2e 93       	st	-X, r18
    2440:	11 97       	sbiw	r26, 0x01	; 1
    2442:	13 86       	std	Z+11, r1	; 0x0b
    2444:	12 86       	std	Z+10, r1	; 0x0a
    2446:	9c 91       	ld	r25, X
    2448:	91 50       	subi	r25, 0x01	; 1
    244a:	9c 93       	st	X, r25
    244c:	a4 89       	ldd	r26, Z+20	; 0x14
    244e:	b5 89       	ldd	r27, Z+21	; 0x15
    2450:	10 97       	sbiw	r26, 0x00	; 0
    2452:	19 f1       	breq	.+70     	; 0x249a <xTaskIncrementTick+0x14e>
    2454:	26 85       	ldd	r18, Z+14	; 0x0e
    2456:	37 85       	ldd	r19, Z+15	; 0x0f
    2458:	60 89       	ldd	r22, Z+16	; 0x10
    245a:	71 89       	ldd	r23, Z+17	; 0x11
    245c:	e9 01       	movw	r28, r18
    245e:	7d 83       	std	Y+5, r23	; 0x05
    2460:	6c 83       	std	Y+4, r22	; 0x04
    2462:	20 89       	ldd	r18, Z+16	; 0x10
    2464:	31 89       	ldd	r19, Z+17	; 0x11
    2466:	66 85       	ldd	r22, Z+14	; 0x0e
    2468:	77 85       	ldd	r23, Z+15	; 0x0f
    246a:	e9 01       	movw	r28, r18
    246c:	7b 83       	std	Y+3, r23	; 0x03
    246e:	6a 83       	std	Y+2, r22	; 0x02
    2470:	11 96       	adiw	r26, 0x01	; 1
    2472:	6d 91       	ld	r22, X+
    2474:	7c 91       	ld	r23, X
    2476:	12 97       	sbiw	r26, 0x02	; 2
    2478:	9f 01       	movw	r18, r30
    247a:	24 5f       	subi	r18, 0xF4	; 244
    247c:	3f 4f       	sbci	r19, 0xFF	; 255
    247e:	62 17       	cp	r22, r18
    2480:	73 07       	cpc	r23, r19
    2482:	31 f4       	brne	.+12     	; 0x2490 <xTaskIncrementTick+0x144>
    2484:	20 89       	ldd	r18, Z+16	; 0x10
    2486:	31 89       	ldd	r19, Z+17	; 0x11
    2488:	12 96       	adiw	r26, 0x02	; 2
    248a:	3c 93       	st	X, r19
    248c:	2e 93       	st	-X, r18
    248e:	11 97       	sbiw	r26, 0x01	; 1
    2490:	15 8a       	std	Z+21, r1	; 0x15
    2492:	14 8a       	std	Z+20, r1	; 0x14
    2494:	9c 91       	ld	r25, X
    2496:	91 50       	subi	r25, 0x01	; 1
    2498:	9c 93       	st	X, r25
    249a:	26 89       	ldd	r18, Z+22	; 0x16
    249c:	90 91 16 07 	lds	r25, 0x0716	; 0x800716 <uxTopReadyPriority>
    24a0:	92 17       	cp	r25, r18
    24a2:	10 f4       	brcc	.+4      	; 0x24a8 <xTaskIncrementTick+0x15c>
    24a4:	20 93 16 07 	sts	0x0716, r18	; 0x800716 <uxTopReadyPriority>
    24a8:	30 e0       	ldi	r19, 0x00	; 0
    24aa:	d9 01       	movw	r26, r18
    24ac:	aa 0f       	add	r26, r26
    24ae:	bb 1f       	adc	r27, r27
    24b0:	aa 0f       	add	r26, r26
    24b2:	bb 1f       	adc	r27, r27
    24b4:	aa 0f       	add	r26, r26
    24b6:	bb 1f       	adc	r27, r27
    24b8:	2a 0f       	add	r18, r26
    24ba:	3b 1f       	adc	r19, r27
    24bc:	d9 01       	movw	r26, r18
    24be:	a4 5b       	subi	r26, 0xB4	; 180
    24c0:	b8 4f       	sbci	r27, 0xF8	; 248
    24c2:	11 96       	adiw	r26, 0x01	; 1
    24c4:	0d 90       	ld	r0, X+
    24c6:	bc 91       	ld	r27, X
    24c8:	a0 2d       	mov	r26, r0
    24ca:	b5 83       	std	Z+5, r27	; 0x05
    24cc:	a4 83       	std	Z+4, r26	; 0x04
    24ce:	14 96       	adiw	r26, 0x04	; 4
    24d0:	2d 91       	ld	r18, X+
    24d2:	3c 91       	ld	r19, X
    24d4:	15 97       	sbiw	r26, 0x05	; 5
    24d6:	37 83       	std	Z+7, r19	; 0x07
    24d8:	26 83       	std	Z+6, r18	; 0x06
    24da:	14 96       	adiw	r26, 0x04	; 4
    24dc:	2d 91       	ld	r18, X+
    24de:	3c 91       	ld	r19, X
    24e0:	15 97       	sbiw	r26, 0x05	; 5
    24e2:	e9 01       	movw	r28, r18
    24e4:	5b 83       	std	Y+3, r21	; 0x03
    24e6:	4a 83       	std	Y+2, r20	; 0x02
    24e8:	15 96       	adiw	r26, 0x05	; 5
    24ea:	5c 93       	st	X, r21
    24ec:	4e 93       	st	-X, r20
    24ee:	14 97       	sbiw	r26, 0x04	; 4
    24f0:	a6 89       	ldd	r26, Z+22	; 0x16
    24f2:	b0 e0       	ldi	r27, 0x00	; 0
    24f4:	9d 01       	movw	r18, r26
    24f6:	22 0f       	add	r18, r18
    24f8:	33 1f       	adc	r19, r19
    24fa:	22 0f       	add	r18, r18
    24fc:	33 1f       	adc	r19, r19
    24fe:	22 0f       	add	r18, r18
    2500:	33 1f       	adc	r19, r19
    2502:	a2 0f       	add	r26, r18
    2504:	b3 1f       	adc	r27, r19
    2506:	a4 5b       	subi	r26, 0xB4	; 180
    2508:	b8 4f       	sbci	r27, 0xF8	; 248
    250a:	b3 87       	std	Z+11, r27	; 0x0b
    250c:	a2 87       	std	Z+10, r26	; 0x0a
    250e:	9c 91       	ld	r25, X
    2510:	9f 5f       	subi	r25, 0xFF	; 255
    2512:	9c 93       	st	X, r25
    2514:	26 89       	ldd	r18, Z+22	; 0x16
    2516:	e0 91 67 07 	lds	r30, 0x0767	; 0x800767 <pxCurrentTCB>
    251a:	f0 91 68 07 	lds	r31, 0x0768	; 0x800768 <pxCurrentTCB+0x1>
    251e:	96 89       	ldd	r25, Z+22	; 0x16
    2520:	92 17       	cp	r25, r18
    2522:	08 f4       	brcc	.+2      	; 0x2526 <xTaskIncrementTick+0x1da>
    2524:	49 cf       	rjmp	.-366    	; 0x23b8 <xTaskIncrementTick+0x6c>
    2526:	4b cf       	rjmp	.-362    	; 0x23be <xTaskIncrementTick+0x72>
    2528:	e0 91 67 07 	lds	r30, 0x0767	; 0x800767 <pxCurrentTCB>
    252c:	f0 91 68 07 	lds	r31, 0x0768	; 0x800768 <pxCurrentTCB+0x1>
    2530:	26 89       	ldd	r18, Z+22	; 0x16
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	f9 01       	movw	r30, r18
    2536:	ee 0f       	add	r30, r30
    2538:	ff 1f       	adc	r31, r31
    253a:	ee 0f       	add	r30, r30
    253c:	ff 1f       	adc	r31, r31
    253e:	ee 0f       	add	r30, r30
    2540:	ff 1f       	adc	r31, r31
    2542:	2e 0f       	add	r18, r30
    2544:	3f 1f       	adc	r19, r31
    2546:	f9 01       	movw	r30, r18
    2548:	e4 5b       	subi	r30, 0xB4	; 180
    254a:	f8 4f       	sbci	r31, 0xF8	; 248
    254c:	90 81       	ld	r25, Z
    254e:	92 30       	cpi	r25, 0x02	; 2
    2550:	08 f0       	brcs	.+2      	; 0x2554 <xTaskIncrementTick+0x208>
    2552:	81 e0       	ldi	r24, 0x01	; 1
    2554:	90 91 12 07 	lds	r25, 0x0712	; 0x800712 <xYieldPending>
    2558:	91 11       	cpse	r25, r1
    255a:	0c c0       	rjmp	.+24     	; 0x2574 <xTaskIncrementTick+0x228>
    255c:	0c c0       	rjmp	.+24     	; 0x2576 <xTaskIncrementTick+0x22a>
    255e:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <xPendedTicks>
    2562:	90 91 14 07 	lds	r25, 0x0714	; 0x800714 <xPendedTicks+0x1>
    2566:	01 96       	adiw	r24, 0x01	; 1
    2568:	90 93 14 07 	sts	0x0714, r25	; 0x800714 <xPendedTicks+0x1>
    256c:	80 93 13 07 	sts	0x0713, r24	; 0x800713 <xPendedTicks>
    2570:	80 e0       	ldi	r24, 0x00	; 0
    2572:	01 c0       	rjmp	.+2      	; 0x2576 <xTaskIncrementTick+0x22a>
    2574:	81 e0       	ldi	r24, 0x01	; 1
    2576:	df 91       	pop	r29
    2578:	cf 91       	pop	r28
    257a:	1f 91       	pop	r17
    257c:	0f 91       	pop	r16
    257e:	08 95       	ret

00002580 <xTaskResumeAll>:
    2580:	cf 93       	push	r28
    2582:	df 93       	push	r29
    2584:	0f b6       	in	r0, 0x3f	; 63
    2586:	f8 94       	cli
    2588:	0f 92       	push	r0
    258a:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <uxSchedulerSuspended>
    258e:	81 50       	subi	r24, 0x01	; 1
    2590:	80 93 0b 07 	sts	0x070B, r24	; 0x80070b <uxSchedulerSuspended>
    2594:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <uxSchedulerSuspended>
    2598:	81 11       	cpse	r24, r1
    259a:	bf c0       	rjmp	.+382    	; 0x271a <xTaskResumeAll+0x19a>
    259c:	80 91 19 07 	lds	r24, 0x0719	; 0x800719 <uxCurrentNumberOfTasks>
    25a0:	81 11       	cpse	r24, r1
    25a2:	96 c0       	rjmp	.+300    	; 0x26d0 <xTaskResumeAll+0x150>
    25a4:	bd c0       	rjmp	.+378    	; 0x2720 <xTaskResumeAll+0x1a0>
    25a6:	e0 91 32 07 	lds	r30, 0x0732	; 0x800732 <xPendingReadyList+0x5>
    25aa:	f0 91 33 07 	lds	r31, 0x0733	; 0x800733 <xPendingReadyList+0x6>
    25ae:	06 80       	ldd	r0, Z+6	; 0x06
    25b0:	f7 81       	ldd	r31, Z+7	; 0x07
    25b2:	e0 2d       	mov	r30, r0
    25b4:	a4 89       	ldd	r26, Z+20	; 0x14
    25b6:	b5 89       	ldd	r27, Z+21	; 0x15
    25b8:	c6 85       	ldd	r28, Z+14	; 0x0e
    25ba:	d7 85       	ldd	r29, Z+15	; 0x0f
    25bc:	80 89       	ldd	r24, Z+16	; 0x10
    25be:	91 89       	ldd	r25, Z+17	; 0x11
    25c0:	9d 83       	std	Y+5, r25	; 0x05
    25c2:	8c 83       	std	Y+4, r24	; 0x04
    25c4:	c0 89       	ldd	r28, Z+16	; 0x10
    25c6:	d1 89       	ldd	r29, Z+17	; 0x11
    25c8:	86 85       	ldd	r24, Z+14	; 0x0e
    25ca:	97 85       	ldd	r25, Z+15	; 0x0f
    25cc:	9b 83       	std	Y+3, r25	; 0x03
    25ce:	8a 83       	std	Y+2, r24	; 0x02
    25d0:	11 96       	adiw	r26, 0x01	; 1
    25d2:	2d 91       	ld	r18, X+
    25d4:	3c 91       	ld	r19, X
    25d6:	12 97       	sbiw	r26, 0x02	; 2
    25d8:	cf 01       	movw	r24, r30
    25da:	0c 96       	adiw	r24, 0x0c	; 12
    25dc:	28 17       	cp	r18, r24
    25de:	39 07       	cpc	r19, r25
    25e0:	31 f4       	brne	.+12     	; 0x25ee <xTaskResumeAll+0x6e>
    25e2:	80 89       	ldd	r24, Z+16	; 0x10
    25e4:	91 89       	ldd	r25, Z+17	; 0x11
    25e6:	12 96       	adiw	r26, 0x02	; 2
    25e8:	9c 93       	st	X, r25
    25ea:	8e 93       	st	-X, r24
    25ec:	11 97       	sbiw	r26, 0x01	; 1
    25ee:	15 8a       	std	Z+21, r1	; 0x15
    25f0:	14 8a       	std	Z+20, r1	; 0x14
    25f2:	8c 91       	ld	r24, X
    25f4:	81 50       	subi	r24, 0x01	; 1
    25f6:	8c 93       	st	X, r24
    25f8:	a2 85       	ldd	r26, Z+10	; 0x0a
    25fa:	b3 85       	ldd	r27, Z+11	; 0x0b
    25fc:	c4 81       	ldd	r28, Z+4	; 0x04
    25fe:	d5 81       	ldd	r29, Z+5	; 0x05
    2600:	86 81       	ldd	r24, Z+6	; 0x06
    2602:	97 81       	ldd	r25, Z+7	; 0x07
    2604:	9d 83       	std	Y+5, r25	; 0x05
    2606:	8c 83       	std	Y+4, r24	; 0x04
    2608:	c6 81       	ldd	r28, Z+6	; 0x06
    260a:	d7 81       	ldd	r29, Z+7	; 0x07
    260c:	84 81       	ldd	r24, Z+4	; 0x04
    260e:	95 81       	ldd	r25, Z+5	; 0x05
    2610:	9b 83       	std	Y+3, r25	; 0x03
    2612:	8a 83       	std	Y+2, r24	; 0x02
    2614:	11 96       	adiw	r26, 0x01	; 1
    2616:	8d 91       	ld	r24, X+
    2618:	9c 91       	ld	r25, X
    261a:	12 97       	sbiw	r26, 0x02	; 2
    261c:	9f 01       	movw	r18, r30
    261e:	2e 5f       	subi	r18, 0xFE	; 254
    2620:	3f 4f       	sbci	r19, 0xFF	; 255
    2622:	82 17       	cp	r24, r18
    2624:	93 07       	cpc	r25, r19
    2626:	31 f4       	brne	.+12     	; 0x2634 <xTaskResumeAll+0xb4>
    2628:	86 81       	ldd	r24, Z+6	; 0x06
    262a:	97 81       	ldd	r25, Z+7	; 0x07
    262c:	12 96       	adiw	r26, 0x02	; 2
    262e:	9c 93       	st	X, r25
    2630:	8e 93       	st	-X, r24
    2632:	11 97       	sbiw	r26, 0x01	; 1
    2634:	13 86       	std	Z+11, r1	; 0x0b
    2636:	12 86       	std	Z+10, r1	; 0x0a
    2638:	8c 91       	ld	r24, X
    263a:	81 50       	subi	r24, 0x01	; 1
    263c:	8c 93       	st	X, r24
    263e:	86 89       	ldd	r24, Z+22	; 0x16
    2640:	90 91 16 07 	lds	r25, 0x0716	; 0x800716 <uxTopReadyPriority>
    2644:	98 17       	cp	r25, r24
    2646:	10 f4       	brcc	.+4      	; 0x264c <xTaskResumeAll+0xcc>
    2648:	80 93 16 07 	sts	0x0716, r24	; 0x800716 <uxTopReadyPriority>
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	dc 01       	movw	r26, r24
    2650:	aa 0f       	add	r26, r26
    2652:	bb 1f       	adc	r27, r27
    2654:	aa 0f       	add	r26, r26
    2656:	bb 1f       	adc	r27, r27
    2658:	aa 0f       	add	r26, r26
    265a:	bb 1f       	adc	r27, r27
    265c:	8a 0f       	add	r24, r26
    265e:	9b 1f       	adc	r25, r27
    2660:	dc 01       	movw	r26, r24
    2662:	a4 5b       	subi	r26, 0xB4	; 180
    2664:	b8 4f       	sbci	r27, 0xF8	; 248
    2666:	11 96       	adiw	r26, 0x01	; 1
    2668:	0d 90       	ld	r0, X+
    266a:	bc 91       	ld	r27, X
    266c:	a0 2d       	mov	r26, r0
    266e:	b5 83       	std	Z+5, r27	; 0x05
    2670:	a4 83       	std	Z+4, r26	; 0x04
    2672:	14 96       	adiw	r26, 0x04	; 4
    2674:	8d 91       	ld	r24, X+
    2676:	9c 91       	ld	r25, X
    2678:	15 97       	sbiw	r26, 0x05	; 5
    267a:	97 83       	std	Z+7, r25	; 0x07
    267c:	86 83       	std	Z+6, r24	; 0x06
    267e:	14 96       	adiw	r26, 0x04	; 4
    2680:	cd 91       	ld	r28, X+
    2682:	dc 91       	ld	r29, X
    2684:	15 97       	sbiw	r26, 0x05	; 5
    2686:	3b 83       	std	Y+3, r19	; 0x03
    2688:	2a 83       	std	Y+2, r18	; 0x02
    268a:	15 96       	adiw	r26, 0x05	; 5
    268c:	3c 93       	st	X, r19
    268e:	2e 93       	st	-X, r18
    2690:	14 97       	sbiw	r26, 0x04	; 4
    2692:	a6 89       	ldd	r26, Z+22	; 0x16
    2694:	b0 e0       	ldi	r27, 0x00	; 0
    2696:	cd 01       	movw	r24, r26
    2698:	88 0f       	add	r24, r24
    269a:	99 1f       	adc	r25, r25
    269c:	88 0f       	add	r24, r24
    269e:	99 1f       	adc	r25, r25
    26a0:	88 0f       	add	r24, r24
    26a2:	99 1f       	adc	r25, r25
    26a4:	a8 0f       	add	r26, r24
    26a6:	b9 1f       	adc	r27, r25
    26a8:	a4 5b       	subi	r26, 0xB4	; 180
    26aa:	b8 4f       	sbci	r27, 0xF8	; 248
    26ac:	b3 87       	std	Z+11, r27	; 0x0b
    26ae:	a2 87       	std	Z+10, r26	; 0x0a
    26b0:	8c 91       	ld	r24, X
    26b2:	8f 5f       	subi	r24, 0xFF	; 255
    26b4:	8c 93       	st	X, r24
    26b6:	96 89       	ldd	r25, Z+22	; 0x16
    26b8:	a0 91 67 07 	lds	r26, 0x0767	; 0x800767 <pxCurrentTCB>
    26bc:	b0 91 68 07 	lds	r27, 0x0768	; 0x800768 <pxCurrentTCB+0x1>
    26c0:	56 96       	adiw	r26, 0x16	; 22
    26c2:	8c 91       	ld	r24, X
    26c4:	98 17       	cp	r25, r24
    26c6:	30 f0       	brcs	.+12     	; 0x26d4 <xTaskResumeAll+0x154>
    26c8:	81 e0       	ldi	r24, 0x01	; 1
    26ca:	80 93 12 07 	sts	0x0712, r24	; 0x800712 <xYieldPending>
    26ce:	02 c0       	rjmp	.+4      	; 0x26d4 <xTaskResumeAll+0x154>
    26d0:	e0 e0       	ldi	r30, 0x00	; 0
    26d2:	f0 e0       	ldi	r31, 0x00	; 0
    26d4:	80 91 2d 07 	lds	r24, 0x072D	; 0x80072d <xPendingReadyList>
    26d8:	81 11       	cpse	r24, r1
    26da:	65 cf       	rjmp	.-310    	; 0x25a6 <xTaskResumeAll+0x26>
    26dc:	ef 2b       	or	r30, r31
    26de:	11 f0       	breq	.+4      	; 0x26e4 <xTaskResumeAll+0x164>
    26e0:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <prvResetNextTaskUnblockTime>
    26e4:	c0 91 13 07 	lds	r28, 0x0713	; 0x800713 <xPendedTicks>
    26e8:	d0 91 14 07 	lds	r29, 0x0714	; 0x800714 <xPendedTicks+0x1>
    26ec:	20 97       	sbiw	r28, 0x00	; 0
    26ee:	69 f0       	breq	.+26     	; 0x270a <xTaskResumeAll+0x18a>
    26f0:	0e 94 a6 11 	call	0x234c	; 0x234c <xTaskIncrementTick>
    26f4:	88 23       	and	r24, r24
    26f6:	19 f0       	breq	.+6      	; 0x26fe <xTaskResumeAll+0x17e>
    26f8:	81 e0       	ldi	r24, 0x01	; 1
    26fa:	80 93 12 07 	sts	0x0712, r24	; 0x800712 <xYieldPending>
    26fe:	21 97       	sbiw	r28, 0x01	; 1
    2700:	b9 f7       	brne	.-18     	; 0x26f0 <xTaskResumeAll+0x170>
    2702:	10 92 14 07 	sts	0x0714, r1	; 0x800714 <xPendedTicks+0x1>
    2706:	10 92 13 07 	sts	0x0713, r1	; 0x800713 <xPendedTicks>
    270a:	80 91 12 07 	lds	r24, 0x0712	; 0x800712 <xYieldPending>
    270e:	88 23       	and	r24, r24
    2710:	31 f0       	breq	.+12     	; 0x271e <xTaskResumeAll+0x19e>
    2712:	0e 94 98 0a 	call	0x1530	; 0x1530 <vPortYield>
    2716:	81 e0       	ldi	r24, 0x01	; 1
    2718:	03 c0       	rjmp	.+6      	; 0x2720 <xTaskResumeAll+0x1a0>
    271a:	80 e0       	ldi	r24, 0x00	; 0
    271c:	01 c0       	rjmp	.+2      	; 0x2720 <xTaskResumeAll+0x1a0>
    271e:	80 e0       	ldi	r24, 0x00	; 0
    2720:	0f 90       	pop	r0
    2722:	0f be       	out	0x3f, r0	; 63
    2724:	df 91       	pop	r29
    2726:	cf 91       	pop	r28
    2728:	08 95       	ret

0000272a <vTaskDelay>:
    272a:	cf 93       	push	r28
    272c:	df 93       	push	r29
    272e:	ec 01       	movw	r28, r24
    2730:	89 2b       	or	r24, r25
    2732:	49 f0       	breq	.+18     	; 0x2746 <vTaskDelay+0x1c>
    2734:	0e 94 a0 11 	call	0x2340	; 0x2340 <vTaskSuspendAll>
    2738:	60 e0       	ldi	r22, 0x00	; 0
    273a:	ce 01       	movw	r24, r28
    273c:	0e 94 34 10 	call	0x2068	; 0x2068 <prvAddCurrentTaskToDelayedList>
    2740:	0e 94 c0 12 	call	0x2580	; 0x2580 <xTaskResumeAll>
    2744:	01 c0       	rjmp	.+2      	; 0x2748 <vTaskDelay+0x1e>
    2746:	80 e0       	ldi	r24, 0x00	; 0
    2748:	81 11       	cpse	r24, r1
    274a:	02 c0       	rjmp	.+4      	; 0x2750 <vTaskDelay+0x26>
    274c:	0e 94 98 0a 	call	0x1530	; 0x1530 <vPortYield>
    2750:	df 91       	pop	r29
    2752:	cf 91       	pop	r28
    2754:	08 95       	ret

00002756 <vTaskSwitchContext>:
    2756:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <uxSchedulerSuspended>
    275a:	88 23       	and	r24, r24
    275c:	21 f0       	breq	.+8      	; 0x2766 <vTaskSwitchContext+0x10>
    275e:	81 e0       	ldi	r24, 0x01	; 1
    2760:	80 93 12 07 	sts	0x0712, r24	; 0x800712 <xYieldPending>
    2764:	08 95       	ret
    2766:	10 92 12 07 	sts	0x0712, r1	; 0x800712 <xYieldPending>
    276a:	20 91 16 07 	lds	r18, 0x0716	; 0x800716 <uxTopReadyPriority>
    276e:	01 c0       	rjmp	.+2      	; 0x2772 <vTaskSwitchContext+0x1c>
    2770:	21 50       	subi	r18, 0x01	; 1
    2772:	82 2f       	mov	r24, r18
    2774:	90 e0       	ldi	r25, 0x00	; 0
    2776:	fc 01       	movw	r30, r24
    2778:	ee 0f       	add	r30, r30
    277a:	ff 1f       	adc	r31, r31
    277c:	ee 0f       	add	r30, r30
    277e:	ff 1f       	adc	r31, r31
    2780:	ee 0f       	add	r30, r30
    2782:	ff 1f       	adc	r31, r31
    2784:	e8 0f       	add	r30, r24
    2786:	f9 1f       	adc	r31, r25
    2788:	e4 5b       	subi	r30, 0xB4	; 180
    278a:	f8 4f       	sbci	r31, 0xF8	; 248
    278c:	30 81       	ld	r19, Z
    278e:	33 23       	and	r19, r19
    2790:	79 f3       	breq	.-34     	; 0x2770 <vTaskSwitchContext+0x1a>
    2792:	ac 01       	movw	r20, r24
    2794:	44 0f       	add	r20, r20
    2796:	55 1f       	adc	r21, r21
    2798:	44 0f       	add	r20, r20
    279a:	55 1f       	adc	r21, r21
    279c:	44 0f       	add	r20, r20
    279e:	55 1f       	adc	r21, r21
    27a0:	48 0f       	add	r20, r24
    27a2:	59 1f       	adc	r21, r25
    27a4:	df 01       	movw	r26, r30
    27a6:	01 80       	ldd	r0, Z+1	; 0x01
    27a8:	f2 81       	ldd	r31, Z+2	; 0x02
    27aa:	e0 2d       	mov	r30, r0
    27ac:	02 80       	ldd	r0, Z+2	; 0x02
    27ae:	f3 81       	ldd	r31, Z+3	; 0x03
    27b0:	e0 2d       	mov	r30, r0
    27b2:	12 96       	adiw	r26, 0x02	; 2
    27b4:	fc 93       	st	X, r31
    27b6:	ee 93       	st	-X, r30
    27b8:	11 97       	sbiw	r26, 0x01	; 1
    27ba:	41 5b       	subi	r20, 0xB1	; 177
    27bc:	58 4f       	sbci	r21, 0xF8	; 248
    27be:	e4 17       	cp	r30, r20
    27c0:	f5 07       	cpc	r31, r21
    27c2:	29 f4       	brne	.+10     	; 0x27ce <vTaskSwitchContext+0x78>
    27c4:	42 81       	ldd	r20, Z+2	; 0x02
    27c6:	53 81       	ldd	r21, Z+3	; 0x03
    27c8:	fd 01       	movw	r30, r26
    27ca:	52 83       	std	Z+2, r21	; 0x02
    27cc:	41 83       	std	Z+1, r20	; 0x01
    27ce:	fc 01       	movw	r30, r24
    27d0:	ee 0f       	add	r30, r30
    27d2:	ff 1f       	adc	r31, r31
    27d4:	ee 0f       	add	r30, r30
    27d6:	ff 1f       	adc	r31, r31
    27d8:	ee 0f       	add	r30, r30
    27da:	ff 1f       	adc	r31, r31
    27dc:	8e 0f       	add	r24, r30
    27de:	9f 1f       	adc	r25, r31
    27e0:	fc 01       	movw	r30, r24
    27e2:	e4 5b       	subi	r30, 0xB4	; 180
    27e4:	f8 4f       	sbci	r31, 0xF8	; 248
    27e6:	01 80       	ldd	r0, Z+1	; 0x01
    27e8:	f2 81       	ldd	r31, Z+2	; 0x02
    27ea:	e0 2d       	mov	r30, r0
    27ec:	86 81       	ldd	r24, Z+6	; 0x06
    27ee:	97 81       	ldd	r25, Z+7	; 0x07
    27f0:	90 93 68 07 	sts	0x0768, r25	; 0x800768 <pxCurrentTCB+0x1>
    27f4:	80 93 67 07 	sts	0x0767, r24	; 0x800767 <pxCurrentTCB>
    27f8:	20 93 16 07 	sts	0x0716, r18	; 0x800716 <uxTopReadyPriority>
    27fc:	08 95       	ret

000027fe <vTaskSuspend>:
    27fe:	0f 93       	push	r16
    2800:	1f 93       	push	r17
    2802:	cf 93       	push	r28
    2804:	df 93       	push	r29
    2806:	ec 01       	movw	r28, r24
    2808:	0f b6       	in	r0, 0x3f	; 63
    280a:	f8 94       	cli
    280c:	0f 92       	push	r0
    280e:	89 2b       	or	r24, r25
    2810:	21 f4       	brne	.+8      	; 0x281a <vTaskSuspend+0x1c>
    2812:	c0 91 67 07 	lds	r28, 0x0767	; 0x800767 <pxCurrentTCB>
    2816:	d0 91 68 07 	lds	r29, 0x0768	; 0x800768 <pxCurrentTCB+0x1>
    281a:	8e 01       	movw	r16, r28
    281c:	0e 5f       	subi	r16, 0xFE	; 254
    281e:	1f 4f       	sbci	r17, 0xFF	; 255
    2820:	c8 01       	movw	r24, r16
    2822:	0e 94 cd 09 	call	0x139a	; 0x139a <uxListRemove>
    2826:	8c 89       	ldd	r24, Y+20	; 0x14
    2828:	9d 89       	ldd	r25, Y+21	; 0x15
    282a:	89 2b       	or	r24, r25
    282c:	21 f0       	breq	.+8      	; 0x2836 <vTaskSuspend+0x38>
    282e:	ce 01       	movw	r24, r28
    2830:	0c 96       	adiw	r24, 0x0c	; 12
    2832:	0e 94 cd 09 	call	0x139a	; 0x139a <uxListRemove>
    2836:	b8 01       	movw	r22, r16
    2838:	8a e1       	ldi	r24, 0x1A	; 26
    283a:	97 e0       	ldi	r25, 0x07	; 7
    283c:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <vListInsertEnd>
    2840:	80 e0       	ldi	r24, 0x00	; 0
    2842:	0f c0       	rjmp	.+30     	; 0x2862 <vTaskSuspend+0x64>
    2844:	28 2f       	mov	r18, r24
    2846:	08 2e       	mov	r0, r24
    2848:	00 0c       	add	r0, r0
    284a:	33 0b       	sbc	r19, r19
    284c:	fe 01       	movw	r30, r28
    284e:	e2 0f       	add	r30, r18
    2850:	f3 1f       	adc	r31, r19
    2852:	97 a1       	ldd	r25, Z+39	; 0x27
    2854:	91 30       	cpi	r25, 0x01	; 1
    2856:	21 f4       	brne	.+8      	; 0x2860 <vTaskSuspend+0x62>
    2858:	fe 01       	movw	r30, r28
    285a:	e2 0f       	add	r30, r18
    285c:	f3 1f       	adc	r31, r19
    285e:	17 a2       	std	Z+39, r1	; 0x27
    2860:	8f 5f       	subi	r24, 0xFF	; 255
    2862:	18 16       	cp	r1, r24
    2864:	7c f7       	brge	.-34     	; 0x2844 <vTaskSuspend+0x46>
    2866:	0f 90       	pop	r0
    2868:	0f be       	out	0x3f, r0	; 63
    286a:	80 91 15 07 	lds	r24, 0x0715	; 0x800715 <xSchedulerRunning>
    286e:	88 23       	and	r24, r24
    2870:	39 f0       	breq	.+14     	; 0x2880 <vTaskSuspend+0x82>
    2872:	0f b6       	in	r0, 0x3f	; 63
    2874:	f8 94       	cli
    2876:	0f 92       	push	r0
    2878:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <prvResetNextTaskUnblockTime>
    287c:	0f 90       	pop	r0
    287e:	0f be       	out	0x3f, r0	; 63
    2880:	80 91 67 07 	lds	r24, 0x0767	; 0x800767 <pxCurrentTCB>
    2884:	90 91 68 07 	lds	r25, 0x0768	; 0x800768 <pxCurrentTCB+0x1>
    2888:	c8 17       	cp	r28, r24
    288a:	d9 07       	cpc	r29, r25
    288c:	a1 f4       	brne	.+40     	; 0x28b6 <vTaskSuspend+0xb8>
    288e:	80 91 15 07 	lds	r24, 0x0715	; 0x800715 <xSchedulerRunning>
    2892:	88 23       	and	r24, r24
    2894:	19 f0       	breq	.+6      	; 0x289c <vTaskSuspend+0x9e>
    2896:	0e 94 98 0a 	call	0x1530	; 0x1530 <vPortYield>
    289a:	0d c0       	rjmp	.+26     	; 0x28b6 <vTaskSuspend+0xb8>
    289c:	90 91 1a 07 	lds	r25, 0x071A	; 0x80071a <xSuspendedTaskList>
    28a0:	80 91 19 07 	lds	r24, 0x0719	; 0x800719 <uxCurrentNumberOfTasks>
    28a4:	98 13       	cpse	r25, r24
    28a6:	05 c0       	rjmp	.+10     	; 0x28b2 <vTaskSuspend+0xb4>
    28a8:	10 92 68 07 	sts	0x0768, r1	; 0x800768 <pxCurrentTCB+0x1>
    28ac:	10 92 67 07 	sts	0x0767, r1	; 0x800767 <pxCurrentTCB>
    28b0:	02 c0       	rjmp	.+4      	; 0x28b6 <vTaskSuspend+0xb8>
    28b2:	0e 94 ab 13 	call	0x2756	; 0x2756 <vTaskSwitchContext>
    28b6:	df 91       	pop	r29
    28b8:	cf 91       	pop	r28
    28ba:	1f 91       	pop	r17
    28bc:	0f 91       	pop	r16
    28be:	08 95       	ret

000028c0 <vTaskPlaceOnEventList>:
    28c0:	cf 93       	push	r28
    28c2:	df 93       	push	r29
    28c4:	eb 01       	movw	r28, r22
    28c6:	60 91 67 07 	lds	r22, 0x0767	; 0x800767 <pxCurrentTCB>
    28ca:	70 91 68 07 	lds	r23, 0x0768	; 0x800768 <pxCurrentTCB+0x1>
    28ce:	64 5f       	subi	r22, 0xF4	; 244
    28d0:	7f 4f       	sbci	r23, 0xFF	; 255
    28d2:	0e 94 9c 09 	call	0x1338	; 0x1338 <vListInsert>
    28d6:	61 e0       	ldi	r22, 0x01	; 1
    28d8:	ce 01       	movw	r24, r28
    28da:	0e 94 34 10 	call	0x2068	; 0x2068 <prvAddCurrentTaskToDelayedList>
    28de:	df 91       	pop	r29
    28e0:	cf 91       	pop	r28
    28e2:	08 95       	ret

000028e4 <xTaskRemoveFromEventList>:
    28e4:	cf 93       	push	r28
    28e6:	df 93       	push	r29
    28e8:	dc 01       	movw	r26, r24
    28ea:	15 96       	adiw	r26, 0x05	; 5
    28ec:	ed 91       	ld	r30, X+
    28ee:	fc 91       	ld	r31, X
    28f0:	16 97       	sbiw	r26, 0x06	; 6
    28f2:	06 80       	ldd	r0, Z+6	; 0x06
    28f4:	f7 81       	ldd	r31, Z+7	; 0x07
    28f6:	e0 2d       	mov	r30, r0
    28f8:	a4 89       	ldd	r26, Z+20	; 0x14
    28fa:	b5 89       	ldd	r27, Z+21	; 0x15
    28fc:	c6 85       	ldd	r28, Z+14	; 0x0e
    28fe:	d7 85       	ldd	r29, Z+15	; 0x0f
    2900:	80 89       	ldd	r24, Z+16	; 0x10
    2902:	91 89       	ldd	r25, Z+17	; 0x11
    2904:	9d 83       	std	Y+5, r25	; 0x05
    2906:	8c 83       	std	Y+4, r24	; 0x04
    2908:	c0 89       	ldd	r28, Z+16	; 0x10
    290a:	d1 89       	ldd	r29, Z+17	; 0x11
    290c:	86 85       	ldd	r24, Z+14	; 0x0e
    290e:	97 85       	ldd	r25, Z+15	; 0x0f
    2910:	9b 83       	std	Y+3, r25	; 0x03
    2912:	8a 83       	std	Y+2, r24	; 0x02
    2914:	11 96       	adiw	r26, 0x01	; 1
    2916:	8d 91       	ld	r24, X+
    2918:	9c 91       	ld	r25, X
    291a:	12 97       	sbiw	r26, 0x02	; 2
    291c:	9f 01       	movw	r18, r30
    291e:	24 5f       	subi	r18, 0xF4	; 244
    2920:	3f 4f       	sbci	r19, 0xFF	; 255
    2922:	82 17       	cp	r24, r18
    2924:	93 07       	cpc	r25, r19
    2926:	31 f4       	brne	.+12     	; 0x2934 <xTaskRemoveFromEventList+0x50>
    2928:	80 89       	ldd	r24, Z+16	; 0x10
    292a:	91 89       	ldd	r25, Z+17	; 0x11
    292c:	12 96       	adiw	r26, 0x02	; 2
    292e:	9c 93       	st	X, r25
    2930:	8e 93       	st	-X, r24
    2932:	11 97       	sbiw	r26, 0x01	; 1
    2934:	15 8a       	std	Z+21, r1	; 0x15
    2936:	14 8a       	std	Z+20, r1	; 0x14
    2938:	8c 91       	ld	r24, X
    293a:	81 50       	subi	r24, 0x01	; 1
    293c:	8c 93       	st	X, r24
    293e:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <uxSchedulerSuspended>
    2942:	81 11       	cpse	r24, r1
    2944:	60 c0       	rjmp	.+192    	; 0x2a06 <xTaskRemoveFromEventList+0x122>
    2946:	a2 85       	ldd	r26, Z+10	; 0x0a
    2948:	b3 85       	ldd	r27, Z+11	; 0x0b
    294a:	c4 81       	ldd	r28, Z+4	; 0x04
    294c:	d5 81       	ldd	r29, Z+5	; 0x05
    294e:	86 81       	ldd	r24, Z+6	; 0x06
    2950:	97 81       	ldd	r25, Z+7	; 0x07
    2952:	9d 83       	std	Y+5, r25	; 0x05
    2954:	8c 83       	std	Y+4, r24	; 0x04
    2956:	c6 81       	ldd	r28, Z+6	; 0x06
    2958:	d7 81       	ldd	r29, Z+7	; 0x07
    295a:	84 81       	ldd	r24, Z+4	; 0x04
    295c:	95 81       	ldd	r25, Z+5	; 0x05
    295e:	9b 83       	std	Y+3, r25	; 0x03
    2960:	8a 83       	std	Y+2, r24	; 0x02
    2962:	11 96       	adiw	r26, 0x01	; 1
    2964:	8d 91       	ld	r24, X+
    2966:	9c 91       	ld	r25, X
    2968:	12 97       	sbiw	r26, 0x02	; 2
    296a:	9f 01       	movw	r18, r30
    296c:	2e 5f       	subi	r18, 0xFE	; 254
    296e:	3f 4f       	sbci	r19, 0xFF	; 255
    2970:	82 17       	cp	r24, r18
    2972:	93 07       	cpc	r25, r19
    2974:	31 f4       	brne	.+12     	; 0x2982 <xTaskRemoveFromEventList+0x9e>
    2976:	86 81       	ldd	r24, Z+6	; 0x06
    2978:	97 81       	ldd	r25, Z+7	; 0x07
    297a:	12 96       	adiw	r26, 0x02	; 2
    297c:	9c 93       	st	X, r25
    297e:	8e 93       	st	-X, r24
    2980:	11 97       	sbiw	r26, 0x01	; 1
    2982:	13 86       	std	Z+11, r1	; 0x0b
    2984:	12 86       	std	Z+10, r1	; 0x0a
    2986:	8c 91       	ld	r24, X
    2988:	81 50       	subi	r24, 0x01	; 1
    298a:	8c 93       	st	X, r24
    298c:	86 89       	ldd	r24, Z+22	; 0x16
    298e:	90 91 16 07 	lds	r25, 0x0716	; 0x800716 <uxTopReadyPriority>
    2992:	98 17       	cp	r25, r24
    2994:	10 f4       	brcc	.+4      	; 0x299a <xTaskRemoveFromEventList+0xb6>
    2996:	80 93 16 07 	sts	0x0716, r24	; 0x800716 <uxTopReadyPriority>
    299a:	90 e0       	ldi	r25, 0x00	; 0
    299c:	dc 01       	movw	r26, r24
    299e:	aa 0f       	add	r26, r26
    29a0:	bb 1f       	adc	r27, r27
    29a2:	aa 0f       	add	r26, r26
    29a4:	bb 1f       	adc	r27, r27
    29a6:	aa 0f       	add	r26, r26
    29a8:	bb 1f       	adc	r27, r27
    29aa:	8a 0f       	add	r24, r26
    29ac:	9b 1f       	adc	r25, r27
    29ae:	dc 01       	movw	r26, r24
    29b0:	a4 5b       	subi	r26, 0xB4	; 180
    29b2:	b8 4f       	sbci	r27, 0xF8	; 248
    29b4:	11 96       	adiw	r26, 0x01	; 1
    29b6:	0d 90       	ld	r0, X+
    29b8:	bc 91       	ld	r27, X
    29ba:	a0 2d       	mov	r26, r0
    29bc:	b5 83       	std	Z+5, r27	; 0x05
    29be:	a4 83       	std	Z+4, r26	; 0x04
    29c0:	14 96       	adiw	r26, 0x04	; 4
    29c2:	8d 91       	ld	r24, X+
    29c4:	9c 91       	ld	r25, X
    29c6:	15 97       	sbiw	r26, 0x05	; 5
    29c8:	97 83       	std	Z+7, r25	; 0x07
    29ca:	86 83       	std	Z+6, r24	; 0x06
    29cc:	14 96       	adiw	r26, 0x04	; 4
    29ce:	cd 91       	ld	r28, X+
    29d0:	dc 91       	ld	r29, X
    29d2:	15 97       	sbiw	r26, 0x05	; 5
    29d4:	3b 83       	std	Y+3, r19	; 0x03
    29d6:	2a 83       	std	Y+2, r18	; 0x02
    29d8:	15 96       	adiw	r26, 0x05	; 5
    29da:	3c 93       	st	X, r19
    29dc:	2e 93       	st	-X, r18
    29de:	14 97       	sbiw	r26, 0x04	; 4
    29e0:	a6 89       	ldd	r26, Z+22	; 0x16
    29e2:	b0 e0       	ldi	r27, 0x00	; 0
    29e4:	cd 01       	movw	r24, r26
    29e6:	88 0f       	add	r24, r24
    29e8:	99 1f       	adc	r25, r25
    29ea:	88 0f       	add	r24, r24
    29ec:	99 1f       	adc	r25, r25
    29ee:	88 0f       	add	r24, r24
    29f0:	99 1f       	adc	r25, r25
    29f2:	a8 0f       	add	r26, r24
    29f4:	b9 1f       	adc	r27, r25
    29f6:	a4 5b       	subi	r26, 0xB4	; 180
    29f8:	b8 4f       	sbci	r27, 0xF8	; 248
    29fa:	b3 87       	std	Z+11, r27	; 0x0b
    29fc:	a2 87       	std	Z+10, r26	; 0x0a
    29fe:	8c 91       	ld	r24, X
    2a00:	8f 5f       	subi	r24, 0xFF	; 255
    2a02:	8c 93       	st	X, r24
    2a04:	1c c0       	rjmp	.+56     	; 0x2a3e <xTaskRemoveFromEventList+0x15a>
    2a06:	4d e2       	ldi	r20, 0x2D	; 45
    2a08:	57 e0       	ldi	r21, 0x07	; 7
    2a0a:	da 01       	movw	r26, r20
    2a0c:	11 96       	adiw	r26, 0x01	; 1
    2a0e:	cd 91       	ld	r28, X+
    2a10:	dc 91       	ld	r29, X
    2a12:	12 97       	sbiw	r26, 0x02	; 2
    2a14:	d7 87       	std	Z+15, r29	; 0x0f
    2a16:	c6 87       	std	Z+14, r28	; 0x0e
    2a18:	8c 81       	ldd	r24, Y+4	; 0x04
    2a1a:	9d 81       	ldd	r25, Y+5	; 0x05
    2a1c:	91 8b       	std	Z+17, r25	; 0x11
    2a1e:	80 8b       	std	Z+16, r24	; 0x10
    2a20:	8c 81       	ldd	r24, Y+4	; 0x04
    2a22:	9d 81       	ldd	r25, Y+5	; 0x05
    2a24:	dc 01       	movw	r26, r24
    2a26:	13 96       	adiw	r26, 0x03	; 3
    2a28:	3c 93       	st	X, r19
    2a2a:	2e 93       	st	-X, r18
    2a2c:	12 97       	sbiw	r26, 0x02	; 2
    2a2e:	3d 83       	std	Y+5, r19	; 0x05
    2a30:	2c 83       	std	Y+4, r18	; 0x04
    2a32:	55 8b       	std	Z+21, r21	; 0x15
    2a34:	44 8b       	std	Z+20, r20	; 0x14
    2a36:	da 01       	movw	r26, r20
    2a38:	8c 91       	ld	r24, X
    2a3a:	8f 5f       	subi	r24, 0xFF	; 255
    2a3c:	8c 93       	st	X, r24
    2a3e:	96 89       	ldd	r25, Z+22	; 0x16
    2a40:	e0 91 67 07 	lds	r30, 0x0767	; 0x800767 <pxCurrentTCB>
    2a44:	f0 91 68 07 	lds	r31, 0x0768	; 0x800768 <pxCurrentTCB+0x1>
    2a48:	86 89       	ldd	r24, Z+22	; 0x16
    2a4a:	89 17       	cp	r24, r25
    2a4c:	20 f4       	brcc	.+8      	; 0x2a56 <xTaskRemoveFromEventList+0x172>
    2a4e:	81 e0       	ldi	r24, 0x01	; 1
    2a50:	80 93 12 07 	sts	0x0712, r24	; 0x800712 <xYieldPending>
    2a54:	01 c0       	rjmp	.+2      	; 0x2a58 <xTaskRemoveFromEventList+0x174>
    2a56:	80 e0       	ldi	r24, 0x00	; 0
    2a58:	df 91       	pop	r29
    2a5a:	cf 91       	pop	r28
    2a5c:	08 95       	ret

00002a5e <vTaskRemoveFromUnorderedEventList>:
    2a5e:	cf 93       	push	r28
    2a60:	df 93       	push	r29
    2a62:	dc 01       	movw	r26, r24
    2a64:	70 68       	ori	r23, 0x80	; 128
    2a66:	11 96       	adiw	r26, 0x01	; 1
    2a68:	7c 93       	st	X, r23
    2a6a:	6e 93       	st	-X, r22
    2a6c:	16 96       	adiw	r26, 0x06	; 6
    2a6e:	ed 91       	ld	r30, X+
    2a70:	fc 91       	ld	r31, X
    2a72:	17 97       	sbiw	r26, 0x07	; 7
    2a74:	18 96       	adiw	r26, 0x08	; 8
    2a76:	4d 91       	ld	r20, X+
    2a78:	5c 91       	ld	r21, X
    2a7a:	19 97       	sbiw	r26, 0x09	; 9
    2a7c:	12 96       	adiw	r26, 0x02	; 2
    2a7e:	8d 91       	ld	r24, X+
    2a80:	9c 91       	ld	r25, X
    2a82:	13 97       	sbiw	r26, 0x03	; 3
    2a84:	14 96       	adiw	r26, 0x04	; 4
    2a86:	2d 91       	ld	r18, X+
    2a88:	3c 91       	ld	r19, X
    2a8a:	15 97       	sbiw	r26, 0x05	; 5
    2a8c:	ec 01       	movw	r28, r24
    2a8e:	3d 83       	std	Y+5, r19	; 0x05
    2a90:	2c 83       	std	Y+4, r18	; 0x04
    2a92:	14 96       	adiw	r26, 0x04	; 4
    2a94:	8d 91       	ld	r24, X+
    2a96:	9c 91       	ld	r25, X
    2a98:	15 97       	sbiw	r26, 0x05	; 5
    2a9a:	12 96       	adiw	r26, 0x02	; 2
    2a9c:	2d 91       	ld	r18, X+
    2a9e:	3c 91       	ld	r19, X
    2aa0:	13 97       	sbiw	r26, 0x03	; 3
    2aa2:	ec 01       	movw	r28, r24
    2aa4:	3b 83       	std	Y+3, r19	; 0x03
    2aa6:	2a 83       	std	Y+2, r18	; 0x02
    2aa8:	ea 01       	movw	r28, r20
    2aaa:	89 81       	ldd	r24, Y+1	; 0x01
    2aac:	9a 81       	ldd	r25, Y+2	; 0x02
    2aae:	a8 17       	cp	r26, r24
    2ab0:	b9 07       	cpc	r27, r25
    2ab2:	31 f4       	brne	.+12     	; 0x2ac0 <vTaskRemoveFromUnorderedEventList+0x62>
    2ab4:	14 96       	adiw	r26, 0x04	; 4
    2ab6:	8d 91       	ld	r24, X+
    2ab8:	9c 91       	ld	r25, X
    2aba:	15 97       	sbiw	r26, 0x05	; 5
    2abc:	9a 83       	std	Y+2, r25	; 0x02
    2abe:	89 83       	std	Y+1, r24	; 0x01
    2ac0:	19 96       	adiw	r26, 0x09	; 9
    2ac2:	1c 92       	st	X, r1
    2ac4:	1e 92       	st	-X, r1
    2ac6:	18 97       	sbiw	r26, 0x08	; 8
    2ac8:	da 01       	movw	r26, r20
    2aca:	8c 91       	ld	r24, X
    2acc:	81 50       	subi	r24, 0x01	; 1
    2ace:	8c 93       	st	X, r24
    2ad0:	a2 85       	ldd	r26, Z+10	; 0x0a
    2ad2:	b3 85       	ldd	r27, Z+11	; 0x0b
    2ad4:	c4 81       	ldd	r28, Z+4	; 0x04
    2ad6:	d5 81       	ldd	r29, Z+5	; 0x05
    2ad8:	86 81       	ldd	r24, Z+6	; 0x06
    2ada:	97 81       	ldd	r25, Z+7	; 0x07
    2adc:	9d 83       	std	Y+5, r25	; 0x05
    2ade:	8c 83       	std	Y+4, r24	; 0x04
    2ae0:	c6 81       	ldd	r28, Z+6	; 0x06
    2ae2:	d7 81       	ldd	r29, Z+7	; 0x07
    2ae4:	84 81       	ldd	r24, Z+4	; 0x04
    2ae6:	95 81       	ldd	r25, Z+5	; 0x05
    2ae8:	9b 83       	std	Y+3, r25	; 0x03
    2aea:	8a 83       	std	Y+2, r24	; 0x02
    2aec:	11 96       	adiw	r26, 0x01	; 1
    2aee:	8d 91       	ld	r24, X+
    2af0:	9c 91       	ld	r25, X
    2af2:	12 97       	sbiw	r26, 0x02	; 2
    2af4:	9f 01       	movw	r18, r30
    2af6:	2e 5f       	subi	r18, 0xFE	; 254
    2af8:	3f 4f       	sbci	r19, 0xFF	; 255
    2afa:	82 17       	cp	r24, r18
    2afc:	93 07       	cpc	r25, r19
    2afe:	31 f4       	brne	.+12     	; 0x2b0c <vTaskRemoveFromUnorderedEventList+0xae>
    2b00:	86 81       	ldd	r24, Z+6	; 0x06
    2b02:	97 81       	ldd	r25, Z+7	; 0x07
    2b04:	12 96       	adiw	r26, 0x02	; 2
    2b06:	9c 93       	st	X, r25
    2b08:	8e 93       	st	-X, r24
    2b0a:	11 97       	sbiw	r26, 0x01	; 1
    2b0c:	13 86       	std	Z+11, r1	; 0x0b
    2b0e:	12 86       	std	Z+10, r1	; 0x0a
    2b10:	8c 91       	ld	r24, X
    2b12:	81 50       	subi	r24, 0x01	; 1
    2b14:	8c 93       	st	X, r24
    2b16:	86 89       	ldd	r24, Z+22	; 0x16
    2b18:	90 91 16 07 	lds	r25, 0x0716	; 0x800716 <uxTopReadyPriority>
    2b1c:	98 17       	cp	r25, r24
    2b1e:	10 f4       	brcc	.+4      	; 0x2b24 <vTaskRemoveFromUnorderedEventList+0xc6>
    2b20:	80 93 16 07 	sts	0x0716, r24	; 0x800716 <uxTopReadyPriority>
    2b24:	90 e0       	ldi	r25, 0x00	; 0
    2b26:	dc 01       	movw	r26, r24
    2b28:	aa 0f       	add	r26, r26
    2b2a:	bb 1f       	adc	r27, r27
    2b2c:	aa 0f       	add	r26, r26
    2b2e:	bb 1f       	adc	r27, r27
    2b30:	aa 0f       	add	r26, r26
    2b32:	bb 1f       	adc	r27, r27
    2b34:	8a 0f       	add	r24, r26
    2b36:	9b 1f       	adc	r25, r27
    2b38:	dc 01       	movw	r26, r24
    2b3a:	a4 5b       	subi	r26, 0xB4	; 180
    2b3c:	b8 4f       	sbci	r27, 0xF8	; 248
    2b3e:	11 96       	adiw	r26, 0x01	; 1
    2b40:	0d 90       	ld	r0, X+
    2b42:	bc 91       	ld	r27, X
    2b44:	a0 2d       	mov	r26, r0
    2b46:	b5 83       	std	Z+5, r27	; 0x05
    2b48:	a4 83       	std	Z+4, r26	; 0x04
    2b4a:	14 96       	adiw	r26, 0x04	; 4
    2b4c:	8d 91       	ld	r24, X+
    2b4e:	9c 91       	ld	r25, X
    2b50:	15 97       	sbiw	r26, 0x05	; 5
    2b52:	97 83       	std	Z+7, r25	; 0x07
    2b54:	86 83       	std	Z+6, r24	; 0x06
    2b56:	14 96       	adiw	r26, 0x04	; 4
    2b58:	cd 91       	ld	r28, X+
    2b5a:	dc 91       	ld	r29, X
    2b5c:	15 97       	sbiw	r26, 0x05	; 5
    2b5e:	3b 83       	std	Y+3, r19	; 0x03
    2b60:	2a 83       	std	Y+2, r18	; 0x02
    2b62:	15 96       	adiw	r26, 0x05	; 5
    2b64:	3c 93       	st	X, r19
    2b66:	2e 93       	st	-X, r18
    2b68:	14 97       	sbiw	r26, 0x04	; 4
    2b6a:	a6 89       	ldd	r26, Z+22	; 0x16
    2b6c:	b0 e0       	ldi	r27, 0x00	; 0
    2b6e:	cd 01       	movw	r24, r26
    2b70:	88 0f       	add	r24, r24
    2b72:	99 1f       	adc	r25, r25
    2b74:	88 0f       	add	r24, r24
    2b76:	99 1f       	adc	r25, r25
    2b78:	88 0f       	add	r24, r24
    2b7a:	99 1f       	adc	r25, r25
    2b7c:	a8 0f       	add	r26, r24
    2b7e:	b9 1f       	adc	r27, r25
    2b80:	a4 5b       	subi	r26, 0xB4	; 180
    2b82:	b8 4f       	sbci	r27, 0xF8	; 248
    2b84:	b3 87       	std	Z+11, r27	; 0x0b
    2b86:	a2 87       	std	Z+10, r26	; 0x0a
    2b88:	8c 91       	ld	r24, X
    2b8a:	8f 5f       	subi	r24, 0xFF	; 255
    2b8c:	8c 93       	st	X, r24
    2b8e:	96 89       	ldd	r25, Z+22	; 0x16
    2b90:	e0 91 67 07 	lds	r30, 0x0767	; 0x800767 <pxCurrentTCB>
    2b94:	f0 91 68 07 	lds	r31, 0x0768	; 0x800768 <pxCurrentTCB+0x1>
    2b98:	86 89       	ldd	r24, Z+22	; 0x16
    2b9a:	89 17       	cp	r24, r25
    2b9c:	18 f4       	brcc	.+6      	; 0x2ba4 <vTaskRemoveFromUnorderedEventList+0x146>
    2b9e:	81 e0       	ldi	r24, 0x01	; 1
    2ba0:	80 93 12 07 	sts	0x0712, r24	; 0x800712 <xYieldPending>
    2ba4:	df 91       	pop	r29
    2ba6:	cf 91       	pop	r28
    2ba8:	08 95       	ret

00002baa <vTaskInternalSetTimeOutState>:
    2baa:	20 91 11 07 	lds	r18, 0x0711	; 0x800711 <xNumOfOverflows>
    2bae:	fc 01       	movw	r30, r24
    2bb0:	20 83       	st	Z, r18
    2bb2:	20 91 17 07 	lds	r18, 0x0717	; 0x800717 <xTickCount>
    2bb6:	30 91 18 07 	lds	r19, 0x0718	; 0x800718 <xTickCount+0x1>
    2bba:	32 83       	std	Z+2, r19	; 0x02
    2bbc:	21 83       	std	Z+1, r18	; 0x01
    2bbe:	08 95       	ret

00002bc0 <xTaskCheckForTimeOut>:
    2bc0:	1f 93       	push	r17
    2bc2:	cf 93       	push	r28
    2bc4:	df 93       	push	r29
    2bc6:	0f b6       	in	r0, 0x3f	; 63
    2bc8:	f8 94       	cli
    2bca:	0f 92       	push	r0
    2bcc:	e0 91 17 07 	lds	r30, 0x0717	; 0x800717 <xTickCount>
    2bd0:	f0 91 18 07 	lds	r31, 0x0718	; 0x800718 <xTickCount+0x1>
    2bd4:	dc 01       	movw	r26, r24
    2bd6:	11 96       	adiw	r26, 0x01	; 1
    2bd8:	4d 91       	ld	r20, X+
    2bda:	5c 91       	ld	r21, X
    2bdc:	12 97       	sbiw	r26, 0x02	; 2
    2bde:	df 01       	movw	r26, r30
    2be0:	a4 1b       	sub	r26, r20
    2be2:	b5 0b       	sbc	r27, r21
    2be4:	eb 01       	movw	r28, r22
    2be6:	28 81       	ld	r18, Y
    2be8:	39 81       	ldd	r19, Y+1	; 0x01
    2bea:	2f 3f       	cpi	r18, 0xFF	; 255
    2bec:	df ef       	ldi	r29, 0xFF	; 255
    2bee:	3d 07       	cpc	r19, r29
    2bf0:	f9 f0       	breq	.+62     	; 0x2c30 <xTaskCheckForTimeOut+0x70>
    2bf2:	ec 01       	movw	r28, r24
    2bf4:	18 81       	ld	r17, Y
    2bf6:	c0 91 11 07 	lds	r28, 0x0711	; 0x800711 <xNumOfOverflows>
    2bfa:	1c 17       	cp	r17, r28
    2bfc:	41 f0       	breq	.+16     	; 0x2c0e <xTaskCheckForTimeOut+0x4e>
    2bfe:	e4 17       	cp	r30, r20
    2c00:	f5 07       	cpc	r31, r21
    2c02:	28 f0       	brcs	.+10     	; 0x2c0e <xTaskCheckForTimeOut+0x4e>
    2c04:	fb 01       	movw	r30, r22
    2c06:	11 82       	std	Z+1, r1	; 0x01
    2c08:	10 82       	st	Z, r1
    2c0a:	81 e0       	ldi	r24, 0x01	; 1
    2c0c:	12 c0       	rjmp	.+36     	; 0x2c32 <xTaskCheckForTimeOut+0x72>
    2c0e:	a2 17       	cp	r26, r18
    2c10:	b3 07       	cpc	r27, r19
    2c12:	48 f4       	brcc	.+18     	; 0x2c26 <xTaskCheckForTimeOut+0x66>
    2c14:	fb 01       	movw	r30, r22
    2c16:	2a 1b       	sub	r18, r26
    2c18:	3b 0b       	sbc	r19, r27
    2c1a:	31 83       	std	Z+1, r19	; 0x01
    2c1c:	20 83       	st	Z, r18
    2c1e:	0e 94 d5 15 	call	0x2baa	; 0x2baa <vTaskInternalSetTimeOutState>
    2c22:	80 e0       	ldi	r24, 0x00	; 0
    2c24:	06 c0       	rjmp	.+12     	; 0x2c32 <xTaskCheckForTimeOut+0x72>
    2c26:	db 01       	movw	r26, r22
    2c28:	1d 92       	st	X+, r1
    2c2a:	1c 92       	st	X, r1
    2c2c:	81 e0       	ldi	r24, 0x01	; 1
    2c2e:	01 c0       	rjmp	.+2      	; 0x2c32 <xTaskCheckForTimeOut+0x72>
    2c30:	80 e0       	ldi	r24, 0x00	; 0
    2c32:	0f 90       	pop	r0
    2c34:	0f be       	out	0x3f, r0	; 63
    2c36:	df 91       	pop	r29
    2c38:	cf 91       	pop	r28
    2c3a:	1f 91       	pop	r17
    2c3c:	08 95       	ret

00002c3e <vTaskMissedYield>:
    2c3e:	81 e0       	ldi	r24, 0x01	; 1
    2c40:	80 93 12 07 	sts	0x0712, r24	; 0x800712 <xYieldPending>
    2c44:	08 95       	ret

00002c46 <xTaskPriorityInherit>:
    2c46:	0f 93       	push	r16
    2c48:	1f 93       	push	r17
    2c4a:	cf 93       	push	r28
    2c4c:	df 93       	push	r29
    2c4e:	fc 01       	movw	r30, r24
    2c50:	89 2b       	or	r24, r25
    2c52:	09 f4       	brne	.+2      	; 0x2c56 <xTaskPriorityInherit+0x10>
    2c54:	84 c0       	rjmp	.+264    	; 0x2d5e <xTaskPriorityInherit+0x118>
    2c56:	26 89       	ldd	r18, Z+22	; 0x16
    2c58:	a0 91 67 07 	lds	r26, 0x0767	; 0x800767 <pxCurrentTCB>
    2c5c:	b0 91 68 07 	lds	r27, 0x0768	; 0x800768 <pxCurrentTCB+0x1>
    2c60:	56 96       	adiw	r26, 0x16	; 22
    2c62:	8c 91       	ld	r24, X
    2c64:	28 17       	cp	r18, r24
    2c66:	08 f0       	brcs	.+2      	; 0x2c6a <xTaskPriorityInherit+0x24>
    2c68:	70 c0       	rjmp	.+224    	; 0x2d4a <xTaskPriorityInherit+0x104>
    2c6a:	84 85       	ldd	r24, Z+12	; 0x0c
    2c6c:	95 85       	ldd	r25, Z+13	; 0x0d
    2c6e:	99 23       	and	r25, r25
    2c70:	64 f0       	brlt	.+24     	; 0x2c8a <xTaskPriorityInherit+0x44>
    2c72:	a0 91 67 07 	lds	r26, 0x0767	; 0x800767 <pxCurrentTCB>
    2c76:	b0 91 68 07 	lds	r27, 0x0768	; 0x800768 <pxCurrentTCB+0x1>
    2c7a:	56 96       	adiw	r26, 0x16	; 22
    2c7c:	3c 91       	ld	r19, X
    2c7e:	83 e0       	ldi	r24, 0x03	; 3
    2c80:	90 e0       	ldi	r25, 0x00	; 0
    2c82:	83 1b       	sub	r24, r19
    2c84:	91 09       	sbc	r25, r1
    2c86:	95 87       	std	Z+13, r25	; 0x0d
    2c88:	84 87       	std	Z+12, r24	; 0x0c
    2c8a:	82 85       	ldd	r24, Z+10	; 0x0a
    2c8c:	93 85       	ldd	r25, Z+11	; 0x0b
    2c8e:	30 e0       	ldi	r19, 0x00	; 0
    2c90:	a9 01       	movw	r20, r18
    2c92:	44 0f       	add	r20, r20
    2c94:	55 1f       	adc	r21, r21
    2c96:	44 0f       	add	r20, r20
    2c98:	55 1f       	adc	r21, r21
    2c9a:	44 0f       	add	r20, r20
    2c9c:	55 1f       	adc	r21, r21
    2c9e:	24 0f       	add	r18, r20
    2ca0:	35 1f       	adc	r19, r21
    2ca2:	24 5b       	subi	r18, 0xB4	; 180
    2ca4:	38 4f       	sbci	r19, 0xF8	; 248
    2ca6:	82 17       	cp	r24, r18
    2ca8:	93 07       	cpc	r25, r19
    2caa:	09 f0       	breq	.+2      	; 0x2cae <xTaskPriorityInherit+0x68>
    2cac:	45 c0       	rjmp	.+138    	; 0x2d38 <xTaskPriorityInherit+0xf2>
    2cae:	ef 01       	movw	r28, r30
    2cb0:	8f 01       	movw	r16, r30
    2cb2:	0e 5f       	subi	r16, 0xFE	; 254
    2cb4:	1f 4f       	sbci	r17, 0xFF	; 255
    2cb6:	c8 01       	movw	r24, r16
    2cb8:	0e 94 cd 09 	call	0x139a	; 0x139a <uxListRemove>
    2cbc:	e0 91 67 07 	lds	r30, 0x0767	; 0x800767 <pxCurrentTCB>
    2cc0:	f0 91 68 07 	lds	r31, 0x0768	; 0x800768 <pxCurrentTCB+0x1>
    2cc4:	86 89       	ldd	r24, Z+22	; 0x16
    2cc6:	8e 8b       	std	Y+22, r24	; 0x16
    2cc8:	90 91 16 07 	lds	r25, 0x0716	; 0x800716 <uxTopReadyPriority>
    2ccc:	98 17       	cp	r25, r24
    2cce:	10 f4       	brcc	.+4      	; 0x2cd4 <xTaskPriorityInherit+0x8e>
    2cd0:	80 93 16 07 	sts	0x0716, r24	; 0x800716 <uxTopReadyPriority>
    2cd4:	90 e0       	ldi	r25, 0x00	; 0
    2cd6:	fc 01       	movw	r30, r24
    2cd8:	ee 0f       	add	r30, r30
    2cda:	ff 1f       	adc	r31, r31
    2cdc:	ee 0f       	add	r30, r30
    2cde:	ff 1f       	adc	r31, r31
    2ce0:	ee 0f       	add	r30, r30
    2ce2:	ff 1f       	adc	r31, r31
    2ce4:	8e 0f       	add	r24, r30
    2ce6:	9f 1f       	adc	r25, r31
    2ce8:	fc 01       	movw	r30, r24
    2cea:	e4 5b       	subi	r30, 0xB4	; 180
    2cec:	f8 4f       	sbci	r31, 0xF8	; 248
    2cee:	01 80       	ldd	r0, Z+1	; 0x01
    2cf0:	f2 81       	ldd	r31, Z+2	; 0x02
    2cf2:	e0 2d       	mov	r30, r0
    2cf4:	fd 83       	std	Y+5, r31	; 0x05
    2cf6:	ec 83       	std	Y+4, r30	; 0x04
    2cf8:	84 81       	ldd	r24, Z+4	; 0x04
    2cfa:	95 81       	ldd	r25, Z+5	; 0x05
    2cfc:	9f 83       	std	Y+7, r25	; 0x07
    2cfe:	8e 83       	std	Y+6, r24	; 0x06
    2d00:	a4 81       	ldd	r26, Z+4	; 0x04
    2d02:	b5 81       	ldd	r27, Z+5	; 0x05
    2d04:	13 96       	adiw	r26, 0x03	; 3
    2d06:	1c 93       	st	X, r17
    2d08:	0e 93       	st	-X, r16
    2d0a:	12 97       	sbiw	r26, 0x02	; 2
    2d0c:	15 83       	std	Z+5, r17	; 0x05
    2d0e:	04 83       	std	Z+4, r16	; 0x04
    2d10:	8e 89       	ldd	r24, Y+22	; 0x16
    2d12:	90 e0       	ldi	r25, 0x00	; 0
    2d14:	fc 01       	movw	r30, r24
    2d16:	ee 0f       	add	r30, r30
    2d18:	ff 1f       	adc	r31, r31
    2d1a:	ee 0f       	add	r30, r30
    2d1c:	ff 1f       	adc	r31, r31
    2d1e:	ee 0f       	add	r30, r30
    2d20:	ff 1f       	adc	r31, r31
    2d22:	e8 0f       	add	r30, r24
    2d24:	f9 1f       	adc	r31, r25
    2d26:	e4 5b       	subi	r30, 0xB4	; 180
    2d28:	f8 4f       	sbci	r31, 0xF8	; 248
    2d2a:	fb 87       	std	Y+11, r31	; 0x0b
    2d2c:	ea 87       	std	Y+10, r30	; 0x0a
    2d2e:	80 81       	ld	r24, Z
    2d30:	8f 5f       	subi	r24, 0xFF	; 255
    2d32:	80 83       	st	Z, r24
    2d34:	81 e0       	ldi	r24, 0x01	; 1
    2d36:	16 c0       	rjmp	.+44     	; 0x2d64 <xTaskPriorityInherit+0x11e>
    2d38:	a0 91 67 07 	lds	r26, 0x0767	; 0x800767 <pxCurrentTCB>
    2d3c:	b0 91 68 07 	lds	r27, 0x0768	; 0x800768 <pxCurrentTCB+0x1>
    2d40:	56 96       	adiw	r26, 0x16	; 22
    2d42:	8c 91       	ld	r24, X
    2d44:	86 8b       	std	Z+22, r24	; 0x16
    2d46:	81 e0       	ldi	r24, 0x01	; 1
    2d48:	0d c0       	rjmp	.+26     	; 0x2d64 <xTaskPriorityInherit+0x11e>
    2d4a:	91 a1       	ldd	r25, Z+33	; 0x21
    2d4c:	e0 91 67 07 	lds	r30, 0x0767	; 0x800767 <pxCurrentTCB>
    2d50:	f0 91 68 07 	lds	r31, 0x0768	; 0x800768 <pxCurrentTCB+0x1>
    2d54:	86 89       	ldd	r24, Z+22	; 0x16
    2d56:	98 17       	cp	r25, r24
    2d58:	20 f0       	brcs	.+8      	; 0x2d62 <xTaskPriorityInherit+0x11c>
    2d5a:	80 e0       	ldi	r24, 0x00	; 0
    2d5c:	03 c0       	rjmp	.+6      	; 0x2d64 <xTaskPriorityInherit+0x11e>
    2d5e:	80 e0       	ldi	r24, 0x00	; 0
    2d60:	01 c0       	rjmp	.+2      	; 0x2d64 <xTaskPriorityInherit+0x11e>
    2d62:	81 e0       	ldi	r24, 0x01	; 1
    2d64:	df 91       	pop	r29
    2d66:	cf 91       	pop	r28
    2d68:	1f 91       	pop	r17
    2d6a:	0f 91       	pop	r16
    2d6c:	08 95       	ret

00002d6e <xTaskPriorityDisinherit>:
    2d6e:	0f 93       	push	r16
    2d70:	1f 93       	push	r17
    2d72:	cf 93       	push	r28
    2d74:	df 93       	push	r29
    2d76:	fc 01       	movw	r30, r24
    2d78:	89 2b       	or	r24, r25
    2d7a:	09 f4       	brne	.+2      	; 0x2d7e <xTaskPriorityDisinherit+0x10>
    2d7c:	51 c0       	rjmp	.+162    	; 0x2e20 <xTaskPriorityDisinherit+0xb2>
    2d7e:	82 a1       	ldd	r24, Z+34	; 0x22
    2d80:	81 50       	subi	r24, 0x01	; 1
    2d82:	82 a3       	std	Z+34, r24	; 0x22
    2d84:	26 89       	ldd	r18, Z+22	; 0x16
    2d86:	91 a1       	ldd	r25, Z+33	; 0x21
    2d88:	29 17       	cp	r18, r25
    2d8a:	09 f4       	brne	.+2      	; 0x2d8e <xTaskPriorityDisinherit+0x20>
    2d8c:	4b c0       	rjmp	.+150    	; 0x2e24 <xTaskPriorityDisinherit+0xb6>
    2d8e:	81 11       	cpse	r24, r1
    2d90:	4b c0       	rjmp	.+150    	; 0x2e28 <xTaskPriorityDisinherit+0xba>
    2d92:	ef 01       	movw	r28, r30
    2d94:	8f 01       	movw	r16, r30
    2d96:	0e 5f       	subi	r16, 0xFE	; 254
    2d98:	1f 4f       	sbci	r17, 0xFF	; 255
    2d9a:	c8 01       	movw	r24, r16
    2d9c:	0e 94 cd 09 	call	0x139a	; 0x139a <uxListRemove>
    2da0:	89 a1       	ldd	r24, Y+33	; 0x21
    2da2:	8e 8b       	std	Y+22, r24	; 0x16
    2da4:	23 e0       	ldi	r18, 0x03	; 3
    2da6:	30 e0       	ldi	r19, 0x00	; 0
    2da8:	28 1b       	sub	r18, r24
    2daa:	31 09       	sbc	r19, r1
    2dac:	3d 87       	std	Y+13, r19	; 0x0d
    2dae:	2c 87       	std	Y+12, r18	; 0x0c
    2db0:	90 91 16 07 	lds	r25, 0x0716	; 0x800716 <uxTopReadyPriority>
    2db4:	98 17       	cp	r25, r24
    2db6:	10 f4       	brcc	.+4      	; 0x2dbc <xTaskPriorityDisinherit+0x4e>
    2db8:	80 93 16 07 	sts	0x0716, r24	; 0x800716 <uxTopReadyPriority>
    2dbc:	90 e0       	ldi	r25, 0x00	; 0
    2dbe:	fc 01       	movw	r30, r24
    2dc0:	ee 0f       	add	r30, r30
    2dc2:	ff 1f       	adc	r31, r31
    2dc4:	ee 0f       	add	r30, r30
    2dc6:	ff 1f       	adc	r31, r31
    2dc8:	ee 0f       	add	r30, r30
    2dca:	ff 1f       	adc	r31, r31
    2dcc:	8e 0f       	add	r24, r30
    2dce:	9f 1f       	adc	r25, r31
    2dd0:	fc 01       	movw	r30, r24
    2dd2:	e4 5b       	subi	r30, 0xB4	; 180
    2dd4:	f8 4f       	sbci	r31, 0xF8	; 248
    2dd6:	01 80       	ldd	r0, Z+1	; 0x01
    2dd8:	f2 81       	ldd	r31, Z+2	; 0x02
    2dda:	e0 2d       	mov	r30, r0
    2ddc:	fd 83       	std	Y+5, r31	; 0x05
    2dde:	ec 83       	std	Y+4, r30	; 0x04
    2de0:	84 81       	ldd	r24, Z+4	; 0x04
    2de2:	95 81       	ldd	r25, Z+5	; 0x05
    2de4:	9f 83       	std	Y+7, r25	; 0x07
    2de6:	8e 83       	std	Y+6, r24	; 0x06
    2de8:	a4 81       	ldd	r26, Z+4	; 0x04
    2dea:	b5 81       	ldd	r27, Z+5	; 0x05
    2dec:	13 96       	adiw	r26, 0x03	; 3
    2dee:	1c 93       	st	X, r17
    2df0:	0e 93       	st	-X, r16
    2df2:	12 97       	sbiw	r26, 0x02	; 2
    2df4:	15 83       	std	Z+5, r17	; 0x05
    2df6:	04 83       	std	Z+4, r16	; 0x04
    2df8:	ee 89       	ldd	r30, Y+22	; 0x16
    2dfa:	f0 e0       	ldi	r31, 0x00	; 0
    2dfc:	cf 01       	movw	r24, r30
    2dfe:	88 0f       	add	r24, r24
    2e00:	99 1f       	adc	r25, r25
    2e02:	88 0f       	add	r24, r24
    2e04:	99 1f       	adc	r25, r25
    2e06:	88 0f       	add	r24, r24
    2e08:	99 1f       	adc	r25, r25
    2e0a:	e8 0f       	add	r30, r24
    2e0c:	f9 1f       	adc	r31, r25
    2e0e:	e4 5b       	subi	r30, 0xB4	; 180
    2e10:	f8 4f       	sbci	r31, 0xF8	; 248
    2e12:	fb 87       	std	Y+11, r31	; 0x0b
    2e14:	ea 87       	std	Y+10, r30	; 0x0a
    2e16:	80 81       	ld	r24, Z
    2e18:	8f 5f       	subi	r24, 0xFF	; 255
    2e1a:	80 83       	st	Z, r24
    2e1c:	81 e0       	ldi	r24, 0x01	; 1
    2e1e:	05 c0       	rjmp	.+10     	; 0x2e2a <xTaskPriorityDisinherit+0xbc>
    2e20:	80 e0       	ldi	r24, 0x00	; 0
    2e22:	03 c0       	rjmp	.+6      	; 0x2e2a <xTaskPriorityDisinherit+0xbc>
    2e24:	80 e0       	ldi	r24, 0x00	; 0
    2e26:	01 c0       	rjmp	.+2      	; 0x2e2a <xTaskPriorityDisinherit+0xbc>
    2e28:	80 e0       	ldi	r24, 0x00	; 0
    2e2a:	df 91       	pop	r29
    2e2c:	cf 91       	pop	r28
    2e2e:	1f 91       	pop	r17
    2e30:	0f 91       	pop	r16
    2e32:	08 95       	ret

00002e34 <vTaskPriorityDisinheritAfterTimeout>:
    2e34:	0f 93       	push	r16
    2e36:	1f 93       	push	r17
    2e38:	cf 93       	push	r28
    2e3a:	df 93       	push	r29
    2e3c:	fc 01       	movw	r30, r24
    2e3e:	89 2b       	or	r24, r25
    2e40:	09 f4       	brne	.+2      	; 0x2e44 <vTaskPriorityDisinheritAfterTimeout+0x10>
    2e42:	66 c0       	rjmp	.+204    	; 0x2f10 <vTaskPriorityDisinheritAfterTimeout+0xdc>
    2e44:	91 a1       	ldd	r25, Z+33	; 0x21
    2e46:	96 17       	cp	r25, r22
    2e48:	08 f4       	brcc	.+2      	; 0x2e4c <vTaskPriorityDisinheritAfterTimeout+0x18>
    2e4a:	96 2f       	mov	r25, r22
    2e4c:	86 89       	ldd	r24, Z+22	; 0x16
    2e4e:	98 17       	cp	r25, r24
    2e50:	09 f4       	brne	.+2      	; 0x2e54 <vTaskPriorityDisinheritAfterTimeout+0x20>
    2e52:	5e c0       	rjmp	.+188    	; 0x2f10 <vTaskPriorityDisinheritAfterTimeout+0xdc>
    2e54:	22 a1       	ldd	r18, Z+34	; 0x22
    2e56:	21 30       	cpi	r18, 0x01	; 1
    2e58:	09 f0       	breq	.+2      	; 0x2e5c <vTaskPriorityDisinheritAfterTimeout+0x28>
    2e5a:	5a c0       	rjmp	.+180    	; 0x2f10 <vTaskPriorityDisinheritAfterTimeout+0xdc>
    2e5c:	96 8b       	std	Z+22, r25	; 0x16
    2e5e:	24 85       	ldd	r18, Z+12	; 0x0c
    2e60:	35 85       	ldd	r19, Z+13	; 0x0d
    2e62:	33 23       	and	r19, r19
    2e64:	34 f0       	brlt	.+12     	; 0x2e72 <vTaskPriorityDisinheritAfterTimeout+0x3e>
    2e66:	23 e0       	ldi	r18, 0x03	; 3
    2e68:	30 e0       	ldi	r19, 0x00	; 0
    2e6a:	29 1b       	sub	r18, r25
    2e6c:	31 09       	sbc	r19, r1
    2e6e:	35 87       	std	Z+13, r19	; 0x0d
    2e70:	24 87       	std	Z+12, r18	; 0x0c
    2e72:	22 85       	ldd	r18, Z+10	; 0x0a
    2e74:	33 85       	ldd	r19, Z+11	; 0x0b
    2e76:	90 e0       	ldi	r25, 0x00	; 0
    2e78:	ac 01       	movw	r20, r24
    2e7a:	44 0f       	add	r20, r20
    2e7c:	55 1f       	adc	r21, r21
    2e7e:	44 0f       	add	r20, r20
    2e80:	55 1f       	adc	r21, r21
    2e82:	44 0f       	add	r20, r20
    2e84:	55 1f       	adc	r21, r21
    2e86:	84 0f       	add	r24, r20
    2e88:	95 1f       	adc	r25, r21
    2e8a:	84 5b       	subi	r24, 0xB4	; 180
    2e8c:	98 4f       	sbci	r25, 0xF8	; 248
    2e8e:	28 17       	cp	r18, r24
    2e90:	39 07       	cpc	r19, r25
    2e92:	f1 f5       	brne	.+124    	; 0x2f10 <vTaskPriorityDisinheritAfterTimeout+0xdc>
    2e94:	ef 01       	movw	r28, r30
    2e96:	8f 01       	movw	r16, r30
    2e98:	0e 5f       	subi	r16, 0xFE	; 254
    2e9a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e9c:	c8 01       	movw	r24, r16
    2e9e:	0e 94 cd 09 	call	0x139a	; 0x139a <uxListRemove>
    2ea2:	8e 89       	ldd	r24, Y+22	; 0x16
    2ea4:	90 91 16 07 	lds	r25, 0x0716	; 0x800716 <uxTopReadyPriority>
    2ea8:	98 17       	cp	r25, r24
    2eaa:	10 f4       	brcc	.+4      	; 0x2eb0 <vTaskPriorityDisinheritAfterTimeout+0x7c>
    2eac:	80 93 16 07 	sts	0x0716, r24	; 0x800716 <uxTopReadyPriority>
    2eb0:	90 e0       	ldi	r25, 0x00	; 0
    2eb2:	fc 01       	movw	r30, r24
    2eb4:	ee 0f       	add	r30, r30
    2eb6:	ff 1f       	adc	r31, r31
    2eb8:	ee 0f       	add	r30, r30
    2eba:	ff 1f       	adc	r31, r31
    2ebc:	ee 0f       	add	r30, r30
    2ebe:	ff 1f       	adc	r31, r31
    2ec0:	8e 0f       	add	r24, r30
    2ec2:	9f 1f       	adc	r25, r31
    2ec4:	fc 01       	movw	r30, r24
    2ec6:	e4 5b       	subi	r30, 0xB4	; 180
    2ec8:	f8 4f       	sbci	r31, 0xF8	; 248
    2eca:	01 80       	ldd	r0, Z+1	; 0x01
    2ecc:	f2 81       	ldd	r31, Z+2	; 0x02
    2ece:	e0 2d       	mov	r30, r0
    2ed0:	fd 83       	std	Y+5, r31	; 0x05
    2ed2:	ec 83       	std	Y+4, r30	; 0x04
    2ed4:	84 81       	ldd	r24, Z+4	; 0x04
    2ed6:	95 81       	ldd	r25, Z+5	; 0x05
    2ed8:	9f 83       	std	Y+7, r25	; 0x07
    2eda:	8e 83       	std	Y+6, r24	; 0x06
    2edc:	a4 81       	ldd	r26, Z+4	; 0x04
    2ede:	b5 81       	ldd	r27, Z+5	; 0x05
    2ee0:	13 96       	adiw	r26, 0x03	; 3
    2ee2:	1c 93       	st	X, r17
    2ee4:	0e 93       	st	-X, r16
    2ee6:	12 97       	sbiw	r26, 0x02	; 2
    2ee8:	15 83       	std	Z+5, r17	; 0x05
    2eea:	04 83       	std	Z+4, r16	; 0x04
    2eec:	8e 89       	ldd	r24, Y+22	; 0x16
    2eee:	90 e0       	ldi	r25, 0x00	; 0
    2ef0:	fc 01       	movw	r30, r24
    2ef2:	ee 0f       	add	r30, r30
    2ef4:	ff 1f       	adc	r31, r31
    2ef6:	ee 0f       	add	r30, r30
    2ef8:	ff 1f       	adc	r31, r31
    2efa:	ee 0f       	add	r30, r30
    2efc:	ff 1f       	adc	r31, r31
    2efe:	e8 0f       	add	r30, r24
    2f00:	f9 1f       	adc	r31, r25
    2f02:	e4 5b       	subi	r30, 0xB4	; 180
    2f04:	f8 4f       	sbci	r31, 0xF8	; 248
    2f06:	fb 87       	std	Y+11, r31	; 0x0b
    2f08:	ea 87       	std	Y+10, r30	; 0x0a
    2f0a:	80 81       	ld	r24, Z
    2f0c:	8f 5f       	subi	r24, 0xFF	; 255
    2f0e:	80 83       	st	Z, r24
    2f10:	df 91       	pop	r29
    2f12:	cf 91       	pop	r28
    2f14:	1f 91       	pop	r17
    2f16:	0f 91       	pop	r16
    2f18:	08 95       	ret

00002f1a <pvTaskIncrementMutexHeldCount>:

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
    2f1a:	80 91 67 07 	lds	r24, 0x0767	; 0x800767 <pxCurrentTCB>
    2f1e:	90 91 68 07 	lds	r25, 0x0768	; 0x800768 <pxCurrentTCB+0x1>
    2f22:	89 2b       	or	r24, r25
    2f24:	39 f0       	breq	.+14     	; 0x2f34 <pvTaskIncrementMutexHeldCount+0x1a>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
    2f26:	e0 91 67 07 	lds	r30, 0x0767	; 0x800767 <pxCurrentTCB>
    2f2a:	f0 91 68 07 	lds	r31, 0x0768	; 0x800768 <pxCurrentTCB+0x1>
    2f2e:	82 a1       	ldd	r24, Z+34	; 0x22
    2f30:	8f 5f       	subi	r24, 0xFF	; 255
    2f32:	82 a3       	std	Z+34, r24	; 0x22
        }

        return pxCurrentTCB;
    2f34:	80 91 67 07 	lds	r24, 0x0767	; 0x800767 <pxCurrentTCB>
    2f38:	90 91 68 07 	lds	r25, 0x0768	; 0x800768 <pxCurrentTCB+0x1>
    }
    2f3c:	08 95       	ret

00002f3e <__udivmodhi4>:
    2f3e:	aa 1b       	sub	r26, r26
    2f40:	bb 1b       	sub	r27, r27
    2f42:	51 e1       	ldi	r21, 0x11	; 17
    2f44:	07 c0       	rjmp	.+14     	; 0x2f54 <__udivmodhi4_ep>

00002f46 <__udivmodhi4_loop>:
    2f46:	aa 1f       	adc	r26, r26
    2f48:	bb 1f       	adc	r27, r27
    2f4a:	a6 17       	cp	r26, r22
    2f4c:	b7 07       	cpc	r27, r23
    2f4e:	10 f0       	brcs	.+4      	; 0x2f54 <__udivmodhi4_ep>
    2f50:	a6 1b       	sub	r26, r22
    2f52:	b7 0b       	sbc	r27, r23

00002f54 <__udivmodhi4_ep>:
    2f54:	88 1f       	adc	r24, r24
    2f56:	99 1f       	adc	r25, r25
    2f58:	5a 95       	dec	r21
    2f5a:	a9 f7       	brne	.-22     	; 0x2f46 <__udivmodhi4_loop>
    2f5c:	80 95       	com	r24
    2f5e:	90 95       	com	r25
    2f60:	bc 01       	movw	r22, r24
    2f62:	cd 01       	movw	r24, r26
    2f64:	08 95       	ret

00002f66 <memcpy>:
    2f66:	fb 01       	movw	r30, r22
    2f68:	dc 01       	movw	r26, r24
    2f6a:	02 c0       	rjmp	.+4      	; 0x2f70 <memcpy+0xa>
    2f6c:	01 90       	ld	r0, Z+
    2f6e:	0d 92       	st	X+, r0
    2f70:	41 50       	subi	r20, 0x01	; 1
    2f72:	50 40       	sbci	r21, 0x00	; 0
    2f74:	d8 f7       	brcc	.-10     	; 0x2f6c <memcpy+0x6>
    2f76:	08 95       	ret

00002f78 <_exit>:
    2f78:	f8 94       	cli

00002f7a <__stop_program>:
    2f7a:	ff cf       	rjmp	.-2      	; 0x2f7a <__stop_program>
